import {
  deepEqual_default
} from "./chunk-UWFUXSOF.js";
import {
  CalendarType_default2 as CalendarType_default,
  CalendarType_default3 as CalendarType_default2,
  CalendarWeekNumbering_default,
  Calendars_default,
  LanguageTag_default,
  Localization_default,
  Log_default,
  UniversalDate_default,
  assert_default,
  extend_default
} from "./chunk-BWZI5OG7.js";
import "./chunk-GBZ2GERS.js";
import {
  __privateAdd,
  __privateGet,
  __privateSet
} from "./chunk-6WDZWUHI.js";

// node_modules/@ui5/webcomponents-localization/dist/sap/base/config.js
var legacyFormats = ["sapUiLegacyTimeFormat", "sapUiABAPTimeFormat", "sapUiLegacyDateFormat", "sapUiABAPDateFormat", "sapUiLegacyNumberFormat", "sapUiABAPNumberFormat"];
var config_default = {
  getWritableInstance() {
    return {
      get({
        name
      }) {
        if (legacyFormats.includes(name)) {
          return void 0;
        }
        throw new Error("Localization :: missing configuration requested.");
      }
    };
  },
  Type: {}
};

// node_modules/@ui5/webcomponents-localization/dist/sap/base/Event.js
var EVENT_PARAMETERS_SYMBOL = Symbol("parameters");
var _type;
var Event = class {
  constructor(sType, oParameters) {
    /**
     *The type of the event
     * @type {string}
     * @private
     * @ui5-restricted sap.ui.core
     */
    __privateAdd(this, _type, void 0);
    for (const param in oParameters) {
      this[param] = oParameters[param];
      Object.defineProperty(this, param, {
        configurable: false,
        writable: false
      });
    }
    this[EVENT_PARAMETERS_SYMBOL] = oParameters;
    __privateSet(this, _type, sType);
  }
  get type() {
    return __privateGet(this, _type);
  }
  /**
   * Returns the event parameters as map
   * @param {module:sap/base/Event} oEvent The event object to retrieve the parameters
   * @returns {object} Map of event parameters
   * @private
   * @ui5-restricted sap/base/i18n sap.ui.core
   */
  static getParameters(oEvent) {
    return Object.assign({}, oEvent[EVENT_PARAMETERS_SYMBOL]);
  }
};
_type = new WeakMap();
var Event_default = Event;

// node_modules/@ui5/webcomponents-localization/dist/sap/base/Eventing.js
var _mEventRegistry;
var Eventing = class {
  constructor() {
    __privateAdd(this, _mEventRegistry, {});
  }
  /**
   * Attaches an event handler to the event with the given identifier.
   *
   * @param {string}
   * 		sType The type of the event to listen for
   * @param {function}
   * 		fnFunction The handler function to call when the event occurs. The event
   * 		object ({@link module:sap/base/Event}) is provided as first argument of the handler. Handlers must not change
   * 		the content of the event.
   * @param {object}
   * 		[oData] An object that will be passed to the handler along with the event object when the event is fired
   * @since 1.120.0
   * @private
   * @ui5-restricted sap.ui.core sap/base/i18n
   */
  attachEvent(sType, fnFunction, oData) {
    assert_default(typeof sType === "string" && sType, "Eventing.attachEvent: sType must be a non-empty string");
    assert_default(typeof fnFunction === "function", "Eventing.attachEvent: fnFunction must be a function");
    let aEventListeners = __privateGet(this, _mEventRegistry)[sType];
    if (!Array.isArray(aEventListeners)) {
      aEventListeners = __privateGet(this, _mEventRegistry)[sType] = [];
    }
    aEventListeners.push({
      fnFunction,
      oData
    });
  }
  /**
   * Attaches an event handler, called one time only, to the event with the given identifier.
   *
   * When the event occurs, the handler function is called and the handler registration is automatically removed afterwards.
   *
   * @param {string}
   *            sType The type of the event to listen for
   * @param {function}
   *            fnFunction The handler function to call when the event occurs. The event
   *                       object ({@link module:sap/base/Event}) is provided as first argument of the handler. Handlers must not change
   *                       the content of the event.
   * @param {object}
   *            [oData] An object that will be passed to the handler along with the event object when the event is fired
   * @since 1.120.0
   * @private
   * @ui5-restricted sap.ui.core sap/base/i18n
   */
  attachEventOnce(sType, fnFunction, oData) {
    const fnOnce = (oEvent) => {
      this.detachEvent(sType, fnOnce);
      fnFunction.call(null, oEvent);
    };
    fnOnce.oOriginal = {
      fnFunction
    };
    this.attachEvent(sType, fnOnce, oData);
  }
  /**
   * Removes a previously attached event handler from the event with the given identifier.
   *
   * The passed parameters must match those used for registration with {@link #attachEvent} beforehand.
   *
   * @param {string}
   *            sType The type of the event to detach from
   * @param {function}
   *            fnFunction The handler function to detach from the event
   * @since 1.120.0
   * @private
   * @ui5-restricted sap.ui.core sap/base/i18n
   */
  detachEvent(sType, fnFunction) {
    assert_default(typeof sType === "string" && sType, "Eventing.detachEvent: sType must be a non-empty string");
    assert_default(typeof fnFunction === "function", "Eventing.detachEvent: fnFunction must be a function");
    const aEventListeners = __privateGet(this, _mEventRegistry)[sType];
    if (!Array.isArray(aEventListeners)) {
      return;
    }
    let oFound;
    for (let i = 0, iL = aEventListeners.length; i < iL; i++) {
      if (aEventListeners[i].fnFunction === fnFunction) {
        oFound = aEventListeners[i];
        aEventListeners.splice(i, 1);
        break;
      }
    }
    if (!oFound) {
      for (let i = 0, iL = aEventListeners.length; i < iL; i++) {
        const oOriginal = aEventListeners[i].fnFunction.oOriginal;
        if (oOriginal && oOriginal.fnFunction === fnFunction) {
          aEventListeners.splice(i, 1);
          break;
        }
      }
    }
    if (aEventListeners.length == 0) {
      delete __privateGet(this, _mEventRegistry)[sType];
    }
  }
  /**
   * Fires an {@link module:sap/base/Event event} with the given settings and notifies all attached event handlers.
   *
   * @param {string}
   *            sType The type of the event to fire
   * @param {object}
   *            [oParameters] Parameters which should be carried by the event
   * @since 1.120.0
   * @private
   * @ui5-restricted sap.ui.core sap/base/i18n
   */
  fireEvent(sType, oParameters) {
    let aEventListeners, oEvent, i, iL, oInfo;
    aEventListeners = __privateGet(this, _mEventRegistry)[sType];
    if (Array.isArray(aEventListeners)) {
      aEventListeners = aEventListeners.slice();
      oEvent = new Event_default(sType, oParameters);
      for (i = 0, iL = aEventListeners.length; i < iL; i++) {
        oInfo = aEventListeners[i];
        oInfo.fnFunction.call(null, oEvent);
      }
    }
  }
};
_mEventRegistry = new WeakMap();
var Eventing_default = Eventing;

// node_modules/@ui5/webcomponents-localization/dist/sap/base/util/isEmptyObject.js
var fnIsEmptyObject = function isEmptyObject(obj) {
  for (var sName in obj) {
    return false;
  }
  return true;
};
var isEmptyObject_default = fnIsEmptyObject;

// node_modules/@ui5/webcomponents-localization/dist/sap/base/i18n/Formatting.js
var oEventing = new Eventing_default();
var oWritableConfig = config_default.getWritableInstance();
var mSettings = {};
var mChanges;
var aCustomIslamicCalendarData;
var M_ABAP_DATE_FORMAT_PATTERN = {
  "": {
    pattern: null
  },
  "1": {
    pattern: "dd.MM.yyyy"
  },
  "2": {
    pattern: "MM/dd/yyyy"
  },
  "3": {
    pattern: "MM-dd-yyyy"
  },
  "4": {
    pattern: "yyyy.MM.dd"
  },
  "5": {
    pattern: "yyyy/MM/dd"
  },
  "6": {
    pattern: "yyyy-MM-dd"
  },
  "7": {
    pattern: "Gyy.MM.dd"
  },
  "8": {
    pattern: "Gyy/MM/dd"
  },
  "9": {
    pattern: "Gyy-MM-dd"
  },
  "A": {
    pattern: "yyyy/MM/dd"
  },
  "B": {
    pattern: "yyyy/MM/dd"
  },
  "C": {
    pattern: "yyyy/MM/dd"
  }
};
var M_ABAP_TIME_FORMAT_PATTERN = {
  "": {
    "short": null,
    medium: null,
    dayPeriods: null
  },
  "0": {
    "short": "HH:mm",
    medium: "HH:mm:ss",
    dayPeriods: null
  },
  "1": {
    "short": "hh:mm a",
    medium: "hh:mm:ss a",
    dayPeriods: ["AM", "PM"]
  },
  "2": {
    "short": "hh:mm a",
    medium: "hh:mm:ss a",
    dayPeriods: ["am", "pm"]
  },
  "3": {
    "short": "KK:mm a",
    medium: "KK:mm:ss a",
    dayPeriods: ["AM", "PM"]
  },
  "4": {
    "short": "KK:mm a",
    medium: "KK:mm:ss a",
    dayPeriods: ["am", "pm"]
  }
};
var M_ABAP_NUMBER_FORMAT_SYMBOLS = {
  "": {
    groupingSeparator: null,
    decimalSeparator: null
  },
  " ": {
    groupingSeparator: ".",
    decimalSeparator: ","
  },
  "X": {
    groupingSeparator: ",",
    decimalSeparator: "."
  },
  "Y": {
    groupingSeparator: " ",
    decimalSeparator: ","
  }
};
function check(bCondition, sMessage) {
  if (!bCondition) {
    throw new TypeError(sMessage);
  }
}
function _set(sKey, oValue) {
  config_default._.invalidate();
  const oOldValue = mSettings[sKey];
  if (oValue != null) {
    mSettings[sKey] = oValue;
  } else {
    delete mSettings[sKey];
  }
  if ((oOldValue != null || oValue != null) && !deepEqual_default(oOldValue, oValue)) {
    const bFireEvent = !mChanges;
    mChanges ?? (mChanges = {});
    mChanges[sKey] = oValue;
    if (bFireEvent) {
      fireChange();
    }
  }
}
function createLanguageTag(vLanguageTag) {
  let oLanguageTag;
  if (vLanguageTag && typeof vLanguageTag === "string") {
    try {
      oLanguageTag = new LanguageTag_default(vLanguageTag);
    } catch (e) {
    }
  } else if (vLanguageTag instanceof LanguageTag_default) {
    oLanguageTag = vLanguageTag;
  }
  return oLanguageTag;
}
var Formatting = {
  /**
   * The <code>change</code> event is fired, when the configuration options are changed.
   * For the event parameters please refer to {@link module:sap/base/i18n/Formatting$ChangeEvent}.
   *
   * @name module:sap/base/i18n/Formatting.change
   * @event
   * @param {module:sap/base/i18n/Formatting$ChangeEvent} oEvent
   * @public
   * @since 1.120
   */
  /**
   * The formatting change event. Contains only the parameters which were changed.
   *
   * The list below shows the possible combinations of parameters available as part of the change event.
   *
   * <ul>
   * <li>{@link module:sap/base/i18n/Formatting.setLanguageTag Formatting.setLanguageTag}:
   * <ul>
   * <li><code>languageTag</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.setCustomIslamicCalendarData Formatting.setCustomIslamicCalendarData}:
   * <ul>
   * <li><code>customIslamicCalendarData</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.setCalendarWeekNumbering Formatting.setCalendarWeekNumbering}:
   * <ul>
   * <li><code>calendarWeekNumbering</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.setCalendarType Formatting.setCalendarType}:
   * <ul>
   * <li><code>calendarType</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.addCustomCurrencies Formatting.addCustomCurrencies} / {@link module:sap/base/i18n/Formatting.setCustomCurrencies Formatting.setCustomCurrencies}:
   * <ul>
   * <li><code>currency</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.setABAPDateFormat Formatting.setABAPDateFormat} (all parameters listed below):
   * <ul>
   * <li><code>ABAPDateFormat</code></li>
   * <li><code>"dateFormats-short"</code></li>
   * <li><code>"dateFormats-medium"</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.setABAPTimeFormat Formatting.setABAPTimeFormat} (all parameters listed below):
   * <ul>
   * <li><code>ABAPTimeFormat</code></li>
   * <li><code>"timeFormats-short"</code></li>
   * <li><code>"timeFormats-medium"</code></li>
   * <li><code>"dayPeriods-format-abbreviated"</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.setABAPNumberFormat Formatting.setABAPNumberFormat} (all parameters listed below):
   * <ul>
   * <li><code>ABAPNumberFormat</code></li>
   * <li><code>"symbols-latn-group"</code></li>
   * <li><code>"symbols-latn-decimal"</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.setDatePattern Formatting.setDatePattern} (one of the parameters listed below):
   * <ul>
   * <li><code>"dateFormats-short"</code></li>
   * <li><code>"dateFormats-medium"</code></li>
   * <li><code>"dateFormats-long"</code></li>
   * <li><code>"dateFormats-full"</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.setTimePattern Formatting.setTimePattern} (one of the parameters listed below):
   * <ul>
   * <li><code>"timeFormats-short"</code></li>
   * <li><code>"timeFormats-medium"</code></li>
   * <li><code>"timeFormats-long"</code></li>
   * <li><code>"timeFormats-full"</code></li>
   * </ul>
   * </li>
   * <li>{@link module:sap/base/i18n/Formatting.setNumberSymbol Formatting.setNumberSymbol} (one of the parameters listed below):
   * <ul>
   * <li><code>"symbols-latn-group"</code></li>
   * <li><code>"symbols-latn-decimal"</code></li>
   * <li><code>"symbols-latn-plusSign"</code></li>
   * <li><code>"symbols-latn-minusSign"</code></li>
   * </ul>
   * </li>
   * </ul>
   *
   * @typedef {object} module:sap/base/i18n/Formatting$ChangeEvent
   * @property {string} [languageTag] The formatting language tag.
   * @property {string} [ABAPDateFormat] The ABAP date format.
   * @property {string} [ABAPTimeFormat] The ABAP time format.
   * @property {string} [ABAPNumberFormat] The ABAP number format.
   * @property {object[]} [legacyDateCalendarCustomizing] The legacy date calendar customizing.
   * @property {object} [calendarWeekNumbering] The calendar week numbering.
   * @property {object} [calendarType] The calendar type.
   * @property {string} ["dateFormats-short"] The short date format.
   * @property {string} ["dateFormats-medium"] The medium date format.
   * @property {string} ["dateFormats-long"] The long date format.
   * @property {string} ["dateFormats-full"] The full date format.
   * @property {string} ["timeFormats-short"] The short time format.
   * @property {string} ["timeFormats-medium"] The medium time format.
   * @property {string} ["timeFormats-long"] The long time format.
   * @property {string} ["timeFormats-full"] The full time format.
   * @property {string} ["symbols-latn-group"] The latin symbols group.
   * @property {string} ["symbols-latn-decimal"] The latin symbols decimal.
   * @property {string} ["symbols-latn-plusSign"] The latin symbols plusSign.
   * @property {string} ["symbols-latn-minusSign"] The latin symbols minusSign.
   * @property {Object<string,string>} [currency] The currency.
   * @property {string[]} ["dayPeriods-format-abbreviated"] The abbreviated day periods format.
   * @public
   * @since 1.120
   */
  /**
   * Attaches the <code>fnFunction</code> event handler to the {@link #event:change change} event
   * of <code>module:sap/base/i18n/Formatting</code>.
   *
   * @param {function(module:sap/base/i18n/Formatting$ChangeEvent)} fnFunction
   *   The function to be called when the event occurs
   * @public
   * @since 1.120
   */
  attachChange(fnFunction) {
    oEventing.attachEvent("change", fnFunction);
  },
  /**
   * Detaches event handler <code>fnFunction</code> from the {@link #event:change change} event of
   * this <code>module:sap/base/i18n/Formatting</code>.
   *
   * @param {function(module:sap/base/i18n/Formatting$ChangeEvent)} fnFunction Function to be called when the event occurs
   * @public
   * @since 1.120
   */
  detachChange(fnFunction) {
    oEventing.detachEvent("change", fnFunction);
  },
  /**
   * Returns the LanguageTag to be used for formatting.
   *
   * If no such LanguageTag has been defined, this method falls back to the language,
   * see {@link module:sap/base/i18n/Localization.getLanguage Localization.getLanguage()}.
   *
   * If any user preferences for date, time or number formatting have been set,
   * and if no format LanguageTag has been specified, then a special private use subtag
   * is added to the LanguageTag, indicating to the framework that these user preferences
   * should be applied.
   *
   * @returns {module:sap/base/i18n/LanguageTag} the format LanguageTag
   * @public
   * @since 1.120
   */
  getLanguageTag() {
    function fallback() {
      let oLanguageTag = new LanguageTag_default(Localization_default.getLanguage());
      if (!isEmptyObject_default(mSettings) || Formatting.getCalendarWeekNumbering() !== CalendarWeekNumbering_default.Default) {
        let l = oLanguageTag.toString();
        if (l.indexOf("-x-") < 0) {
          l += "-x-sapufmt";
        } else if (l.indexOf("-sapufmt") <= l.indexOf("-x-")) {
          l += "-sapufmt";
        }
        oLanguageTag = new LanguageTag_default(l);
      }
      return oLanguageTag;
    }
    return oWritableConfig.get({
      name: "sapUiFormatLocale",
      type: function(sFormatLocale) {
        return new LanguageTag_default(sFormatLocale);
      },
      defaultValue: fallback,
      external: true
    });
  },
  /**
   * Sets a new language tag to be used from now on for retrieving language
   * specific formatters. Modifying this setting does not have an impact on
   * the retrieval of translated texts!
   *
   * Can either be set to a concrete value (a BCP47 or Java locale compliant
   * language tag) or to <code>null</code>. When set to <code>null</code> (default
   * value) then locale specific formatters are retrieved for the current language.
   *
   * After changing the format locale, the framework tries to update localization
   * specific parts of the UI. See the documentation of
   * {@link module:sap/base/i18n/Localization.setLanguage Localization.setLanguage()}
   * for details and restrictions.
   *
   * <b>Note</b>: When a language tag is set, it has higher priority than a number,
   * date or time format defined with a call to <code>setABAPNumberFormat</code>,
   * <code>setABAPDateFormat</code> or <code>setABAPTimeFormat</code>.
   *
   * <b>Note</b>: See documentation of
   * {@link module:sap/base/i18n/Localization.setLanguage Localization.setLanguage()}
   * for restrictions.
   *
   * @param {string|module:sap/base/i18n/LanguageTag|null} vLanguageTag the new BCP47 compliant language tag;
   *   case doesn't matter and underscores can be used instead of dashes to separate
   *   components (compatibility with Java Locale IDs)
   * @throws {TypeError} When <code>sLanguageTag</code> is given, but is not a valid BCP47 language
   *   tag or Java locale identifier
   * @public
   * @since 1.120
   */
  setLanguageTag(vLanguageTag) {
    const oLanguageTag = createLanguageTag(vLanguageTag);
    check(vLanguageTag == null || oLanguageTag, "vLanguageTag must be a BCP47 language tag or Java Locale id or null");
    const oOldLanguageTag = Formatting.getLanguageTag();
    oWritableConfig.set("sapUiFormatLocale", oLanguageTag == null ? void 0 : oLanguageTag.toString());
    const oCurrentLanguageTag = Formatting.getLanguageTag();
    if (oOldLanguageTag.toString() !== oCurrentLanguageTag.toString()) {
      const bFireEvent = !mChanges;
      mChanges ?? (mChanges = {});
      mChanges.languageTag = oCurrentLanguageTag.toString();
      if (bFireEvent) {
        fireChange();
      }
    }
  },
  /**
   * @deprecated As of Version 1.120
   */
  _set,
  /**
   * Retrieves the custom units.
   * These custom units are set by {@link #setCustomUnits} and {@link #addCustomUnits}
   * @returns {object} custom units object
   * @see {@link module:sap/base/i18n/Formatting.setCustomUnits}
   * @see {@link module:sap/base/i18n/Formatting.addCustomUnits}
   * @private
   * @since 1.116.0
   */
  getCustomUnits() {
    var _a;
    return (_a = mSettings["units"]) == null ? void 0 : _a["short"];
  },
  /**
   * Sets custom units which can be used to do Unit Formatting.
   *
   * The custom unit object consists of:
   * * a custom unit key which can then be referenced to use this unit.
   * * <code>displayName</code> which represents the name of the unit.
   * * <code>unitPattern-count-&lt;pluralName&gt;</code> which represents the plural category of the locale for the given value.
   * The plural category is defined within the locale, e.g. in the 'en' locale:
   * <code>unitPattern-count-one</code> for <code>1</code>,
   * <code>unitPattern-count-zero</code> for <code>0</code>,
   * <code>unitPattern-count-other</code> for all the res
   * To retrieve all plural categories defined for a locale use <code>sap.ui.core.LocaleData.prototype.getPluralCategories</code>.
   *
   * A Sample custom unit definition could look like this:
   * <code>
   * {
   *  "BAG": {
   *      "displayName": "Bag",
   *		"unitPattern-count-one": "{0} bag",
   *		"unitPattern-count-other": "{0} bags"
   *  }
   * }
   * </code>
   * In the above snippet:
   * * <code>"BAG"</code> represent the unit key which is used to reference it.
   * * <code>"unitPattern-count-one"</code> represent the unit pattern for the form "one", e.g. the number <code>1</code> in the 'en' locale.
   * * <code>"unitPattern-count-other"</code> represent the unit pattern for all other numbers which do not
   *   match the plural forms of the previous patterns.
   * * In the patterns <code>{0}</code> is replaced by the number
   *
   * E.g. In locale 'en' value <code>1</code> would result in <code>1 Bag</code>, while <code>2</code> would result in <code>2 Bags</code>
   * @param {object} mUnits custom unit object which replaces the current custom unit definition. Call with <code>null</code> to delete custom units.
   * @private
   * @since 1.116.0
   */
  setCustomUnits(mUnits) {
    let mUnitsshort = null;
    if (mUnits) {
      mUnitsshort = {
        "short": mUnits
      };
    }
    _set("units", mUnitsshort);
  },
  /**
   * Adds custom units.
   * Similar to {@link #setCustomUnits} but instead of setting the custom units, it will add additional ones.
   * @param {object} mUnits custom unit object which replaces the current custom unit definition. Call with <code>null</code> to delete custom units.
   * @see {@link module:sap/base/i18n/Formatting.setCustomUnits}
   * @private
   * @since 1.116.0
   */
  addCustomUnits(mUnits) {
    const mExistingUnits = Formatting.getCustomUnits();
    if (mExistingUnits) {
      mUnits = extend_default({}, mExistingUnits, mUnits);
    }
    Formatting.setCustomUnits(mUnits);
  },
  /**
   * Sets custom unit mappings.
   * Unit mappings contain key value pairs (both strings)
   * * {string} key: a new entry which maps to an existing unit key
   * * {string} value: an existing unit key
   *
   * Example:
   * <code>
   * {
   *  "my": "my-custom-unit",
   *  "cm": "length-centimeter"
   * }
   * </code>
   * Note: It is possible to create multiple entries per unit key.
   * Call with <code>null</code> to delete unit mappings.
   * @param {object} mUnitMappings unit mappings
   * @private
   * @since 1.116.0
   */
  setUnitMappings(mUnitMappings) {
    _set("unitMappings", mUnitMappings);
  },
  /**
   * Adds unit mappings.
   * Similar to {@link #setUnitMappings} but instead of setting the unit mappings, it will add additional ones.
   * @param {object} mUnitMappings unit mappings
   * @see {@link module:sap/base/i18n/Formatting.setUnitMappings}
   * @private
   * @since 1.116.0
   */
  addUnitMappings(mUnitMappings) {
    const mExistingUnits = Formatting.getUnitMappings();
    if (mExistingUnits) {
      mUnitMappings = extend_default({}, mExistingUnits, mUnitMappings);
    }
    Formatting.setUnitMappings(mUnitMappings);
  },
  /**
   * Retrieves the unit mappings.
   * These unit mappings are set by {@link #setUnitMappings} and {@link #addUnitMappings}
   * @private
   * @returns {object} unit mapping object
   * @see {@link module:sap/base/i18n/Formatting.setUnitMappings}
   * @see {@link module:sap/base/i18n/Formatting.addUnitMappings}
   * @since 1.116.0
   */
  getUnitMappings() {
    return mSettings["unitMappings"];
  },
  /**
   * Returns the currently set date pattern or undefined if no pattern has been defined.
   * @param {"short"|"medium"|"long"|"full"} sStyle The date style (short, medium, long or full)
   * @returns {string} The resulting date pattern
   * @public
   * @since 1.120
   */
  getDatePattern(sStyle) {
    assert_default(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
    return mSettings["dateFormats-" + sStyle];
  },
  /**
   * Defines the preferred format pattern for the given date format style.
   *
   * Calling this method with a null or undefined pattern removes a previously set pattern.
   *
   * If a pattern is defined, it will be preferred over patterns derived from the current locale.
   *
   * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
   *
   * After changing the date pattern, the framework tries to update localization
   * specific parts of the UI. See the documentation of {@link module:sap/base/i18n/Localization.setLanguage Localization.setLanguage()}
   * for details and restrictions.
   *
   * @param {"short"|"medium"|"long"|"full"} sStyle must be one of short, medium, long or full.
   * @param {string} sPattern the format pattern to be used in LDML syntax.
   * @public
   * @since 1.120
   */
  setDatePattern(sStyle, sPattern) {
    check(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
    _set("dateFormats-" + sStyle, sPattern);
  },
  /**
   * Returns the currently set time pattern or undefined if no pattern has been defined.
   * @param {"short"|"medium"|"long"|"full"} sStyle The time style (short, medium, long or full)
   * @returns {string} The resulting time pattern
   * @public
   * @since 1.120
   */
  getTimePattern(sStyle) {
    assert_default(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
    return mSettings["timeFormats-" + sStyle];
  },
  /**
   * Defines the preferred format pattern for the given time format style.
   *
   * Calling this method with a null or undefined pattern removes a previously set pattern.
   *
   * If a pattern is defined, it will be preferred over patterns derived from the current locale.
   *
   * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
   *
   * After changing the time pattern, the framework tries to update localization
   * specific parts of the UI. See the documentation of
   * {@link module:sap/base/i18n/Localization.setLanguage Localization.setLanguage()}
   * for details and restrictions.
   *
   * @param {"short"|"medium"|"long"|"full"} sStyle must be one of short, medium, long or full.
   * @param {string} sPattern the format pattern to be used in LDML syntax.
   * @public
   * @since 1.120
   */
  setTimePattern(sStyle, sPattern) {
    check(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
    _set("timeFormats-" + sStyle, sPattern);
  },
  /**
   * Returns the currently set number symbol of the given type or undefined if no symbol has been defined.
   *
   * @param {"group"|"decimal"|"plusSign"|"minusSign"} sType the type of symbol
   * @returns {string} A non-numerical symbol used as part of a number for the given type,
   *   e.g. for locale de_DE:
   *     <ul>
   *       <li>"group": "." (grouping separator)</li>
   *       <li>"decimal": "," (decimal separator)</li>
   *       <li>"plusSign": "+" (plus sign)</li>
   *       <li>"minusSign": "-" (minus sign)</li>
   *     </ul>
   * @public
   * @since 1.120
   */
  getNumberSymbol(sType) {
    assert_default(["group", "decimal", "plusSign", "minusSign"].includes(sType), "sType must be decimal, group, plusSign or minusSign");
    return mSettings["symbols-latn-" + sType];
  },
  /**
   * Defines the string to be used for the given number symbol.
   *
   * Calling this method with a null or undefined symbol removes a previously set symbol string.
   * Note that an empty string is explicitly allowed.
   *
   * If a symbol is defined, it will be preferred over symbols derived from the current locale.
   *
   * See class {@link sap.ui.core.format.NumberFormat} for details about the symbols.
   *
   * After changing the number symbol, the framework tries to update localization
   * specific parts of the UI. See the documentation of
   * {@link module:sap/base/i18n/Localization.setLanguage Localization.setLanguage()}
   * for details and restrictions.
   *
   * @param {"group"|"decimal"|"plusSign"|"minusSign"} sType the type of symbol
   * @param {string} sSymbol will be used to represent the given symbol type
   * @public
   * @since 1.120
   */
  setNumberSymbol(sType, sSymbol) {
    check(["group", "decimal", "plusSign", "minusSign"].includes(sType), "sType must be decimal, group, plusSign or minusSign");
    _set("symbols-latn-" + sType, sSymbol);
  },
  /**
   * Retrieves the custom currencies.
   * E.g.
   * <code>
   * {
   *  "KWD": {"digits": 3},
   *  "TND" : {"digits": 3}
   * }
   * </code>
   * @returns {object} the mapping between custom currencies and its digits
   * @public
   * @since 1.120
   * @see {@link module:sap/base/i18n/Formatting.setCustomCurrencies}
   * @see {@link module:sap/base/i18n/Formatting.addCustomCurrencies}
   */
  getCustomCurrencies() {
    return mSettings["currency"];
  },
  /**
   * Sets custom currencies and replaces existing entries.
   *
   * There is a special currency code named "DEFAULT" that is optional.
   * In case it is set it will be used for all currencies not contained
   * in the list, otherwise currency digits as defined by the CLDR will
   * be used as a fallback.
   *
   * Example:
   * To use CLDR, but override single currencies
   * <code>
   * {
   *  "KWD": {"digits": 3},
   *  "TND" : {"digits": 3}
   * }
   * </code>
   *
   * To replace the CLDR currency digits completely
   * <code>
   * {
   *   "DEFAULT": {"digits": 2},
   *   "ADP": {"digits": 0},
   *   ...
   *   "XPF": {"digits": 0}
   * }
   * </code>
   *
   * Note: To unset the custom currencies: call with <code>undefined</code>
   * Custom currencies must not only consist of digits but contain at least one non-digit character, e.g. "a",
   * so that the measure part can be distinguished from the number part.
   * @public
   * @since 1.120
   * @param {object} mCurrencies currency map which is set
   * @see {@link module:sap/base/i18n/Formatting.addCustomCurrencies}
   */
  setCustomCurrencies(mCurrencies) {
    check(typeof mCurrencies === "object" || mCurrencies == null, "mCurrencyDigits must be an object");
    Object.keys(mCurrencies || {}).forEach(function(sCurrencyDigit) {
      check(typeof sCurrencyDigit === "string");
      check(typeof mCurrencies[sCurrencyDigit] === "object");
    });
    _set("currency", mCurrencies);
  },
  /**
   * Adds custom currencies to the existing entries.
   * E.g.
   * <code>
   * {
   *  "KWD": {"digits": 3},
   *  "TND" : {"digits": 3}
   * }
   * </code>
   *
   * @public
   * @since 1.120
   * @param {object} mCurrencies adds to the currency map
   * @see {@link module:sap/base/i18n/Formatting.setCustomCurrencies}
   */
  addCustomCurrencies(mCurrencies) {
    const mExistingCurrencies = Formatting.getCustomCurrencies();
    if (mExistingCurrencies) {
      mCurrencies = extend_default({}, mExistingCurrencies, mCurrencies);
    }
    Formatting.setCustomCurrencies(mCurrencies);
  },
  _setDayPeriods(sWidth, aTexts) {
    assert_default(sWidth == "narrow" || sWidth == "abbreviated" || sWidth == "wide", "sWidth must be narrow, abbreviated or wide");
    _set("dayPeriods-format-" + sWidth, aTexts);
  },
  /**
   * Returns the currently set ABAP date format (its id) or undefined if none has been set.
   *
   * @returns {"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"|"A"|"B"|"C"|undefined} ID of the ABAP date format,
   *   if not set or set to <code>""</code>, <code>undefined</code> will be returned
   * @public
   * @since 1.120
   */
  getABAPDateFormat() {
    const sABAPDateFormat = oWritableConfig.get({
      name: "sapUiABAPDateFormat",
      type: config_default.Type.String,
      /**
       * @deprecated As of Version 1.120
       */
      defaultValue: oWritableConfig.get({
        name: "sapUiLegacyDateFormat",
        type: config_default.Type.String,
        external: true
      }),
      external: true
    });
    return sABAPDateFormat ? sABAPDateFormat.toUpperCase() : void 0;
  },
  /**
   * Allows to specify one of the ABAP date formats.
   *
   * This method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP
   * format. When called with a null or undefined format id, any previously applied format will be removed.
   *
   * After changing the date format, the framework tries to update localization
   * specific parts of the UI. See the documentation of
   * {@link module:sap/base/i18n/Localization.setLanguage Localization.setLanguage()}
   * for details and restrictions.
   *
   * @param {""|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"|"A"|"B"|"C"} [sFormatId=""] ID of the ABAP date format,
   *   <code>""</code> will reset the date patterns for 'short' and 'medium' style to the
   *   locale-specific ones.
   * @public
   * @since 1.120
   */
  setABAPDateFormat(sFormatId) {
    sFormatId = sFormatId ? String(sFormatId).toUpperCase() : "";
    check(M_ABAP_DATE_FORMAT_PATTERN.hasOwnProperty(sFormatId), "sFormatId must be one of ['1','2','3','4','5','6','7','8','9','A','B','C'] or empty");
    const bFireEvent = !mChanges;
    const sOldFormat = Formatting.getABAPDateFormat();
    if (sOldFormat !== sFormatId) {
      mChanges ?? (mChanges = {});
      oWritableConfig.set("sapUiABAPDateFormat", sFormatId);
      mChanges.ABAPDateFormat = sFormatId;
      Formatting.setDatePattern("short", M_ABAP_DATE_FORMAT_PATTERN[sFormatId].pattern);
      Formatting.setDatePattern("medium", M_ABAP_DATE_FORMAT_PATTERN[sFormatId].pattern);
      if (bFireEvent) {
        fireChange();
      }
    }
  },
  /**
   * Returns the currently set ABAP time format (its id) or undefined if none has been set.
   *
   * @returns {"0"|"1"|"2"|"3"|"4"|undefined} ID of the ABAP date format,
   *   if not set or set to <code>""</code>, <code>undefined</code> will be returned
   * @public
   * @since 1.120
   */
  getABAPTimeFormat() {
    const sABAPTimeFormat = oWritableConfig.get({
      name: "sapUiABAPTimeFormat",
      type: config_default.Type.String,
      /**
       * @deprecated As of Version 1.120
       */
      defaultValue: oWritableConfig.get({
        name: "sapUiLegacyTimeFormat",
        type: config_default.Type.String,
        external: true
      }),
      external: true
    });
    return sABAPTimeFormat ? sABAPTimeFormat.toUpperCase() : void 0;
  },
  /**
   * Allows to specify one of the ABAP time formats.
   *
   * This method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP
   * formats and sets the day period texts to "AM"/"PM" or "am"/"pm" respectively. When called
   * with a null or undefined format id, any previously applied format will be removed.
   *
   * After changing the time format, the framework tries to update localization
   * specific parts of the UI. See the documentation of
   * {@link module:sap/base/i18n/Localization.setLanguage Localization.setLanguage()}
   * for details and restrictions.
   *
   * @param {""|"0"|"1"|"2"|"3"|"4"} [sFormatId=""] ID of the ABAP time format,
   *   <code>""</code> will reset the time patterns for 'short' and 'medium' style and the day
   *   period texts to the locale-specific ones.
   * @public
   * @since 1.120
   */
  setABAPTimeFormat(sFormatId) {
    sFormatId = sFormatId || "";
    check(M_ABAP_TIME_FORMAT_PATTERN.hasOwnProperty(sFormatId), "sFormatId must be one of ['0','1','2','3','4'] or empty");
    const bFireEvent = !mChanges;
    const sOldFormat = Formatting.getABAPTimeFormat();
    if (sOldFormat !== sFormatId) {
      mChanges ?? (mChanges = {});
      oWritableConfig.set("sapUiABAPTimeFormat", sFormatId);
      mChanges.ABAPTimeFormat = sFormatId;
      Formatting.setTimePattern("short", M_ABAP_TIME_FORMAT_PATTERN[sFormatId]["short"]);
      Formatting.setTimePattern("medium", M_ABAP_TIME_FORMAT_PATTERN[sFormatId]["medium"]);
      Formatting._setDayPeriods("abbreviated", M_ABAP_TIME_FORMAT_PATTERN[sFormatId].dayPeriods);
      if (bFireEvent) {
        fireChange();
      }
    }
  },
  /**
   * Returns the currently set ABAP number format (its id) or undefined if none has been set.
   *
   * @returns {" "|"X"|"Y"|undefined} ID of the ABAP number format,
   *   if not set or set to <code>""</code>, <code>undefined</code> will be returned
   * @public
   * @since 1.120
   */
  getABAPNumberFormat() {
    const sABAPNumberFormat = oWritableConfig.get({
      name: "sapUiABAPNumberFormat",
      type: config_default.Type.String,
      /**
       * @deprecated As of Version 1.120
       */
      defaultValue: oWritableConfig.get({
        name: "sapUiLegacyNumberFormat",
        type: config_default.Type.String,
        external: true
      }),
      external: true
    });
    return sABAPNumberFormat ? sABAPNumberFormat.toUpperCase() : void 0;
  },
  /**
   * Allows to specify one of the ABAP number format.
   *
   * This method will modify the 'group' and 'decimal' symbols. When called with a null
   * or undefined format id, any previously applied format will be removed.
   *
   * After changing the number format, the framework tries to update localization
   * specific parts of the UI. See the documentation of
   * {@link module:sap/base/i18n/Localization.setLanguage Localization.setLanguage()}
   * for details and restrictions.
   *
   * @param {""|" "|"X"|"Y"} [sFormatId=""] ID of the ABAP number format set,
   *   <code>""</code> will reset the 'group' and 'decimal' symbols to the locale-specific
   *   ones.
   * @public
   * @since 1.120
   */
  setABAPNumberFormat(sFormatId) {
    sFormatId = sFormatId ? sFormatId.toUpperCase() : "";
    check(M_ABAP_NUMBER_FORMAT_SYMBOLS.hasOwnProperty(sFormatId), "sFormatId must be one of [' ','X','Y'] or empty");
    const bFireEvent = !mChanges;
    const sOldFormat = Formatting.getABAPNumberFormat();
    if (sOldFormat !== sFormatId) {
      mChanges ?? (mChanges = {});
      oWritableConfig.set("sapUiABAPNumberFormat", sFormatId);
      mChanges.ABAPNumberFormat = sFormatId;
      Formatting.setNumberSymbol("group", M_ABAP_NUMBER_FORMAT_SYMBOLS[sFormatId].groupingSeparator);
      Formatting.setNumberSymbol("decimal", M_ABAP_NUMBER_FORMAT_SYMBOLS[sFormatId].decimalSeparator);
      if (bFireEvent) {
        fireChange();
      }
    }
  },
  /**
   *
   * Customizing data for the support of Islamic calendar.
   * Represents one row of data from Table TISLCAL.
   *
   * @typedef {object} module:sap/base/i18n/Formatting.CustomIslamicCalendarData
   *
   * @property {"A"|"B"} dateFormat The date format. Column DATFM in TISLCAL.
   * @property {string} islamicMonthStart The Islamic date in format: 'yyyyMMdd'. Column ISLMONTHSTART in TISLCAL.
   * @property {string} gregDate The corresponding Gregorian date format: 'yyyyMMdd'. Column GREGDATE in TISLCAL.
   *
   * @public
   */
  /**
   * Allows to specify the customizing data for Islamic calendar support
   *
   * See: {@link module:sap/base/i18n/Formatting.CustomIslamicCalendarData}
   *
   * @param {module:sap/base/i18n/Formatting.CustomIslamicCalendarData[]} aCustomCalendarData Contains the customizing data for the support of Islamic calendar.
   * One JSON object in the array represents one row of data from Table TISLCAL
   * @public
   * @since 1.120
   */
  setCustomIslamicCalendarData(aCustomCalendarData) {
    check(Array.isArray(aCustomCalendarData), "aCustomCalendarData must be an Array");
    const bFireEvent = !mChanges;
    mChanges ?? (mChanges = {});
    aCustomIslamicCalendarData = mChanges.customIslamicCalendarData = aCustomCalendarData.slice();
    if (bFireEvent) {
      fireChange();
    }
  },
  /**
   * Returns the currently set customizing data for Islamic calendar support.
   *
   * See: {@link module:sap/base/i18n/Formatting.CustomIslamicCalendarData}
   *
   * @returns {module:sap/base/i18n/Formatting.CustomIslamicCalendarData[]|undefined} Returns an array that contains the customizing data. Each element in the array has properties: dateFormat, islamicMonthStart, gregDate. For details, please see {@link #.setCustomIslamicCalendarData}
   * @public
   * @since 1.120
   */
  getCustomIslamicCalendarData() {
    return (aCustomIslamicCalendarData == null ? void 0 : aCustomIslamicCalendarData.slice()) ?? void 0;
  },
  /**
   * Define whether the NumberFormatter shall always place the currency code after the numeric value, with
   * the only exception of right-to-left locales, where the currency code shall be placed before the numeric value.
   * Default configuration setting is <code>true</code>.
   *
   * When set to <code>false</code> the placement of the currency code is done dynamically, depending on the
   * configured locale using data provided by the Unicode Common Locale Data Repository (CLDR).
   *
   * Each currency instance ({@link sap.ui.core.format.NumberFormat.getCurrencyInstance}) will be created
   * with this setting unless overwritten on instance level.
   *
   * @param {boolean} bTrailingCurrencyCode Whether currency codes shall always be placed after the numeric value
   * @public
   * @since 1.120
   */
  setTrailingCurrencyCode(bTrailingCurrencyCode) {
    check(typeof bTrailingCurrencyCode === "boolean", "bTrailingCurrencyCode must be a boolean");
    oWritableConfig.set("sapUiTrailingCurrencyCode", bTrailingCurrencyCode);
  },
  /**
   * Returns current trailingCurrencyCode configuration for new NumberFormatter instances
   *
   * @return {boolean} Whether currency codes shall always be placed after the numeric value
   * @public
   * @since 1.120
   */
  getTrailingCurrencyCode() {
    return oWritableConfig.get({
      name: "sapUiTrailingCurrencyCode",
      type: config_default.Type.Boolean,
      defaultValue: true,
      external: true
    });
  },
  /**
   * Returns a live object with the current settings
   * TODO this method is part of the facade to be accessible from LocaleData, but it shouldn't be
   *
   * @returns {mSettings} The custom LocaleData settings object
   * @private
   * @ui5-restricted sap.ui.core
   * @since 1.116.0
   */
  getCustomLocaleData() {
    return mSettings;
  },
  /**
   * Returns the calendar week numbering algorithm used to determine the first day of the week
   * and the first calendar week of the year, see {@link module:sap/base/i18n/data/CalendarWeekNumbering}.
   *
   * @returns {module:sap/base/i18n/date/CalendarWeekNumbering} The calendar week numbering algorithm
   *
   * @public
   * @since 1.120
   */
  getCalendarWeekNumbering() {
    let oCalendarWeekNumbering = CalendarWeekNumbering_default.Default;
    try {
      oCalendarWeekNumbering = oWritableConfig.get({
        name: "sapUiCalendarWeekNumbering",
        type: CalendarWeekNumbering_default,
        defaultValue: CalendarWeekNumbering_default.Default,
        external: true
      });
    } catch (err) {
    }
    return oCalendarWeekNumbering;
  },
  /**
   * Sets the calendar week numbering algorithm which is used to determine the first day of the week
   * and the first calendar week of the year, see {@link module:sap/base/i18n/date/CalendarWeekNumbering}.
   *
   * @param {module:sap/base/i18n/date/CalendarWeekNumbering} sCalendarWeekNumbering
   *   The calendar week numbering algorithm
   * @throws {TypeError}
   *   If <code>sCalendarWeekNumbering</code> is not a valid calendar week numbering algorithm,
   *   defined in {@link module:sap/base/i18n/date/CalendarWeekNumbering}
   *
   * @public
   * @since 1.120
   */
  setCalendarWeekNumbering(sCalendarWeekNumbering) {
    config_default._.checkEnum(CalendarWeekNumbering_default, sCalendarWeekNumbering, "calendarWeekNumbering");
    const sCurrentWeekNumbering = oWritableConfig.get({
      name: "sapUiCalendarWeekNumbering",
      type: CalendarWeekNumbering_default,
      defaultValue: CalendarWeekNumbering_default.Default,
      external: true
    });
    if (sCurrentWeekNumbering !== sCalendarWeekNumbering) {
      const bFireEvent = !mChanges;
      mChanges ?? (mChanges = {});
      oWritableConfig.set("sapUiCalendarWeekNumbering", sCalendarWeekNumbering);
      mChanges.calendarWeekNumbering = sCalendarWeekNumbering;
      if (bFireEvent) {
        fireChange();
      }
    }
  },
  /**
   * Returns the calendar type which is being used in locale dependent functionality.
   *
   * When it's explicitly set by calling <code>setCalendarType</code>, the set calendar type is returned.
   * Otherwise, the calendar type is determined by checking the format settings and current locale.
   *
   * @returns {module:sap/base/i18n/date/CalendarType} the current calendar type, e.g. <code>Gregorian</code>
   * @public
   * @since 1.120
   */
  getCalendarType() {
    let sName, sCalendarType = oWritableConfig.get({
      name: "sapUiCalendarType",
      type: config_default.Type.String,
      external: true
    });
    sCalendarType ?? (sCalendarType = null);
    if (sCalendarType) {
      for (sName in CalendarType_default) {
        if (sName.toLowerCase() === sCalendarType.toLowerCase()) {
          return sName;
        }
      }
      Log_default.warning("Parameter 'calendarType' is set to " + sCalendarType + " which isn't a valid value and therefore ignored. The calendar type is determined from format setting and current locale");
    }
    const sABAPDateFormat = Formatting.getABAPDateFormat();
    switch (sABAPDateFormat) {
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
        return CalendarType_default.Gregorian;
      case "7":
      case "8":
      case "9":
        return CalendarType_default.Japanese;
      case "A":
      case "B":
        return CalendarType_default.Islamic;
      case "C":
        return CalendarType_default.Persian;
      default:
        return Localization_default.getPreferredCalendarType();
    }
  },
  /**
   * Sets the new calendar type to be used from now on in locale dependent functionality (for example,
   * formatting, translation texts, etc.).
   *
   * @param {module:sap/base/i18n/date/CalendarType|null} sCalendarType the new calendar type. Set it with null to clear the calendar type
   *   and the calendar type is calculated based on the format settings and current locale.
   * @public
   * @since 1.120
   */
  setCalendarType(sCalendarType) {
    const sOldCalendarType = Formatting.getCalendarType();
    oWritableConfig.set("sapUiCalendarType", sCalendarType);
    const sCurrentCalendarType = Formatting.getCalendarType();
    if (sOldCalendarType !== sCurrentCalendarType) {
      const bFireEvent = !mChanges;
      mChanges ?? (mChanges = {});
      mChanges.calendarType = sCurrentCalendarType;
      if (bFireEvent) {
        fireChange();
      }
    }
  }
};
function fireChange() {
  oEventing.fireEvent("change", mChanges);
  mChanges = void 0;
}
function init() {
  const sABAPDateFormat = Formatting.getABAPDateFormat();
  if (sABAPDateFormat !== void 0) {
    Formatting.setABAPDateFormat(sABAPDateFormat);
  }
  const sABAPNumberFormat = Formatting.getABAPNumberFormat();
  if (sABAPNumberFormat !== void 0) {
    Formatting.setABAPNumberFormat(sABAPNumberFormat);
  }
  const sABAPTimeFormat = Formatting.getABAPTimeFormat();
  if (sABAPTimeFormat !== void 0) {
    Formatting.setABAPTimeFormat(sABAPTimeFormat);
  }
}
init();
var Formatting_default = Formatting;

// node_modules/@ui5/webcomponents-localization/dist/sap/ui/core/date/Islamic.js
var Islamic = UniversalDate_default.extend(
  "sap.ui.core.date.Islamic",
  /** @lends sap.ui.core.date.Islamic.prototype */
  {
    constructor: function() {
      var aArgs = arguments;
      if (aArgs.length > 1) {
        aArgs = toGregorianArguments(aArgs);
      }
      this.oDate = this.createDate(Date, aArgs);
      this.sCalendarType = CalendarType_default2.Islamic;
    }
  }
);
Islamic.UTC = function() {
  var aArgs = toGregorianArguments(arguments);
  return Date.UTC.apply(Date, aArgs);
};
Islamic.now = function() {
  return Date.now();
};
var BASE_YEAR = 1400;
var GREGORIAN_EPOCH_DAYS = 17214255e-1;
var ISLAMIC_EPOCH_DAYS = 19484395e-1;
var ISLAMIC_MILLIS = -425215872e5;
var ONE_DAY = 864e5;
var oCustomizationMap = null;
var aSupportedIslamicCalendarTypes = ["A", "B"];
function toIslamic(oGregorian) {
  var iGregorianYear = oGregorian.year, iGregorianMonth = oGregorian.month, iGregorianDay = oGregorian.day, iIslamicYear, iIslamicMonth, iIslamicDay, iMonths, iDays, iLeapAdj, iJulianDay;
  iLeapAdj = 0;
  if (iGregorianMonth + 1 > 2) {
    iLeapAdj = isGregorianLeapYear(iGregorianYear) ? -1 : -2;
  }
  iJulianDay = GREGORIAN_EPOCH_DAYS - 1 + 365 * (iGregorianYear - 1) + Math.floor((iGregorianYear - 1) / 4) + -Math.floor((iGregorianYear - 1) / 100) + Math.floor((iGregorianYear - 1) / 400) + Math.floor((367 * (iGregorianMonth + 1) - 362) / 12 + iLeapAdj + iGregorianDay);
  iJulianDay = Math.floor(iJulianDay) + 0.5;
  iDays = iJulianDay - ISLAMIC_EPOCH_DAYS;
  iMonths = Math.floor(iDays / 29.530588853);
  if (iMonths < 0) {
    iIslamicYear = Math.floor(iMonths / 12) + 1;
    iIslamicMonth = iMonths % 12;
    if (iIslamicMonth < 0) {
      iIslamicMonth += 12;
    }
    iIslamicDay = iDays - monthStart(iIslamicYear, iIslamicMonth) + 1;
  } else {
    iMonths++;
    while (getCustomMonthStartDays(iMonths) > iDays) {
      iMonths--;
    }
    iIslamicYear = Math.floor(iMonths / 12) + 1;
    iIslamicMonth = iMonths % 12;
    iIslamicDay = iDays - getCustomMonthStartDays(12 * (iIslamicYear - 1) + iIslamicMonth) + 1;
  }
  return {
    day: iIslamicDay,
    month: iIslamicMonth,
    year: iIslamicYear
  };
}
function toGregorian(oIslamic) {
  var iIslamicYear = oIslamic.year, iIslamicMonth = oIslamic.month, iIslamicDate = oIslamic.day, iMonthStart = iIslamicYear < 1 ? monthStart(iIslamicYear, iIslamicMonth) : getCustomMonthStartDays(12 * (iIslamicYear - 1) + iIslamicMonth), iJulianDay = iIslamicDate + iMonthStart + ISLAMIC_EPOCH_DAYS - 1, iJulianDayNoon = Math.floor(iJulianDay - 0.5) + 0.5, iDaysSinceGregorianEpoch = iJulianDayNoon - GREGORIAN_EPOCH_DAYS, iQuadricent = Math.floor(iDaysSinceGregorianEpoch / 146097), iQuadricentNormalized = mod(iDaysSinceGregorianEpoch, 146097), iCent = Math.floor(iQuadricentNormalized / 36524), iCentNormalized = mod(iQuadricentNormalized, 36524), iQuad = Math.floor(iCentNormalized / 1461), iQuadNormalized = mod(iCentNormalized, 1461), iYearIndex = Math.floor(iQuadNormalized / 365), iYear = iQuadricent * 400 + iCent * 100 + iQuad * 4 + iYearIndex, iMonth, iDay, iGregorianYearStartDays, iDayOfYear, tjd, tjd2, iLeapAdj, iLeapAdj2;
  if (!(iCent == 4 || iYearIndex == 4)) {
    iYear++;
  }
  iGregorianYearStartDays = GREGORIAN_EPOCH_DAYS + 365 * (iYear - 1) + Math.floor((iYear - 1) / 4) - Math.floor((iYear - 1) / 100) + Math.floor((iYear - 1) / 400);
  iDayOfYear = iJulianDayNoon - iGregorianYearStartDays;
  tjd = GREGORIAN_EPOCH_DAYS - 1 + 365 * (iYear - 1) + Math.floor((iYear - 1) / 4) - Math.floor((iYear - 1) / 100) + Math.floor((iYear - 1) / 400) + Math.floor(739 / 12 + (isGregorianLeapYear(iYear) ? -1 : -2) + 1);
  iLeapAdj = 0;
  if (iJulianDayNoon < tjd) {
    iLeapAdj = 0;
  } else {
    iLeapAdj = isGregorianLeapYear(iYear) ? 1 : 2;
  }
  iMonth = Math.floor(((iDayOfYear + iLeapAdj) * 12 + 373) / 367);
  tjd2 = GREGORIAN_EPOCH_DAYS - 1 + 365 * (iYear - 1) + Math.floor((iYear - 1) / 4) - Math.floor((iYear - 1) / 100) + Math.floor((iYear - 1) / 400);
  iLeapAdj2 = 0;
  if (iMonth > 2) {
    iLeapAdj2 = isGregorianLeapYear(iYear) ? -1 : -2;
  }
  tjd2 += Math.floor((367 * iMonth - 362) / 12 + iLeapAdj2 + 1);
  iDay = iJulianDayNoon - tjd2 + 1;
  return {
    day: iDay,
    month: iMonth - 1,
    year: iYear
  };
}
function toGregorianArguments(aArgs) {
  var aGregorianArgs = Array.prototype.slice.call(aArgs), oIslamic, oGregorian;
  oIslamic = {
    year: aArgs[0],
    month: aArgs[1],
    day: aArgs[2] !== void 0 ? aArgs[2] : 1
  };
  oGregorian = toGregorian(oIslamic);
  aGregorianArgs[0] = oGregorian.year;
  aGregorianArgs[1] = oGregorian.month;
  aGregorianArgs[2] = oGregorian.day;
  return aGregorianArgs;
}
function initCustomizationMap() {
  var sDateFormat, oCustomizationJSON;
  oCustomizationMap = {};
  sDateFormat = Formatting_default.getABAPDateFormat();
  sDateFormat = _isSupportedIslamicCalendarType(sDateFormat) ? sDateFormat : "A";
  oCustomizationJSON = Formatting_default.getCustomIslamicCalendarData();
  oCustomizationJSON = oCustomizationJSON || [];
  if (!oCustomizationJSON.length) {
    Log_default.warning("No calendar customizations.");
    return;
  }
  oCustomizationJSON.forEach(function(oEntry) {
    if (oEntry.dateFormat === sDateFormat) {
      var date = parseDate(oEntry.gregDate);
      var iGregorianDate = new Date(Date.UTC(date.year, date.month - 1, date.day));
      var iMillis = iGregorianDate.getTime();
      var iIslamicMonthStartDays = (iMillis - ISLAMIC_MILLIS) / ONE_DAY;
      date = parseDate(oEntry.islamicMonthStart);
      var iIslamicMonths = (date.year - 1) * 12 + date.month - 1;
      oCustomizationMap[iIslamicMonths] = iIslamicMonthStartDays;
    }
  });
  Log_default.info("Working with date format: [" + sDateFormat + "] and customization: " + JSON.stringify(oCustomizationJSON));
}
function parseDate(sDate) {
  return {
    year: parseInt(sDate.substr(0, 4)),
    month: parseInt(sDate.substr(4, 2)),
    day: parseInt(sDate.substr(6, 2))
  };
}
function getCustomMonthStartDays(months) {
  if (!oCustomizationMap) {
    initCustomizationMap();
  }
  var iIslamicMonthStartDays = oCustomizationMap[months];
  if (!iIslamicMonthStartDays) {
    var year = Math.floor(months / 12) + 1;
    var month = months % 12;
    iIslamicMonthStartDays = monthStart(year, month);
  }
  return iIslamicMonthStartDays;
}
function monthStart(year, month) {
  return Math.ceil(29.5 * month) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30);
}
function mod(a, b) {
  return a - b * Math.floor(a / b);
}
function isGregorianLeapYear(iYear) {
  return !(iYear % 400) || !(iYear % 4) && !!(iYear % 100);
}
function _isSupportedIslamicCalendarType(sCalendarType) {
  return aSupportedIslamicCalendarTypes.indexOf(sCalendarType) !== -1;
}
Islamic.prototype._getIslamic = function() {
  return toIslamic({
    day: this.oDate.getDate(),
    month: this.oDate.getMonth(),
    year: this.oDate.getFullYear()
  });
};
Islamic.prototype._setIslamic = function(oIslamic) {
  var oGregorian = toGregorian(oIslamic);
  return this.oDate.setFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Islamic.prototype._getUTCIslamic = function() {
  return toIslamic({
    day: this.oDate.getUTCDate(),
    month: this.oDate.getUTCMonth(),
    year: this.oDate.getUTCFullYear()
  });
};
Islamic.prototype._setUTCIslamic = function(oIslamic) {
  var oGregorian = toGregorian(oIslamic);
  return this.oDate.setUTCFullYear(oGregorian.year, oGregorian.month, oGregorian.day);
};
Islamic.prototype.getDate = function(iDate) {
  return this._getIslamic().day;
};
Islamic.prototype.getMonth = function() {
  return this._getIslamic().month;
};
Islamic.prototype.getYear = function() {
  return this._getIslamic().year - BASE_YEAR;
};
Islamic.prototype.getFullYear = function() {
  return this._getIslamic().year;
};
Islamic.prototype.setDate = function(iDate) {
  var oIslamic = this._getIslamic();
  oIslamic.day = iDate;
  return this._setIslamic(oIslamic);
};
Islamic.prototype.setMonth = function(iMonth, iDay) {
  var oIslamic = this._getIslamic();
  oIslamic.month = iMonth;
  if (iDay !== void 0) {
    oIslamic.day = iDay;
  }
  return this._setIslamic(oIslamic);
};
Islamic.prototype.setYear = function(iYear) {
  var oIslamic = this._getIslamic();
  oIslamic.year = iYear + BASE_YEAR;
  return this._setIslamic(oIslamic);
};
Islamic.prototype.setFullYear = function(iYear, iMonth, iDay) {
  var oIslamic = this._getIslamic();
  oIslamic.year = iYear;
  if (iMonth !== void 0) {
    oIslamic.month = iMonth;
  }
  if (iDay !== void 0) {
    oIslamic.day = iDay;
  }
  return this._setIslamic(oIslamic);
};
Islamic.prototype.getUTCDate = function(iDate) {
  return this._getUTCIslamic().day;
};
Islamic.prototype.getUTCMonth = function() {
  return this._getUTCIslamic().month;
};
Islamic.prototype.getUTCFullYear = function() {
  return this._getUTCIslamic().year;
};
Islamic.prototype.setUTCDate = function(iDate) {
  var oIslamic = this._getUTCIslamic();
  oIslamic.day = iDate;
  return this._setUTCIslamic(oIslamic);
};
Islamic.prototype.setUTCMonth = function(iMonth, iDay) {
  var oIslamic = this._getUTCIslamic();
  oIslamic.month = iMonth;
  if (iDay !== void 0) {
    oIslamic.day = iDay;
  }
  return this._setUTCIslamic(oIslamic);
};
Islamic.prototype.setUTCFullYear = function(iYear, iMonth, iDay) {
  var oIslamic = this._getUTCIslamic();
  oIslamic.year = iYear;
  if (iMonth !== void 0) {
    oIslamic.month = iMonth;
  }
  if (iDay !== void 0) {
    oIslamic.day = iDay;
  }
  return this._setUTCIslamic(oIslamic);
};
Calendars_default.set(CalendarType_default2.Islamic, Islamic);
/*! Bundled license information:

@ui5/webcomponents-localization/dist/sap/base/Event.js:
  (*!
   * OpenUI5
   * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.
   * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
   *)

@ui5/webcomponents-localization/dist/sap/base/Eventing.js:
  (*!
   * OpenUI5
   * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.
   * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
   *)

@ui5/webcomponents-localization/dist/sap/base/util/isEmptyObject.js:
  (*!
   * OpenUI5
   * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.
   * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
   *)

@ui5/webcomponents-localization/dist/sap/base/i18n/Formatting.js:
  (*!
  * OpenUI5
   * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.
   * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
  *)

@ui5/webcomponents-localization/dist/sap/ui/core/date/Islamic.js:
  (*!
   * OpenUI5
   * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.
   * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
   *)
*/
//# sourceMappingURL=@ui5_webcomponents-localization_dist_features_calendar_Islamic__js.js.map

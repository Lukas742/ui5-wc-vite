import {
  DEFAULT_LANGUAGE,
  DEFAULT_LOCALE,
  attachLanguageChange,
  getFetchDefaultLanguage,
  getLocale_default
} from "./chunk-GBZ2GERS.js";

// node_modules/@ui5/webcomponents-base/dist/locale/normalizeLocale.js
var localeRegEX = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;
var SAPSupportabilityLocales = /(?:^|-)(saptrc|sappsd)(?:-|$)/i;
var M_ISO639_NEW_TO_OLD = {
  "he": "iw",
  "yi": "ji",
  "nb": "no",
  "sr": "sh"
};
var normalizeLocale = (locale) => {
  let m;
  if (!locale) {
    return DEFAULT_LOCALE;
  }
  if (typeof locale === "string" && (m = localeRegEX.exec(locale.replace(/_/g, "-")))) {
    let language = m[1].toLowerCase();
    let region = m[3] ? m[3].toUpperCase() : void 0;
    const script = m[2] ? m[2].toLowerCase() : void 0;
    const variants = m[4] ? m[4].slice(1) : void 0;
    const isPrivate = m[6];
    language = M_ISO639_NEW_TO_OLD[language] || language;
    if (isPrivate && (m = SAPSupportabilityLocales.exec(isPrivate)) || variants && (m = SAPSupportabilityLocales.exec(variants))) {
      return `en_US_${m[1].toLowerCase()}`;
    }
    if (language === "zh" && !region) {
      if (script === "hans") {
        region = "CN";
      } else if (script === "hant") {
        region = "TW";
      }
    }
    return language + (region ? "_" + region + (variants ? "_" + variants.replace("-", "_") : "") : "");
  }
  return DEFAULT_LOCALE;
};
var normalizeLocale_default = normalizeLocale;

// node_modules/@ui5/webcomponents-base/dist/locale/nextFallbackLocale.js
var nextFallbackLocale = (locale) => {
  if (!locale) {
    return DEFAULT_LOCALE;
  }
  if (locale === "zh_HK") {
    return "zh_TW";
  }
  const p = locale.lastIndexOf("_");
  if (p >= 0) {
    return locale.slice(0, p);
  }
  return locale !== DEFAULT_LOCALE ? DEFAULT_LOCALE : "";
};
var nextFallbackLocale_default = nextFallbackLocale;

// node_modules/@ui5/webcomponents-base/dist/asset-registries/i18n.js
var warningShown = /* @__PURE__ */ new Set();
var reportedErrors = /* @__PURE__ */ new Set();
var bundleData = /* @__PURE__ */ new Map();
var bundlePromises = /* @__PURE__ */ new Map();
var loaders = /* @__PURE__ */ new Map();
var registerI18nLoader = (packageName, localeId, loader) => {
  const bundleKey = `${packageName}/${localeId}`;
  loaders.set(bundleKey, loader);
};
var _setI18nBundleData = (packageName, data) => {
  bundleData.set(packageName, data);
};
var getI18nBundleData = (packageName) => {
  return bundleData.get(packageName);
};
var _hasLoader = (packageName, localeId) => {
  const bundleKey = `${packageName}/${localeId}`;
  return loaders.has(bundleKey);
};
var _loadMessageBundleOnce = (packageName, localeId) => {
  const bundleKey = `${packageName}/${localeId}`;
  const loadMessageBundle = loaders.get(bundleKey);
  if (loadMessageBundle && !bundlePromises.get(bundleKey)) {
    bundlePromises.set(bundleKey, loadMessageBundle(localeId));
  }
  return bundlePromises.get(bundleKey);
};
var _showAssetsWarningOnce = (packageName) => {
  if (!warningShown.has(packageName)) {
    console.warn(
      `[${packageName}]: Message bundle assets are not configured. Falling back to English texts.`,
      /* eslint-disable-line */
      ` Add \`import "${packageName}/dist/Assets.js"\` in your bundle and make sure your build tool supports dynamic imports and JSON imports. See section "Assets" in the documentation for more information.`
    );
    warningShown.add(packageName);
  }
};
var useFallbackBundle = (packageName, localeId) => {
  return localeId !== DEFAULT_LANGUAGE && !_hasLoader(packageName, localeId);
};
var fetchI18nBundle = async (packageName) => {
  const language = getLocale_default().getLanguage();
  const region = getLocale_default().getRegion();
  const variant = getLocale_default().getVariant();
  let localeId = language + (region ? `-${region}` : ``) + (variant ? `-${variant}` : ``);
  if (useFallbackBundle(packageName, localeId)) {
    localeId = normalizeLocale_default(localeId);
    while (useFallbackBundle(packageName, localeId)) {
      localeId = nextFallbackLocale_default(localeId);
    }
  }
  const fetchDefaultLanguage = getFetchDefaultLanguage();
  if (localeId === DEFAULT_LANGUAGE && !fetchDefaultLanguage) {
    _setI18nBundleData(packageName, null);
    return;
  }
  if (!_hasLoader(packageName, localeId)) {
    _showAssetsWarningOnce(packageName);
    return;
  }
  try {
    const data = await _loadMessageBundleOnce(packageName, localeId);
    _setI18nBundleData(packageName, data);
  } catch (error) {
    const e = error;
    if (!reportedErrors.has(e.message)) {
      reportedErrors.add(e.message);
      console.error(e.message);
    }
  }
};
attachLanguageChange((lang) => {
  const allPackages = [...bundleData.keys()];
  return Promise.all(allPackages.map(fetchI18nBundle));
});

export {
  registerI18nLoader,
  getI18nBundleData,
  fetchI18nBundle
};
//# sourceMappingURL=chunk-ORF6YVUE.js.map

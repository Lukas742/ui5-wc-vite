{
  "version": 3,
  "sources": ["../../@ui5/webcomponents-base/src/types/CalendarType.ts", "../../@ui5/webcomponents-base/src/config/CalendarType.ts", "../../@ui5/webcomponents-localization/dist/sap/base/Log.js", "../../@ui5/webcomponents-localization/src/sap/base/util/ObjectPath.ts", "../../@ui5/webcomponents-localization/dist/sap/base/assert.js", "../../@ui5/webcomponents-localization/dist/sap/base/util/isPlainObject.js", "../../@ui5/webcomponents-localization/dist/sap/base/util/resolveReference.js", "../../@ui5/webcomponents-localization/dist/sap/ui/base/DataType.js", "../../@ui5/webcomponents-localization/dist/sap/base/i18n/date/CalendarType.js", "../../@ui5/webcomponents-localization/dist/sap/ui/core/CalendarType.js", "../../@ui5/webcomponents-localization/dist/sap/ui/core/date/_Calendars.js", "../../@ui5/webcomponents-base/src/features/LegacyDateFormats.ts", "../../@ui5/webcomponents-base/src/config/FormatSettings.ts", "../../@ui5/webcomponents-localization/src/sap/ui/core/FormatSettings.ts", "../../@ui5/webcomponents-base/src/config/Timezone.ts", "../../@ui5/webcomponents-base/src/util/getDesigntimePropertyAsArray.ts", "../../@ui5/webcomponents-localization/dist/sap/base/i18n/date/TimezoneUtils.js", "../../@ui5/webcomponents-localization/dist/sap/ui/core/format/TimezoneUtil.js", "../../@ui5/webcomponents-localization/src/sap/ui/core/Configuration.ts", "../../@ui5/webcomponents-localization/src/sap/ui/core/Core.ts", "../../@ui5/webcomponents-localization/dist/sap/base/util/array/uniqueSort.js", "../../@ui5/webcomponents-localization/dist/sap/ui/base/Metadata.js", "../../@ui5/webcomponents-localization/dist/sap/ui/base/Object.js", "../../@ui5/webcomponents-localization/src/sap/base/i18n/Localization.ts", "../../@ui5/webcomponents-localization/dist/sap/base/i18n/LanguageTag.js", "../../@ui5/webcomponents-localization/dist/sap/ui/core/Locale.js", "../../@ui5/webcomponents-localization/dist/sap/base/util/_merge.js", "../../@ui5/webcomponents-localization/dist/sap/base/util/extend.js", "../../@ui5/webcomponents-localization/src/sap/base/util/LoaderExtensions.ts", "../../@ui5/webcomponents-localization/dist/sap/base/i18n/date/CalendarWeekNumbering.js", "../../@ui5/webcomponents-localization/dist/sap/ui/core/date/CalendarWeekNumbering.js", "../../@ui5/webcomponents-localization/dist/sap/ui/core/LocaleData.js", "../../@ui5/webcomponents-localization/dist/sap/ui/core/date/CalendarUtils.js", "../../@ui5/webcomponents-localization/dist/sap/ui/core/date/UI5Date.js", "../../@ui5/webcomponents-localization/dist/sap/ui/core/date/UniversalDate.js"],
  "sourcesContent": ["/**\n * Different calendar types.\n *\n * @public\n */\nenum CalendarType {\n\t/**\n\t * @public\n\t */\n\tGregorian = \"Gregorian\",\n\t/**\n\t * @public\n\t */\n\tIslamic = \"Islamic\",\n\t/**\n\t * @public\n\t */\n\tJapanese = \"Japanese\",\n\t/**\n\t * @public\n\t */\n\tBuddhist = \"Buddhist\",\n\t/**\n\t * @public\n\t */\n\tPersian = \"Persian\",\n}\n\nexport default CalendarType;\n", "import CalendarType from \"../types/CalendarType.js\";\nimport {\n\tgetCalendarType as getConfiguredCalendarType,\n\tgetSecondaryCalendarType as getConfiguredSecondaryCalendarType,\n} from \"../InitialConfiguration.js\";\n\nlet calendarType: CalendarType | undefined;\nlet secondaryCalendarType: CalendarType | undefined;\n\n/**\n * Returns the configured or default calendar type.\n * @public\n * @returns { CalendarType } the effective calendar type\n */\nconst getCalendarType = (): CalendarType => {\n\tif (calendarType === undefined) {\n\t\tcalendarType = getConfiguredCalendarType();\n\t}\n\n\tif (calendarType && calendarType in CalendarType) {\n\t\treturn calendarType;\n\t}\n\n\treturn CalendarType.Gregorian;\n};\n\n/**\n * Returns the configured secondary calendar type.\n * @public\n * @returns { CalendarType | undefined } the effective calendar type\n * @since 1.18.0\n */\nconst getSecondaryCalendarType = (): CalendarType | undefined => {\n\tif (secondaryCalendarType === undefined) {\n\t\tsecondaryCalendarType = getConfiguredSecondaryCalendarType();\n\t}\n\n\tif (secondaryCalendarType && secondaryCalendarType in CalendarType) {\n\t\treturn secondaryCalendarType;\n\t}\n\n\treturn secondaryCalendarType;\n};\n\nexport {\n\tgetCalendarType,\n\tgetSecondaryCalendarType,\n};\n", "const Log = console;\nLog.warning = console.warn;\nexport default Log;", "// ObjectPath is accessing window which breaks SSR, hence the overlay\n\nconst ObjectPath = {\n\tset() {},\n};\n\nexport default ObjectPath;\n", "// TODO-evo:assert on node throws an error if the assertion is violated\n\n/**\n * A simple assertion mechanism that logs a message when a given condition is not met.\n *\n * <b>Note:</b> Calls to this method might be removed when the JavaScript code\n *              is optimized during build. Therefore, callers should not rely on any side effects\n *              of this method.\n *\n * @function\n * @since 1.58\n * @alias module:sap/base/assert\n * @param {boolean} bResult Result of the checked assertion\n * @param {string|function():any} vMessage Message that will be logged when the result is <code>false</code>.\n * In case this is a function, the return value of the function will be displayed. This can be used to execute\n * complex code only if the assertion fails.\n * @public\n * @SecSink {1|SECRET} Could expose secret data in logs\n *\n */ /*!\n     * OpenUI5\n     * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n     * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n     */\n\nvar fnAssert = function (bResult, vMessage) {\n  if (!bResult) {\n    var sMessage = typeof vMessage === \"function\" ? vMessage() : vMessage;\n    /*eslint-disable no-console */\n    console.assert(bResult, sMessage);\n    /*eslint-enable no-console */\n  }\n};\nexport default fnAssert;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n\nvar class2type = {};\nvar hasOwn = class2type.hasOwnProperty;\nvar toString = class2type.toString;\nvar fnToString = hasOwn.toString;\nvar ObjectFunctionString = fnToString.call(Object);\n\n/**\n * Checks whether the object is a plain object (created using \"{}\" or \"new Object\").\n *\n * @function\n * @since 1.58\n * @public\n * @alias module:sap/base/util/isPlainObject\n * @param {Object} obj the object which is checked\n * @returns {boolean} whether or not the object is a plain object (created using \"{}\" or \"new Object\").\n */\nvar fnIsPlainObject = function (obj) {\n  /*\n   * The code in this function is taken from jQuery 3.6.0 \"jQuery.isPlainObject\" and got modified.\n   *\n   * jQuery JavaScript Library v3.6.0\n   * http://jquery.com/\n   *\n   * Copyright OpenJS Foundation and other contributors\n   * Released under the MIT license\n   * http://jquery.org/license\n   */\n  var proto, Ctor;\n\n  // Detect obvious negatives\n  // Use toString instead of jQuery.type to catch host objects\n  if (!obj || toString.call(obj) !== \"[object Object]\") {\n    return false;\n  }\n  proto = Object.getPrototypeOf(obj);\n\n  // Objects with no prototype (e.g., `Object.create( null )`) are plain\n  if (!proto) {\n    return true;\n  }\n\n  // Objects with a prototype are considered plain only if they were constructed by a global Object function\n  Ctor = hasOwn.call(proto, \"constructor\") && proto.constructor;\n  return typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\n};\nexport default fnIsPlainObject;", "export default (function () {\n  throw new Error(\"not implemented\");\n});", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n/* global Set */\n// Provides class sap.ui.base.DataType\nimport ObjectPath from \"../../base/util/ObjectPath.js\";\nimport assert from \"../../base/assert.js\";\nimport Log from \"../../base/Log.js\";\nimport isPlainObject from \"../../base/util/isPlainObject.js\";\nimport resolveReference from \"../../base/util/resolveReference.js\";\n/**\n * Pseudo-Constructor for class <code>DataType</code>, never to be used.\n *\n * @class Represents the type of properties in a <code>ManagedObject</code> class.\n *\n * Each type provides some metadata like its {@link #getName qualified name} or its\n * {@link #getBaseType base type} in case of a derived type. Array types provide information\n * about the allowed {@link #getComponentType type of components} in an array, enumeration types\n * inform about the set of their allowed {@link #getEnumValues keys and values}.\n *\n * Each type has a method to {@link #isValid check whether a value is valid} for a property\n * of that type.\n *\n * Already defined types can be looked up by calling {@link #.getType DataType.getType}, new\n * types can only be created by calling the factory method {@link #.createType DataType.createType},\n * calling the constructor will throw an error.\n *\n * @author SAP SE\n * @since 0.9.0\n * @alias sap.ui.base.DataType\n * @public\n * @hideconstructor\n * @throws {Error} Constructor must not be called, use {@link #.createType DataType.createType} instead\n */\nvar DataType = function () {\n  // Avoid construction of a DataType.\n  // DataType is only a function to support the \"instanceof\" operator.\n  throw new Error();\n};\n\n/**\n * The qualified name of the data type.\n *\n * @returns {string} Name of the data type\n * @public\n */\nDataType.prototype.getName = function () {\n  return undefined;\n};\n\n/**\n * The base type of this type or undefined if this is a primitive type.\n * @returns {sap.ui.base.DataType|undefined} Base type or <code>undefined</code>\n * @public\n */\nDataType.prototype.getBaseType = function () {\n  return undefined;\n};\n\n/**\n * Returns the most basic (primitive) type that this type has been derived from.\n *\n * If the type is a primitive type by itself, <code>this</code> is returned.\n *\n * @returns {sap.ui.base.DataType} Primitive type of this type\n * @public\n */\nDataType.prototype.getPrimitiveType = function () {\n  /*eslint-disable consistent-this*/\n  var oType = this;\n  /*eslint-enable consistent-this*/\n  while (oType.getBaseType()) {\n    oType = oType.getBaseType();\n  }\n  return oType;\n};\n\n/**\n * Returns the component type of this type or <code>undefined</code> if this is not an array type.\n *\n * @returns {sap.ui.base.DataType|undefined} Component type or <code>undefined</code>\n * @public\n */\nDataType.prototype.getComponentType = function () {\n  return undefined;\n};\n\n/**\n * The default value for this type. Each type must define a default value.\n * @returns {any} Default value of the data type. The type of the returned value\n *    must match the JavaScript type of the data type (a string for string types etc.)\n * @public\n */\nDataType.prototype.getDefaultValue = function () {\n  return undefined;\n};\n\n/**\n * Whether this type is an array type.\n * @returns {boolean} Whether this type is an array type\n * @public\n */\nDataType.prototype.isArrayType = function () {\n  return false;\n};\n\n/**\n * Whether this type is an enumeration type.\n * @returns {boolean} Whether this type is an enum type\n * @public\n */\nDataType.prototype.isEnumType = function () {\n  return false;\n};\n\n/**\n * Returns the object with keys and values from which this enum type was created\n * or <code>undefined</code> if this is not an enum type.\n *\n * @returns {Object<string,string>|undefined} Object with enum keys and values or <code>undefined</code>\n * @public\n */\nDataType.prototype.getEnumValues = function () {\n  return undefined;\n};\n\n/**\n * Parses the given string value and converts it into the specific data type.\n * @param {string} sValue String representation for a value of this type\n * @returns {any} Value in the correct internal format\n * @public\n */\nDataType.prototype.parseValue = function (sValue) {\n  return sValue;\n};\n\n/**\n * Checks whether the given value is valid for this type.\n *\n * To be implemented by concrete types.\n * @param {any} vValue Value to be checked\n * @returns {boolean} Whether the given value is valid for this data type (without conversion)\n * @public\n * @function\n */\nDataType.prototype.isValid = undefined;\n// Note that <code>isValid</code> must be assigned a falsy value here as it otherwise\n// would be called in addition to any <code>isValid</code> implementation in subtypes.\n// See <code>createType</code> for details.\n\n/**\n * Set or unset a normalizer function to be used for values of this data type.\n *\n * When a normalizer function has been set, it will be applied to values of this type\n * whenever {@link #normalize} is called. <code>ManagedObject.prototype.setProperty</code>\n * calls the <code>normalize</code> method before setting a new value to a property\n * (normalization is applied on-write, not on-read).\n *\n * The <code>fnNormalize</code> function has the signature\n * <pre>\n *   fnNormalize(value:any) : any\n * </pre>\n * It will be called with a value for this type and should return a normalized\n * value (which also must be valid for the this type). There's no mean to reject a value.\n * The <code>this</code> context of the function will be this type.\n *\n * This method allows applications or application frameworks to plug-in a generic value\n * normalization for a type, e.g. to convert all URLs in some app-specific way before\n * they are applied to controls. It is not intended to break-out of the value range\n * defined by a type.\n *\n * @param {function(any):any} fnNormalizer Function to apply for normalizing\n * @public\n */\nDataType.prototype.setNormalizer = function (fnNormalizer) {\n  assert(typeof fnNormalizer === \"function\", \"DataType.setNormalizer: fnNormalizer must be a function\");\n  this._fnNormalizer = typeof fnNormalizer === \"function\" ? fnNormalizer : undefined;\n};\n\n/**\n * Normalizes the given value using the specified normalizer for this data type.\n *\n * If no normalizer has been set, the original value is returned.\n *\n * @param {any} oValue Value to be normalized\n * @returns {any} Normalized value\n * @public\n */\nDataType.prototype.normalize = function (oValue) {\n  return this._fnNormalizer ? this._fnNormalizer(oValue) : oValue;\n};\nfunction createType(sName, mSettings, oBase) {\n  mSettings = mSettings || {};\n\n  // create a new type object with the base type as prototype\n  var oBaseObject = oBase || DataType.prototype;\n  var oType = Object.create(oBaseObject);\n\n  // getter for the name\n  oType.getName = function () {\n    return sName;\n  };\n\n  // if a default value is specified, create a getter for it\n  if (mSettings.hasOwnProperty(\"defaultValue\")) {\n    var vDefault = mSettings.defaultValue;\n    oType.getDefaultValue = function () {\n      return vDefault;\n    };\n  }\n\n  // if a validator is specified either chain it with the base type validator\n  // or set it if no base validator exists\n  if (mSettings.isValid) {\n    var fnIsValid = mSettings.isValid;\n    oType.isValid = oBaseObject.isValid ? function (vValue) {\n      if (!oBaseObject.isValid(vValue)) {\n        return false;\n      }\n      return fnIsValid(vValue);\n    } : fnIsValid;\n  }\n  if (mSettings.parseValue) {\n    oType.parseValue = mSettings.parseValue;\n  }\n\n  // return the base type\n  oType.getBaseType = function () {\n    return oBase;\n  };\n  return oType;\n}\nvar mTypes = {\n  \"any\": createType(\"any\", {\n    defaultValue: null,\n    isValid: function (vValue) {\n      return true;\n    }\n  }),\n  \"boolean\": createType(\"boolean\", {\n    defaultValue: false,\n    isValid: function (vValue) {\n      return typeof vValue === \"boolean\";\n    },\n    parseValue: function (sValue) {\n      return sValue == \"true\";\n    }\n  }),\n  \"int\": createType(\"int\", {\n    defaultValue: 0,\n    isValid: function (vValue) {\n      return typeof vValue === \"number\" && (isNaN(vValue) || Math.floor(vValue) == vValue);\n    },\n    parseValue: function (sValue) {\n      return parseInt(sValue);\n    }\n  }),\n  \"float\": createType(\"float\", {\n    defaultValue: 0.0,\n    isValid: function (vValue) {\n      return typeof vValue === \"number\";\n    },\n    parseValue: function (sValue) {\n      return parseFloat(sValue);\n    }\n  }),\n  \"string\": createType(\"string\", {\n    defaultValue: \"\",\n    isValid: function (vValue) {\n      return typeof vValue === \"string\" || vValue instanceof String;\n    },\n    parseValue: function (sValue) {\n      return sValue;\n    }\n  }),\n  \"object\": createType(\"object\", {\n    defaultValue: null,\n    isValid: function (vValue) {\n      return typeof vValue === \"object\" || typeof vValue === \"function\";\n    },\n    parseValue: function (sValue) {\n      return sValue ? JSON.parse(sValue) : null;\n    }\n  }),\n  \"function\": createType(\"function\", {\n    defaultValue: null,\n    isValid: function (vValue) {\n      return vValue == null || typeof vValue === 'function';\n    },\n    /*\n     * Note: the second parameter <code>_oOptions</code> is a hidden feature for internal use only.\n     * Its structure is subject to change. No code other than the XMLTemplateProcessor must use it.\n     */\n    parseValue: function (sValue, _oOptions) {\n      if (sValue === \"\") {\n        return undefined;\n      }\n      if (!/^\\.?[A-Z_\\$][A-Z0-9_\\$]*(\\.[A-Z_\\$][A-Z0-9_\\$]*)*$/i.test(sValue)) {\n        throw new Error(\"Function references must consist of dot separated \" + \"simple identifiers (A-Z, 0-9, _ or $) only, but was '\" + sValue + \"'\");\n      }\n      var fnResult,\n        oContext = _oOptions && _oOptions.context,\n        oLocals = _oOptions && _oOptions.locals;\n      fnResult = resolveReference(sValue, Object.assign({\n        \".\": oContext\n      }, oLocals));\n      if (fnResult && this.isValid(fnResult)) {\n        return fnResult;\n      }\n      throw new TypeError(\"The string '\" + sValue + \"' couldn't be resolved to a function\");\n    }\n  })\n};\n\n// The generic \"array\" type must not be exposed by DataType.getType to avoid direct usage\n// as type of a managed property. It is therefore not stored in the mTypes map\nvar arrayType = createType(\"array\", {\n  defaultValue: []\n});\nfunction createArrayType(componentType) {\n  assert(componentType instanceof DataType, \"DataType.<createArrayType>: componentType must be a DataType\");\n\n  // create a new type object with the base type as prototype\n  var oType = Object.create(DataType.prototype);\n\n  // getter for the name\n  oType.getName = function () {\n    return componentType.getName() + \"[]\";\n  };\n\n  // getter for component type\n  oType.getComponentType = function () {\n    return componentType;\n  };\n\n  // array validator\n  oType.isValid = function (aValues) {\n    if (aValues === null) {\n      return true;\n    }\n    if (Array.isArray(aValues)) {\n      for (var i = 0; i < aValues.length; i++) {\n        if (!componentType.isValid(aValues[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n\n  // array parser\n  oType.parseValue = function (sValue) {\n    var aValues = sValue.split(\",\");\n    for (var i = 0; i < aValues.length; i++) {\n      aValues[i] = componentType.parseValue(aValues[i]);\n    }\n    return aValues;\n  };\n\n  // is an array type\n  oType.isArrayType = function () {\n    return true;\n  };\n\n  // return the base type\n  oType.getBaseType = function () {\n    return arrayType;\n  };\n  return oType;\n}\nconst mEnumRegistry = Object.create(null);\nfunction createEnumType(sTypeName, oEnum) {\n  var mValues = {},\n    sDefaultValue;\n  for (var sName in oEnum) {\n    var sValue = oEnum[sName];\n    // the first entry will become the default value\n    if (!sDefaultValue) {\n      sDefaultValue = sValue;\n    }\n    if (typeof sValue !== \"string\") {\n      throw new Error(\"Value \" + sValue + \" for enum type \" + sTypeName + \" is not a string\");\n    }\n    // if there are multiple entries with the same value, the one where name\n    // and value are matching is taken\n    if (!mValues.hasOwnProperty(sValue) || sName == sValue) {\n      mValues[sValue] = sName;\n    }\n  }\n  var oType = Object.create(DataType.prototype);\n\n  // getter for the name\n  oType.getName = function () {\n    return sTypeName;\n  };\n\n  // enum validator\n  oType.isValid = function (v) {\n    return typeof v === \"string\" && mValues.hasOwnProperty(v);\n  };\n\n  // enum parser\n  oType.parseValue = function (sValue) {\n    return oEnum[sValue];\n  };\n\n  // default value\n  oType.getDefaultValue = function () {\n    return sDefaultValue;\n  };\n\n  // return the base type\n  oType.getBaseType = function () {\n    return mTypes.string;\n  };\n\n  // is an enum type\n  oType.isEnumType = function () {\n    return true;\n  };\n\n  // enum values are best represented by the existing global object\n  oType.getEnumValues = function () {\n    return oEnum;\n  };\n  return oType;\n}\n\n/**\n * Looks up the type with the given name and returns it.\n *\n * See {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Defining Control Properties} for\n * a list of the built-in primitive types and their semantics.\n *\n * The lookup consists of the following steps:\n * <ul>\n * <li>When a type with the given name is already known, it will be returned</li>\n * <li>When the name ends with a pair of brackets (<code>[]</code>), a type with the name\n *     in front of the brackets (<code>name.slice(0,-2)</code>) will be looked up and an\n *     array type will be created with the looked-up type as its component type. If the\n *     component type is <code>undefined</code>, <code>undefined</code> will be returned</li>\n * <li>When a global property exists with the same name as the type and when the value of that\n *     property is an instance of <code>DataType</code>, that instance will be returned</li>\n * <li>When a global property exists with the same name as the type and when the value of that\n *     property is a plain object (its prototype is <code>Object</code>), then an enum type will\n *     be created, based on the keys and values in that object. The <code>parseValue</code> method\n *     of the type will accept any of the keys in the plain object and convert them to the\n *     corresponding value; <code>isValid</code> will accept any of the values from the plain\n *     object's keys. The <code>defaultValue</code> will be the value of the first key found in\n *     the plain object</li>\n * <li>When a global property exist with any other, non-falsy value, a warning is logged and the\n *     primitive type 'any' is returned</li>\n * <li>If no such global property exist, an error is logged and <code>undefined</code>\n *     is returned</li>\n * </ul>\n *\n * <b<Note:</b> UI Libraries and even components can introduce additional types. This method\n * only checks for types that either have been defined already, or that describe arrays of\n * values of an already defined type or types whose name matches the global name of a plain\n * object (containing enum keys and values). This method doesn't try to load modules that\n * might contain type definitions. So before being able to lookup and use a specific type,\n * the module containing its definition has to be loaded. For that reason it is suggested that\n * controls (or <code>ManagedObject</code> classes in general) declare a dependency to all\n * modules (typically <code>some/lib/library.js</code> modules) that contain the type definitions\n * needed by the specific control or class definition.\n *\n * @param {string} sTypeName Qualified name of the type to retrieve\n * @returns {sap.ui.base.DataType|undefined} Type object or <code>undefined</code> when\n *     no such type has been defined yet\n * @public\n */\nDataType.getType = function (sTypeName) {\n  assert(sTypeName && typeof sTypeName === 'string', \"sTypeName must be a non-empty string\");\n  var oType = mTypes[sTypeName];\n  if (!(oType instanceof DataType)) {\n    // check for array types\n    if (sTypeName.indexOf(\"[]\", sTypeName.length - 2) > 0) {\n      var sComponentTypeName = sTypeName.slice(0, -2),\n        oComponentType = this.getType(sComponentTypeName);\n      oType = oComponentType && createArrayType(oComponentType);\n      if (oType) {\n        mTypes[sTypeName] = oType;\n      }\n    } else if (sTypeName !== 'array') {\n      // check if we have a valid pre-registered enum\n      oType = mEnumRegistry[sTypeName];\n\n      /**\n       * If an enum was not registered beforehand (either explicitly via registerEnum or\n       * via a Proxy in the library namespace), we have to look it up in the global object.\n       * @deprecated since 1.120\n       */\n      if (oType == null) {\n        oType = ObjectPath.get(sTypeName);\n        if (oType != null) {\n          Log.error(`The type '${sTypeName}' was accessed via globals. Defining enums via globals is deprecated. Please require the module 'sap/ui/base/DataType' and call the static 'DataType.registerEnum' API.`);\n        }\n      }\n      if (oType instanceof DataType) {\n        mTypes[sTypeName] = oType;\n      } else if (isPlainObject(oType)) {\n        oType = mTypes[sTypeName] = createEnumType(sTypeName, oType);\n        delete mEnumRegistry[sTypeName];\n      } else if (oType) {\n        Log.warning(\"[FUTURE FATAL] '\" + sTypeName + \"' is not a valid data type. Falling back to type 'any'.\");\n        oType = mTypes.any;\n      } else {\n        Log.error(\"[FUTURE FATAL] data type '\" + sTypeName + \"' could not be found.\");\n        oType = undefined;\n      }\n    }\n  }\n  return oType;\n};\n\n/**\n * Derives a new type from a given base type.\n *\n * Example:<br>\n * <pre>\n *\n *   var fooType = DataType.createType('foo', {\n *       isValid : function(vValue) {\n *           return /^(foo(bar)?)$/.test(vValue);\n *       }\n *   }, DataType.getType('string'));\n *\n *   fooType.isValid('foo'); // true\n *   fooType.isValid('foobar'); // true\n *   fooType.isValid('==foobar=='); // false\n *\n * </pre>\n *\n * If <code>mSettings</code> contains an implementation for <code>isValid</code>,\n * then the validity check of the newly created type will first execute the check of the\n * base type and then call the given <code>isValid</code> function.\n *\n * Array types and enumeration types cannot be created with this method. They're created\n * on-the-fly by {@link #.getType DataType.getType} when such a type is looked up.\n *\n * <b>Note:</b> The creation of new primitive types is not supported. When a type is created\n * without a base type, it is automatically derived from the primitive type <code>any</code>.\n *\n * <b>Note:</b> If a type has to be used in classes, then the implementation of\n * <code>isValid</code> must exactly have the structure shown in the example above (single\n * return statement, regular expression literal of the form <code>/^(...)$/</code>, calling\n * <code>/regex/.test()</code> on the given value).\n * Only the inner part of the regular expression literal can be different.\n *\n * @param {string} sName Unique qualified name of the new type\n * @param {object} [mSettings] Settings for the new type\n * @param {any} [mSettings.defaultValue] Default value for the type (inherited if not given)\n * @param {function} [mSettings.isValid] Additional validity check function for values of the\n *                       type (inherited if not given)\n * @param {function} [mSettings.parseValue] Parse function that converts a locale independent\n *                       string into a value of the type (inherited if not given)\n * @param {sap.ui.base.DataType|string} [vBase='any'] Base type for the new type\n * @returns {sap.ui.base.DataType} The newly created type object\n * @public\n */\nDataType.createType = function (sName, mSettings, vBase) {\n  assert(typeof sName === \"string\" && sName, \"DataType.createType: type name must be a non-empty string\");\n  assert(vBase == null || vBase instanceof DataType || typeof vBase === \"string\" && vBase, \"DataType.createType: base type must be empty or a DataType or a non-empty string\");\n  if (/[\\[\\]]/.test(sName)) {\n    Log.error(\"[FUTURE FATAL] DataType.createType: array types ('something[]') must not be created with createType, \" + \"they're created on-the-fly by DataType.getType\");\n  }\n  if (typeof vBase === \"string\") {\n    vBase = DataType.getType(vBase);\n  }\n  vBase = vBase || mTypes.any;\n  if (vBase.isArrayType() || vBase.isEnumType()) {\n    Log.error(\"[FUTURE FATAL] DataType.createType: base type must not be an array- or enum-type\");\n  }\n  if (sName === 'array' || mTypes[sName] instanceof DataType) {\n    if (sName === 'array' || mTypes[sName].getBaseType() == null) {\n      throw new Error(\"DataType.createType: primitive or hidden type \" + sName + \" can't be re-defined\");\n    }\n    Log.warning(\"[FUTURE FATAL] DataTypes.createType: type \" + sName + \" is redefined. \" + \"This is an unsupported usage of DataType and might cause issues.\");\n  }\n  var oType = mTypes[sName] = createType(sName, mSettings, vBase);\n  return oType;\n};\n\n// ---- minimal support for interface types -------------------------------------------------------------------\n\nvar oInterfaces = new Set();\n\n/**\n * Registers the given array of type names as known interface types.\n * Only purpose is to enable the {@link #isInterfaceType} check.\n * @param {string[]} aTypes interface types to be registered\n * @private\n * @ui5-restricted sap.ui.core.Core\n */\nDataType.registerInterfaceTypes = function (aTypes) {\n  aTypes.forEach(function (sType) {\n    oInterfaces.add(sType);\n\n    // Defining the interface on global namespace for compatibility reasons.\n    // This has never been a public feature and it is strongly discouraged it be relied upon.\n    // An interface must always be referenced by a string literal, not via the global namespace.\n    ObjectPath.set(sType, sType);\n  });\n};\n\n/**\n * Registers an enum under the given name.\n * With version 2.0, registering an enum becomes mandatory when said enum is to be used in\n * properties of a {@link sap.ui.base.ManagedObject ManagedObject} subclass.\n *\n * Example:<br>\n * <pre>\n *    DataType.registerEnum(\"my.enums.Sample\", {\n *       \"A\": \"A\",\n *       \"B\": \"B\",\n *       ...\n *    });\n * </pre>\n *\n * @param {string} sTypeName the type name in dot syntax, e.g. sap.ui.my.EnumType\n * @param {object} mContent the enum content\n * @public\n * @since 1.120.0\n */\nDataType.registerEnum = function (sTypeName, mContent) {\n  mEnumRegistry[sTypeName] = mContent;\n};\n\n/**\n * Checks if the given object contains only static content\n * and can be regarded as an enum candidate.\n *\n * @param {object} oObject the enum candidate\n * @returns {boolean} whether the given object can be regarded as an enum candidate\n * @private\n * @ui5-restricted sap.ui.core.Lib\n */\nDataType._isEnumCandidate = function (oObject) {\n  return !Object.keys(oObject).some(key => {\n    const propertyType = typeof oObject[key];\n    return propertyType === \"object\" || propertyType === \"function\";\n  });\n};\n\n/**\n * @param {string} sType name of type to check\n * @returns {boolean} whether the given type is known to be an interface type\n * @private\n * @ui5-restricted sap.ui.base.ManagedObject\n */\nDataType.isInterfaceType = function (sType) {\n  return oInterfaces.has(sType);\n};\nexport default DataType;", "/**\n * The types of <code>Calendar</code>.\n *\n * @enum {string}\n * @alias module:sap/base/i18n/date/CalendarType\n * @public\n * @since 1.120\n */ /*!\n     * OpenUI5\n     * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n     * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n     */\n\n// Provides type module:sap/base/i18n/date/CalendarType.\n\nvar CalendarType = {\n  /**\n   * The Gregorian calendar\n   * @public\n   */\n  Gregorian: \"Gregorian\",\n  /**\n   * The Islamic calendar\n   * @public\n   */\n  Islamic: \"Islamic\",\n  /**\n   * The Japanese emperor calendar\n   * @public\n   */\n  Japanese: \"Japanese\",\n  /**\n   * The Persian Jalali calendar\n   * @public\n   */\n  Persian: \"Persian\",\n  /**\n   * The Thai buddhist calendar\n   * @public\n   */\n  Buddhist: \"Buddhist\"\n};\nexport default CalendarType;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n// Provides type sap.ui.core.CalendarType.\nimport DataType from \"../base/DataType.js\";\nimport CalendarType from \"../../base/i18n/date/CalendarType.js\";\n/**\n * The types of <code>Calendar</code>.\n *\n * @enum {string}\n * @name sap.ui.core.CalendarType\n * @public\n * @deprecated As of Version 1.120. Please use {@link module:sap/base/18n/date/CalendarType} instead.\n * @borrows module:sap/base/i18n/date/CalendarType.Gregorian as Gregorian\n * @borrows module:sap/base/i18n/date/CalendarType.Islamic as Islamic\n * @borrows module:sap/base/i18n/date/CalendarType.Japanese as Japanese\n * @borrows module:sap/base/i18n/date/CalendarType.Persian as Persian\n * @borrows module:sap/base/i18n/date/CalendarType.Buddhist as Buddhist\n */\n\nDataType.registerEnum(\"sap.ui.core.CalendarType\", CalendarType);\nexport default CalendarType;", "/*global Map */ /*\n                 * ${copyright}\n                 */\n\nvar mRegistry = new Map();\n\n/**\n * @private\n * @sap-restricted\n */\nvar _Calendars = {\n  get: function (sCalendarType) {\n    if (!mRegistry.has(sCalendarType)) {\n      throw new Error(\"Required calendar type: \" + sCalendarType + \" not loaded.\");\n    }\n    return mRegistry.get(sCalendarType);\n  },\n  set: function (sCalendarType, CalendarClass) {\n    mRegistry.set(sCalendarType, CalendarClass);\n  }\n};\nexport default _Calendars;", "import { getFormatSettings } from \"../InitialConfiguration.js\";\nimport type { FormatSettings } from \"../config/FormatSettings.js\";\nimport { registerFeature } from \"../FeaturesRegistry.js\";\n\n// Allows specifying the customizing data for Islamic calendar support\n// dateFormat - The date format\n// islamicMonthStart - The Islamic date in string format // 14360101\n// gregDate - Corresponding Gregorian date to the Islamic one in string format // 20141024\ntype IslamicToGregorianMapping = {\n\tdateFormat: string,\n\tislamicMonthStart: string,\n\tgregDate: string,\n};\ntype LegacyDateCalendarCustomizing = Array<IslamicToGregorianMapping>;\n\nlet formatSettings: FormatSettings;\n\nclass LegacyDateFormats {\n\t/**\n\t * Returns the currently set customizing data for Islamic calendar support\n\t *\n\t * @return {object[]} Returns an array that contains the customizing data.\n\t * @public\n\t */\n\tstatic getLegacyDateCalendarCustomizing(this: void): LegacyDateCalendarCustomizing {\n\t\tif (formatSettings === undefined) {\n\t\t\tformatSettings = getFormatSettings();\n\t\t}\n\n\t\treturn formatSettings.legacyDateCalendarCustomizing || [];\n\t}\n}\n\nregisterFeature(\"LegacyDateFormats\", LegacyDateFormats);\n\nexport default LegacyDateFormats;\nexport type {\n\tFormatSettings,\n\tLegacyDateCalendarCustomizing,\n};\n", "import LegacyDateFormats from \"../features/LegacyDateFormats.js\";\nimport type { LegacyDateCalendarCustomizing } from \"../features/LegacyDateFormats.js\";\nimport { getFormatSettings } from \"../InitialConfiguration.js\";\nimport { getFeature } from \"../FeaturesRegistry.js\";\n\ntype FormatSettings = {\n\tfirstDayOfWeek?: number,\n\tlegacyDateCalendarCustomizing?: LegacyDateCalendarCustomizing,\n};\n\nlet formatSettings: FormatSettings;\n\n/**\n * Returns the first day of the week from the configured format settings or based on the current locale.\n * @public\n * @returns {Number} 0 (Sunday) through 6 (Saturday)\n */\nconst getFirstDayOfWeek = (): number | undefined => {\n\tif (formatSettings === undefined) {\n\t\tformatSettings = getFormatSettings();\n\t}\n\n\treturn formatSettings.firstDayOfWeek;\n};\n\nconst legacyDateFormats = getFeature<typeof LegacyDateFormats>(\"LegacyDateFormats\");\n\nconst getLegacyDateCalendarCustomizing = legacyDateFormats ? LegacyDateFormats.getLegacyDateCalendarCustomizing : () => { return []; };\n\nexport {\n\tgetFirstDayOfWeek,\n\tgetLegacyDateCalendarCustomizing,\n};\n\nexport type { FormatSettings };\n", "import getLocale from \"@ui5/webcomponents-base/dist/locale/getLocale.js\";\nimport { getLegacyDateCalendarCustomizing } from \"@ui5/webcomponents-base/dist/config/FormatSettings.js\";\n\nconst emptyFn = () => {};\n\n/**\n * OpenUI5 FormatSettings shim\n */\nconst FormatSettings = {\n\tgetFormatLocale: getLocale,\n\tgetLegacyDateFormat: emptyFn,\n\tgetCustomLocaleData: emptyFn,\n\tgetLegacyDateCalendarCustomizing,\n};\n\nexport default FormatSettings;\n", "import { getTimezone as getConfiguredTimezone } from \"../InitialConfiguration.js\";\n\nlet currTimezone: string | undefined;\n\n/**\n * Returns the configured IANA timezone ID.\n *\n * @private\n * @returns {string}\n */\nconst getTimezone = (): string | undefined => {\n\tif (currTimezone === undefined) {\n\t\tcurrTimezone = getConfiguredTimezone();\n\t}\n\treturn currTimezone;\n};\n\n/**\n * Sets the IANA timezone ID.\n * **For example:** \"America/New_York\", \"Europe/London\", \"Australia/Sydney\", \"Asia/Bishkek\", etc.\n *>\n * @param {string} timezone\n * @private\n * @returns { Promise<void> }\n */\nconst setTimezone = (timezone: string) => {\n\tif (currTimezone === timezone) {\n\t\treturn;\n\t}\n\n\tcurrTimezone = timezone;\n};\n\nexport {\n\tgetTimezone,\n\tsetTimezone,\n};\n", "const designTimePropertyAsArray = (value: string) => {\n\tconst m = /\\$([-a-z0-9A-Z._]+)(?::([^$]*))?\\$/.exec(value);\n\treturn m && m[2] ? m[2].split(/,/) : null;\n};\n\nexport default designTimePropertyAsArray;\n", "/**\n * Static collection of utility functions to handle time zone related conversions\n *\n * @author SAP SE\n * @version 1.120.5\n * @namespace\n * @alias module:sap/base/i18n/date/TimezoneUtils\n * @private\n * @ui5-restricted sap.ui.core.Configuration, sap/base/i18n/format/DateFormat\n */ /*!\n     * OpenUI5\n     * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n     * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n     */\n\nvar TimezoneUtils = {};\n\n/**\n * Cache for the (browser's) local IANA timezone ID\n *\n * @type {string}\n */\nvar sLocalTimezone = \"\";\n\n/**\n * Cache for valid time zones provided by <code>Intl.supportedValuesOf(\"timeZone\")</code>\n *\n * @type {Array}\n */\nvar aSupportedTimezoneIDs;\n\n/**\n * Cache for Intl.DateTimeFormat instances\n */\nvar oIntlDateTimeFormatCache = {\n  _oCache: new Map(),\n  /**\n   * When cache limit is reached, it gets cleared\n   */\n  _iCacheLimit: 10,\n  /**\n   * Creates or gets an instance of Intl.DateTimeFormat.\n   *\n   * @param {string} sTimezone IANA timezone ID\n   * @returns {Intl.DateTimeFormat} Intl.DateTimeFormat instance\n   */\n  get: function (sTimezone) {\n    var cacheEntry = this._oCache.get(sTimezone);\n    if (cacheEntry) {\n      return cacheEntry;\n    }\n    var oOptions = {\n      hourCycle: \"h23\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      fractionalSecondDigits: 3,\n      day: \"2-digit\",\n      month: \"2-digit\",\n      year: \"numeric\",\n      timeZone: sTimezone,\n      timeZoneName: 'short',\n      era: 'narrow',\n      weekday: \"short\"\n    };\n    var oInstance = new Intl.DateTimeFormat(\"en-US\", oOptions);\n\n    // only store a limited number of entries in the cache\n    if (this._oCache.size === this._iCacheLimit) {\n      this._oCache = new Map();\n    }\n    this._oCache.set(sTimezone, oInstance);\n    return oInstance;\n  }\n};\n\n/**\n * Uses the <code>Intl.supportedValuesOf('timeZone')</code> and <code>Intl.DateTimeFormat</code>\n * API to check if the browser can handle the given IANA timezone ID.\n * <code>Intl.supportedValuesOf('timeZone')</code> offers direct access to the list of supported\n * time zones. It is not yet supported by all browsers but if it is supported and the given time\n * zone is in the list it is faster than probing.\n *\n * <code>Intl.supportedValuesOf('timeZone')</code> does not return all IANA timezone IDs which\n * the <code>Intl.DateTimeFormat</code> can handle, e.g. \"Japan\", \"Etc/UTC\".\n *\n * @param {string} sTimezone The IANA timezone ID which is checked, e.g <code>\"Europe/Berlin\"</code>\n * @returns {boolean} Whether the time zone is a valid IANA timezone ID\n * @private\n * @ui5-restricted sap.ui.core.Configuration, sap.ui.core.format.DateFormat\n */\nTimezoneUtils.isValidTimezone = function (sTimezone) {\n  if (!sTimezone) {\n    return false;\n  }\n  if (Intl.supportedValuesOf) {\n    try {\n      aSupportedTimezoneIDs = aSupportedTimezoneIDs || Intl.supportedValuesOf('timeZone');\n      if (aSupportedTimezoneIDs.includes(sTimezone)) {\n        return true;\n      }\n      // although not contained in the supportedValues it still can be valid, therefore continue\n    } catch (oError) {\n      // ignore error\n      aSupportedTimezoneIDs = [];\n    }\n  }\n  try {\n    oIntlDateTimeFormatCache.get(sTimezone);\n    return true;\n  } catch (oError) {\n    return false;\n  }\n};\n\n/**\n * Converts a date to a specific time zone.\n * The resulting date reflects the given time zone such that the \"UTC\" Date methods\n * can be used, e.g. Date#getUTCHours() to display the hours in the given time zone.\n *\n * @example\n * var oDate = new Date(\"2021-10-13T15:22:33Z\"); // UTC\n * // time zone difference UTC-4 (DST)\n * TimezoneUtils.convertToTimezone(oDate, \"America/New_York\");\n * // result is:\n * // 2021-10-13 11:22:33 in America/New_York\n * // same as new Date(\"2021-10-13T11:22:33Z\"); // UTC\n *\n * @param {Date} oDate The date which should be converted.\n * @param {string} sTargetTimezone The target IANA timezone ID, e.g <code>\"Europe/Berlin\"</code>\n * @returns {Date} The new date in the target time zone.\n * @private\n * @ui5-restricted sap.ui.core.format.DateFormat, sap.ui.unified, sap.m\n */\nTimezoneUtils.convertToTimezone = function (oDate, sTargetTimezone) {\n  var oFormatParts = this._getParts(oDate, sTargetTimezone);\n  return TimezoneUtils._getDateFromParts(oFormatParts);\n};\n\n/**\n * Uses the <code>Intl.DateTimeFormat</code> API to convert a date to a specific time zone.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts\n * @param {Date} oDate The date which should be converted.\n * @param {string} sTargetTimezone The target IANA timezone ID, e.g <code>\"Europe/Berlin\"</code>\n * @returns {{\n *     day: string,\n *     era: string,\n *     fractionalSecond: string,\n *     hour: string,\n *     minute: string,\n *     month: string,\n *     second: string,\n *     timeZoneName: string,\n *     weekday: string,\n *     year: string\n * }} An object containing the date and time fields considering the target time zone.\n * @private\n */\nTimezoneUtils._getParts = function (oDate, sTargetTimezone) {\n  var sKey,\n    oPart,\n    oDateParts = Object.create(null),\n    oIntlDate = oIntlDateTimeFormatCache.get(sTargetTimezone),\n    // clone the date object before passing it to the Intl API, to ensure that no\n    // UniversalDate gets passed to it;\n    // no need to use UI5Date.getInstance as only the UTC timestamp is used\n    oParts = oIntlDate.formatToParts(new Date(oDate.getTime()));\n  for (sKey in oParts) {\n    oPart = oParts[sKey];\n    if (oPart.type !== \"literal\") {\n      oDateParts[oPart.type] = oPart.value;\n    }\n  }\n  return oDateParts;\n};\n\n/**\n * Creates a Date from the provided date parts.\n *\n * @param {object} oParts Separated date and time fields as object, see {@link #_getParts}.\n * @returns {Date} Returns the date object created from the provided parts.\n * @private\n */\nTimezoneUtils._getDateFromParts = function (oParts) {\n  // no need to use UI5Date.getInstance as only the UTC timestamp is used\n  var oDate = new Date(0),\n    iUTCYear = parseInt(oParts.year);\n  if (oParts.era === \"B\") {\n    // The JS Date uses astronomical year numbering which supports year zero and negative\n    // year numbers.\n    // The Intl.DateTimeFormat API uses eras (no year zero and no negative year numbers).\n    // years around zero overview:\n    // | Astronomical | In Era\n    // |            2 | 2 Anno Domini (era: \"A\")\n    // |            1 | 1 Anno Domini (era: \"A\")\n    // |            0 | 1 Before Christ (era: \"B\")\n    // |           -1 | 2 Before Christ (era: \"B\")\n    // |           -2 | 3 Before Christ (era: \"B\")\n    // For the conversion to the JS Date the parts returned by the Intl.DateTimeFormat API\n    // need to be adapted.\n    iUTCYear = iUTCYear * -1 + 1;\n  }\n\n  // Date.UTC cannot be used here to be able to support dates before the UNIX epoch\n  oDate.setUTCFullYear(iUTCYear, parseInt(oParts.month) - 1, parseInt(oParts.day));\n  oDate.setUTCHours(parseInt(oParts.hour), parseInt(oParts.minute), parseInt(oParts.second), parseInt(oParts.fractionalSecond || 0)); // some older browsers don't support fractionalSecond, e.g. Safari < 14.1 */\n\n  return oDate;\n};\n\n/**\n * Gets the offset to UTC in seconds for a given date in the time zone specified.\n *\n * For non-unique points in time, the daylight saving time takes precedence over the standard\n * time shortly after the switch back (e.g. clock gets set back 1 hour, duplicate hour).\n *\n * @example\n * var oDate = new Date(\"2021-10-13T13:22:33Z\");\n * TimezoneUtils.calculateOffset(oDate, \"America/New_York\");\n * // => +14400 seconds (4 * 60 * 60 seconds)\n *\n * TimezoneUtils.calculateOffset(oDate, \"Europe/Berlin\");\n * // => -7200 seconds (-2 * 60 * 60 seconds)\n *\n * // daylight saving time (2018 Sun, 25 Mar, 02:00\tCET → CEST\t+1 hour (DST start)\tUTC+2h)\n * // the given date is taken as it is in the time zone\n * TimezoneUtils.calculateOffset(new Date(\"2018-03-25T00:00:00Z\"), \"Europe/Berlin\");\n * // => -3600 seconds (-1 * 60 * 60 seconds), interpreted as: 2018-03-25 00:00:00 (CET)\n *\n * TimezoneUtils.calculateOffset(new Date(\"2018-03-25T03:00:00Z\"), \"Europe/Berlin\");\n * // => -7200 seconds (-2 * 60 * 60 seconds)\n *\n * var oHistoricalDate = new Date(\"1800-10-13T13:22:33Z\");\n * TimezoneUtils.calculateOffset(oHistoricalDate, \"Europe/Berlin\");\n * // => -3208 seconds (-3208 seconds)\n *\n * @param {Date} oDate The date in the time zone used to calculate the offset to UTC.\n * @param {string} sTimezoneSource The source IANA timezone ID, e.g <code>\"Europe/Berlin\"</code>\n * @returns {number} The difference to UTC between the date in the time zone.\n * @private\n * @ui5-restricted sap.ui.core.format.DateFormat\n */\nTimezoneUtils.calculateOffset = function (oDate, sTimezoneSource) {\n  const oDateInTimezone = TimezoneUtils.convertToTimezone(oDate, sTimezoneSource);\n  const iGivenTimestamp = oDate.getTime();\n  const iInitialOffset = iGivenTimestamp - oDateInTimezone.getTime();\n  // no need to use UI5Date.getInstance as only the UTC timestamp is used\n  const oFirstGuess = new Date(iGivenTimestamp + iInitialOffset);\n  const oFirstGuessInTimezone = TimezoneUtils.convertToTimezone(oFirstGuess, sTimezoneSource);\n  const iFirstGuessInTimezoneTimestamp = oFirstGuessInTimezone.getTime();\n  const iSecondOffset = oFirstGuess.getTime() - iFirstGuessInTimezoneTimestamp;\n  let iTimezoneOffset = iSecondOffset;\n  if (iInitialOffset !== iSecondOffset) {\n    const oSecondGuess = new Date(iGivenTimestamp + iSecondOffset);\n    const oSecondGuessInTimezone = TimezoneUtils.convertToTimezone(oSecondGuess, sTimezoneSource);\n    const iSecondGuessInTimezoneTimestamp = oSecondGuessInTimezone.getTime();\n    // if time is different, the given date/time does not exist in the target time zone (switch to Daylight\n    // Saving Time) -> take the offset for the greater date\n    if (iSecondGuessInTimezoneTimestamp !== iGivenTimestamp && iFirstGuessInTimezoneTimestamp > iSecondGuessInTimezoneTimestamp) {\n      iTimezoneOffset = iInitialOffset;\n    }\n  }\n  return iTimezoneOffset / 1000;\n};\n\n/**\n * Map outdated IANA timezone IDs used in CLDR to correct and up-to-date IANA IDs as maintained in ABAP systems.\n *\n * @private\n\t */\nTimezoneUtils.mCLDR2ABAPTimezones = {\n  \"America/Buenos_Aires\": \"America/Argentina/Buenos_Aires\",\n  \"America/Catamarca\": \"America/Argentina/Catamarca\",\n  \"America/Cordoba\": \"America/Argentina/Cordoba\",\n  \"America/Jujuy\": \"America/Argentina/Jujuy\",\n  \"America/Mendoza\": \"America/Argentina/Mendoza\",\n  \"America/Indianapolis\": \"America/Indiana/Indianapolis\",\n  \"America/Louisville\": \"America/Kentucky/Louisville\",\n  \"Africa/Asmera\": \"Africa/Asmara\",\n  \"Asia/Katmandu\": \"Asia/Kathmandu\",\n  \"Asia/Calcutta\": \"Asia/Kolkata\",\n  \"Atlantic/Faeroe\": \"Atlantic/Faroe\",\n  \"Pacific/Ponape\": \"Pacific/Pohnpei\",\n  \"Asia/Rangoon\": \"Asia/Yangon\",\n  \"Pacific/Truk\": \"Pacific/Chuuk\",\n  \"America/Godthab\": \"America/Nuuk\",\n  \"Asia/Saigon\": \"Asia/Ho_Chi_Minh\",\n  \"America/Coral_Harbour\": \"America/Atikokan\"\n};\n\n/**\n * Retrieves the browser's local IANA timezone ID; if the browser's timezone ID is not the up-to-date IANA\n * timezone ID, the corresponding IANA timezone ID is returned.\n *\n * @returns {string} The local IANA timezone ID of the browser as up-to-date IANA timezone ID,\n *   e.g. <code>\"Europe/Berlin\"</code> or <code>\"Asia/Kolkata\"</code>\n *\n * @private\n * @ui5-restricted sap.ui.core.Configuration,sap.m.DateTimeField\n */\nTimezoneUtils.getLocalTimezone = function () {\n  if (sLocalTimezone === \"\") {\n    // timezone may be undefined, only value \"\" means empty cache\n    sLocalTimezone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    sLocalTimezone = TimezoneUtils.mCLDR2ABAPTimezones[sLocalTimezone] || sLocalTimezone;\n  }\n  return sLocalTimezone;\n};\n\n/**\n * Clears the cache for the browser's local IANA timezone ID.\n *\n * @private\n */\nTimezoneUtils._clearLocalTimezoneCache = function () {\n  sLocalTimezone = \"\";\n};\nexport default TimezoneUtils;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport TimezoneUtils from \"../../../base/i18n/date/TimezoneUtils.js\";\n/**\n * Static collection of utility functions to handle time zone related conversions\n *\n * @author SAP SE\n * @version 1.120.5\n * @namespace\n * @name module:sap/ui/core/format/TimezoneUtils\n * @private\n * @ui5-restricted sap.ui.core.Configuration, sap.ui.core.format.DateFormat\n *\n * @borrows sap/base/i18n/date/TimezoneUtils.isValidTimezone as isValidTimezone\n * @borrows sap/base/i18n/date/TimezoneUtils.convertToTimezone as convertToTimezone\n * @borrows sap/base/i18n/date/TimezoneUtils._getParts as _getParts\n * @borrows sap/base/i18n/date/TimezoneUtils._getDateFromParts as _getDateFromParts\n * @borrows sap/base/i18n/date/TimezoneUtils.calculateOffset as calculateOffset\n * @borrows sap/base/i18n/date/TimezoneUtils.getLocalTimezone as getLocalTimezone\n */\nexport default TimezoneUtils;", "import { getLanguage } from \"@ui5/webcomponents-base/dist/config/Language.js\";\nimport { getCalendarType } from \"@ui5/webcomponents-base/dist/config/CalendarType.js\";\nimport { getTimezone as getConfigTimezone } from \"@ui5/webcomponents-base/dist/config/Timezone.js\";\nimport getDesigntimePropertyAsArray from \"@ui5/webcomponents-base/dist/util/getDesigntimePropertyAsArray.js\";\n// @ts-ignore\nimport TimezoneUtil from \"./format/TimezoneUtil.js\";\nimport FormatSettings from \"./FormatSettings.js\";\n\nconst emptyFn = () => {};\n\n/**\n * OpenUI5 Configuration Shim\n */\nconst Configuration = {\n\tgetLanguage,\n\tgetCalendarType,\n\tgetSupportedLanguages: () => getDesigntimePropertyAsArray(\"$core-i18n-locales:,ar,bg,ca,cs,da,de,el,en,es,et,fi,fr,hi,hr,hu,it,iw,ja,ko,lt,lv,nl,no,pl,pt,ro,ru,sh,sk,sl,sv,th,tr,uk,vi,zh_CN,zh_TW$\"),\n\tgetOriginInfo: emptyFn,\n\tgetFormatSettings: () => FormatSettings,\n\tgetTimezone: () => getConfigTimezone() || TimezoneUtil.getLocalTimezone() as string,\n\t// Calculate calendar week numbering by active format locale\n\tgetCalendarWeekNumbering: () => \"Default\",\n};\n\nexport default Configuration;\n", "import FormatSettings from \"./FormatSettings.js\";\nimport Configuration from \"./Configuration.js\";\n\nconst emptyFn = () => {};\n\n/**\n * OpenUI5 Core shim\n */\nconst Core = {\n\tgetConfiguration: () => Configuration,\n\tgetLibraryResourceBundle: emptyFn(),\n\tgetFormatSettings: () => FormatSettings,\n};\n\nexport default Core;\n", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport assert from \"../../assert.js\";\n/**\n * Sorts the given array in-place and removes any duplicates (identified by \"===\").\n *\n * Uses Array#sort()\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n *\n * Use <code>jQuery.uniqueSort()</code> for arrays of DOMElements.\n *\n * @function\n * @since 1.58\n * @param {any[]} aArray An Array of any type\n * @alias module:sap/base/util/array/uniqueSort\n * @return {any[]} Same array as given (for chaining)\n * @public\n */\nvar fnUniqueSort = function (aArray) {\n  assert(Array.isArray(aArray), \"uniqueSort: input parameter must be an Array\");\n  var iLength = aArray.length;\n  if (iLength > 1) {\n    aArray.sort();\n    var j = 0;\n    for (var i = 1; i < iLength; i++) {\n      // invariant: i is the entry to check, j is the last unique entry known so far\n      if (aArray.indexOf(aArray[i]) === i) {\n        aArray[++j] = aArray[i];\n      }\n    }\n    // cut off the rest - if any\n    if (++j < iLength) {\n      aArray.splice(j, iLength - j);\n    }\n  }\n  return aArray;\n};\nexport default fnUniqueSort;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n// Provides class sap.ui.base.Metadata\nimport ObjectPath from \"../../base/util/ObjectPath.js\";\nimport assert from \"../../base/assert.js\";\nimport Log from \"../../base/Log.js\";\nimport uniqueSort from \"../../base/util/array/uniqueSort.js\";\nfunction isFunction(obj) {\n  return typeof obj === \"function\";\n}\n\n/**\n * Creates a new metadata object from the given static infos.\n *\n * <b>Note:</b> Throughout this class documentation, the described subclass of Object\n * is referenced as <i>the described class</i>.\n *\n * @param {string} sClassName Fully qualified name of the described class\n * @param {object} oClassInfo Info to construct the class and its metadata from\n * @param {sap.ui.base.Object.MetadataOptions} [oClassInfo.metadata]\n *  The metadata object describing the class\n *\n * @class Metadata for a class.\n * @author Frank Weigel\n * @version 1.120.5\n * @since 0.8.6\n * @public\n * @alias sap.ui.base.Metadata\n */\nvar Metadata = function (sClassName, oClassInfo) {\n  assert(typeof sClassName === \"string\" && sClassName, \"Metadata: sClassName must be a non-empty string\");\n  assert(typeof oClassInfo === \"object\", \"Metadata: oClassInfo must be empty or an object\");\n\n  // support for old usage of Metadata\n  if (!oClassInfo || typeof oClassInfo.metadata !== \"object\") {\n    oClassInfo = {\n      metadata: oClassInfo || {},\n      // retrieve class by its name. Using a lookup costs time but avoids the need for redundant arguments to this function\n      constructor: ObjectPath.get(sClassName) // legacy-relevant, code path not used by extend call\n    };\n    oClassInfo.metadata.__version = 1.0;\n  }\n  oClassInfo.metadata.__version = oClassInfo.metadata.__version || 2.0;\n  if (!isFunction(oClassInfo.constructor)) {\n    throw Error(\"constructor for class \" + sClassName + \" must have been declared before creating metadata for it\");\n  }\n\n  // invariant: oClassInfo exists, oClassInfo.metadata exists, oClassInfo.constructor exists\n  this._sClassName = sClassName;\n  this._oClass = oClassInfo.constructor;\n  this.extend(oClassInfo);\n};\n\n/**\n * @private\n * @final\n */\nMetadata.prototype.extend = function (oClassInfo) {\n  this.applySettings(oClassInfo);\n  this.afterApplySettings();\n};\n\n/**\n * @private\n * @since 1.3.1\n */\nMetadata.prototype.applySettings = function (oClassInfo) {\n  var that = this,\n    oStaticInfo = oClassInfo.metadata,\n    oPrototype;\n  if (oStaticInfo.baseType) {\n    var oParentClass;\n    if (isFunction(oStaticInfo.baseType)) {\n      oParentClass = oStaticInfo.baseType;\n      if (!isFunction(oParentClass.getMetadata)) {\n        throw new TypeError(\"baseType must be a UI5 class with a static getMetadata function\");\n      }\n    } else {\n      // lookup base class by its name - same reasoning as above\n      oParentClass = ObjectPath.get(oStaticInfo.baseType); // legacy-relevant, code path not used by extend call\n      if (!isFunction(oParentClass)) {\n        Log.fatal(\"base class '\" + oStaticInfo.baseType + \"' does not exist\");\n      }\n    }\n    // link metadata with base metadata\n    if (oParentClass.getMetadata) {\n      this._oParent = oParentClass.getMetadata();\n      assert(oParentClass === oParentClass.getMetadata().getClass(), \"Metadata: oParentClass must match the class in the parent metadata\");\n    } else {\n      // fallback, if base class has no metadata - can only happen if baseType is a string\n      this._oParent = new Metadata(oStaticInfo.baseType, {});\n    }\n  } else {\n    this._oParent = undefined;\n  }\n  this._bAbstract = !!oStaticInfo[\"abstract\"];\n  this._bFinal = !!oStaticInfo[\"final\"];\n  this._sStereotype = oStaticInfo.stereotype || (this._oParent ? this._oParent._sStereotype : \"object\");\n  this._bDeprecated = !!oStaticInfo[\"deprecated\"];\n\n  // handle interfaces\n  this._aInterfaces = oStaticInfo.interfaces || [];\n\n  // take over metadata from static info\n  this._aPublicMethods = oStaticInfo.publicMethods || [];\n\n  // interfaces info possibly not unique\n  this._bInterfacesUnique = false;\n\n  // enrich prototype\n  oPrototype = this._oClass.prototype;\n  for (var n in oClassInfo) {\n    if (n !== \"metadata\" && n !== \"constructor\") {\n      oPrototype[n] = oClassInfo[n];\n      if (!n.match(/^_|^on|^init$|^exit$/)) {\n        // TODO hard coded knowledge about event handlers (\"on\") and about init/exit hooks is not nice....\n        that._aPublicMethods.push(n);\n      }\n    }\n  }\n};\n\n/**\n * Called after new settings have been applied.\n *\n * Typically, this method is used to do some cleanup (e.g. uniqueness)\n * or to calculate an optimized version of some data.\n * @private\n * @since 1.3.1\n */\nMetadata.prototype.afterApplySettings = function () {\n  // create the flattened \"all\" view\n  if (this._oParent) {\n    this._aAllPublicMethods = this._oParent._aAllPublicMethods.concat(this._aPublicMethods);\n    this._bInterfacesUnique = false;\n  } else {\n    this._aAllPublicMethods = this._aPublicMethods;\n  }\n};\n\n/**\n * Stereotype of the described class.\n *\n * @experimental might be enhanced to a set of stereotypes\n * @private\n * @ui5-restricted\n */\nMetadata.prototype.getStereotype = function () {\n  return this._sStereotype;\n};\n\n/**\n * Returns the fully qualified name of the described class\n * @return {string} name of the described class\n * @public\n */\nMetadata.prototype.getName = function () {\n  return this._sClassName;\n};\n\n/**\n * Returns the (constructor of the) described class\n * @return {function(new:sap.ui.base.Object)} class described by this metadata\n * @public\n */\nMetadata.prototype.getClass = function () {\n  return this._oClass;\n};\n\n/**\n * Returns the metadata object of the base class of the described class\n * or undefined if the class has no (documented) base class.\n *\n * @return {sap.ui.base.Metadata | undefined} metadata of the base class\n * @public\n */\nMetadata.prototype.getParent = function () {\n  return this._oParent;\n};\n\n/**\n * Removes duplicate names in place from the interfaces and public methods members of this metadata object.\n *\n * @private\n */\nMetadata.prototype._dedupInterfaces = function () {\n  if (!this._bInterfacesUnique) {\n    uniqueSort(this._aInterfaces);\n    uniqueSort(this._aPublicMethods);\n    uniqueSort(this._aAllPublicMethods);\n    this._bInterfacesUnique = true;\n  }\n};\n\n/**\n * Returns an array with the names of the public methods declared by the described class, methods of\n * ancestors are not listed.\n *\n * @return {string[]} array with names of public methods declared by the described class\n * @deprecated As of 1.58, this method should not be used for productive code. The accuracy of the returned\n *       information highly depends on the concrete class and is not actively monitored. There might be\n *       more public methods or some of the returned methods might not really be intended for public use.\n *       In general, pure visibility information should not be exposed in runtime metadata but be part of the\n *       documentation.\n *       Subclasses of <code>sap.ui.base.Object</code> might decide to provide runtime metadata describing\n *       their public API, but this then should not be backed by this method.\n *       See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods} for an example.\n * @public\n */\nMetadata.prototype.getPublicMethods = function () {\n  this._dedupInterfaces();\n  return this._aPublicMethods;\n};\n\n/**\n * Returns an array with the names of all public methods declared by the described class\n * and all its ancestors classes.\n *\n * @return {string[]} array with names of all public methods provided by the described class and its ancestors\n * @deprecated As of 1.58, this method should not be used for productive code. The accuracy of the returned\n *       information highly depends on the concrete class and is not actively monitored. There might be\n *       more public methods or some of the returned methods might not really be intended for public use.\n *       In general, pure visibility information should not be exposed in runtime metadata but be part of the\n *       documentation.\n *       Subclasses of <code>sap.ui.base.Object</code> might decide to provide runtime metadata describing\n *       their public API, but this then should not be backed by this method.\n *       See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods} for an example.\n * @public\n */\nMetadata.prototype.getAllPublicMethods = function () {\n  this._dedupInterfaces();\n  return this._aAllPublicMethods;\n};\n\n/**\n * Returns the names of interfaces implemented by the described class.\n * As the representation of interfaces is not clear yet, this method is still private.\n *\n * @return {string} array of names of implemented interfaces\n * @private\n */\nMetadata.prototype.getInterfaces = function () {\n  this._dedupInterfaces();\n  return this._aInterfaces;\n};\n\n/**\n * Checks whether the described class or one of its ancestor classes implements the given interface.\n *\n * @param {string} sInterface name of the interface to test for (in dot notation)\n * @return {boolean} whether this class implements the interface\n * @public\n */\nMetadata.prototype.isInstanceOf = function (sInterface) {\n  if (this._oParent) {\n    if (this._oParent.isInstanceOf(sInterface)) {\n      return true;\n    }\n  }\n  var a = this._aInterfaces;\n  for (var i = 0, l = a.length; i < l; i++) {\n    // FIXME doesn't handle interface inheritance (requires object representation for interfaces)\n    if (a[i] === sInterface) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n * Lazy calculation of the set of implemented types.\n *\n * A calculation function is configured as getter for the <code>_mImplementedTypes</code>\n * on the prototype object. On first call for a metadata instance, it collects\n * the implemented types (classes, interfaces) from the described class and\n * any base classes and writes it to the property <code>_mImplementedTypes</code> of the\n * current instance of metadata. Future read access to the property will immediately\n * return the instance property and not call the calculation function again.\n */\nObject.defineProperty(Metadata.prototype, \"_mImplementedTypes\", {\n  get: function () {\n    if (this === Metadata.prototype) {\n      throw new Error(\"sap.ui.base.Metadata: The '_mImplementedTypes' property must not be accessed on the prototype\");\n    }\n\n    // create map of types, including inherited types\n    // Note: to save processing time and memory, the inherited types are merged via the prototype chain of 'result'\n    var result = Object.create(this._oParent ? this._oParent._mImplementedTypes : null);\n    /*\n     * Flat alternative:\n     * var result = Object.create(null);\n     * if ( this._oParent ) {\n     *   Object.assign(result, this._oParent._mImplementedTypes);\n     * }\n     */\n\n    // add own class\n    result[this._sClassName] = true;\n\n    // additionally collect interfaces\n    var aInterfaces = this._aInterfaces,\n      i = aInterfaces.length;\n    while (i-- > 0) {\n      if (!result[aInterfaces[i]]) {\n        // take care to write property only if it hasn't been set already\n        result[aInterfaces[i]] = true;\n      }\n    }\n\n    // write instance property, hiding the getter on the prototype\n    Object.defineProperty(this, \"_mImplementedTypes\", {\n      value: Object.freeze(result),\n      writable: false,\n      configurable: false\n    });\n    return result;\n  },\n  configurable: true\n});\n\n/**\n * Checks whether the class described by this metadata object is of the named type.\n *\n * This check is solely based on the type names as declared in the class metadata.\n * It compares the given <code>vTypeName</code> with the name of this class, with the\n * names of any base class of this class and with the names of all interfaces\n * implemented by any of the aforementioned classes.\n *\n * Instead of a single type name, an array of type names can be given and the method\n * will check if this class is of any of the listed types (logical or).\n *\n * Should the UI5 class system in future implement additional means of associating classes\n * with type names (e.g. by introducing mixins), then this method might detect matches\n * for those names as well.\n *\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether this class is of the given type or of any of the given types\n * @public\n * @since 1.56\n */\nMetadata.prototype.isA = function (vTypeName) {\n  var mTypes = this._mImplementedTypes;\n  if (Array.isArray(vTypeName)) {\n    for (var i = 0; i < vTypeName.length; i++) {\n      if (vTypeName[i] in mTypes) {\n        return true;\n      }\n    }\n    return false;\n  }\n  // Note: the check with 'in' also finds inherited types via the prototype chain of mTypes\n  return vTypeName in mTypes;\n};\n\n/**\n * Returns whether the described class is abstract\n * @return {boolean} whether the class is abstract\n * @public\n */\nMetadata.prototype.isAbstract = function () {\n  return this._bAbstract;\n};\n\n/**\n * Returns whether the described class is final\n * @return {boolean} whether the class is final\n * @public\n */\nMetadata.prototype.isFinal = function () {\n  return this._bFinal;\n};\n\n/**\n * Whether the described class is deprecated and should not be used any more\n *\n * @return {boolean} whether the class is considered deprecated\n * @public\n * @since 1.26.4\n */\nMetadata.prototype.isDeprecated = function () {\n  return this._bDeprecated;\n};\n\n/**\n * Adds one or more new methods to the list of API methods.\n *\n * Can be used by contributer classes (like the EnabledPropagator) to enrich the declared set of methods.\n * The method can either be called with multiple names (strings) or with one array of strings.\n *\n * <b>Note</b>: the newly added method(s) will only be visible in {@link sap.ui.base.Interface interface}\n * objects that are created <i>after</i> this method has been called.\n *\n * @param {string|string[]} sMethod name(s) of the new method(s)\n */\nMetadata.prototype.addPublicMethods = function (sMethod /* ... */) {\n  var aNames = sMethod instanceof Array ? sMethod : arguments;\n  Array.prototype.push.apply(this._aPublicMethods, aNames);\n  Array.prototype.push.apply(this._aAllPublicMethods, aNames);\n  this._bInterfacesUnique = false;\n};\n\n/**\n * @since 1.3.1\n * @private\n */\nMetadata.createClass = function (fnBaseClass, sClassName, oClassInfo, FNMetaImpl) {\n  if (typeof fnBaseClass === \"string\") {\n    FNMetaImpl = oClassInfo;\n    oClassInfo = sClassName;\n    sClassName = fnBaseClass;\n    fnBaseClass = null;\n  }\n  assert(!fnBaseClass || isFunction(fnBaseClass));\n  assert(typeof sClassName === \"string\" && !!sClassName);\n  assert(!oClassInfo || typeof oClassInfo === \"object\");\n  assert(!FNMetaImpl || isFunction(FNMetaImpl));\n\n  // allow metadata class to preprocess\n  FNMetaImpl = FNMetaImpl || Metadata;\n  if (isFunction(FNMetaImpl.preprocessClassInfo)) {\n    oClassInfo = FNMetaImpl.preprocessClassInfo(oClassInfo);\n  }\n\n  // normalize oClassInfo\n  oClassInfo = oClassInfo || {};\n  oClassInfo.metadata = oClassInfo.metadata || {};\n  if (!oClassInfo.hasOwnProperty('constructor')) {\n    oClassInfo.constructor = undefined;\n  }\n  var fnClass = oClassInfo.constructor;\n  assert(!fnClass || isFunction(fnClass));\n\n  // ensure defaults\n  if (fnBaseClass) {\n    // default constructor just delegates to base class\n    if (!fnClass) {\n      if (oClassInfo.metadata.deprecated) {\n        // create default factory with deprecation warning\n        fnClass = function () {\n          Log.warning(\"Usage of deprecated class: \" + sClassName);\n          fnBaseClass.apply(this, arguments);\n        };\n      } else {\n        // create default factory\n        fnClass = function () {\n          fnBaseClass.apply(this, arguments);\n        };\n      }\n    }\n    // create prototype chain\n    fnClass.prototype = Object.create(fnBaseClass.prototype);\n    fnClass.prototype.constructor = fnClass;\n    // enforce correct baseType\n    oClassInfo.metadata.baseType = fnBaseClass;\n  } else {\n    // default constructor does nothing\n    fnClass = fnClass || function () {};\n    // enforce correct baseType\n    delete oClassInfo.metadata.baseType;\n  }\n  oClassInfo.constructor = fnClass;\n\n  // make the class visible as JS Object\n  ObjectPath.set(sClassName, fnClass);\n\n  // add metadata\n  var oMetadata = new FNMetaImpl(sClassName, oClassInfo);\n  fnClass.getMetadata = fnClass.prototype.getMetadata = function () {\n    return oMetadata;\n  };\n\n  // enrich function\n  if (!fnClass.getMetadata().isFinal()) {\n    fnClass.extend = function (sSCName, oSCClassInfo, fnSCMetaImpl) {\n      return Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);\n    };\n  }\n  return fnClass;\n};\nexport default Metadata;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n/**\n * SAPUI5 base classes\n *\n * @namespace\n * @name sap.ui.base\n * @public\n */\n// Provides class sap.ui.base.Object\nimport Metadata from \"./Metadata.js\";\nimport Log from \"../../base/Log.js\";\n/**\n * Constructor for an <code>sap.ui.base.Object</code>.\n *\n * Subclasses of this class should always call the constructor of their base class.\n *\n * @class Base class for all SAPUI5 Objects.\n * @abstract\n * @author Malte Wedel\n * @version 1.120.5\n * @public\n * @alias sap.ui.base.Object\n * @throws {Error} When an instance of the class or its subclasses is created without the <code>new</code> operator.\n */\nvar BaseObject = Metadata.createClass(\"sap.ui.base.Object\", {\n  constructor: function () {\n    // complain if 'this' is not an instance of a subclass\n    if (!(this instanceof BaseObject)) {\n      throw Error(\"Cannot instantiate object: \\\"new\\\" is missing!\");\n    }\n  }\n});\n\n/**\n * Destructor method for objects.\n * @public\n */\nBaseObject.prototype.destroy = function () {};\n\n/**\n * Returns the public facade of this object.\n *\n * By default, the public facade is implemented as an instance of {@link sap.ui.base.Interface},\n * exposing the <code>publicMethods</code> as defined in the metadata of the class of this object.\n *\n * See the documentation of the {@link #.extend extend} method for an explanation of <code>publicMethods</code>.\n *\n * The facade is created on the first call of <code>getInterface</code> and reused for all later calls.\n *\n * @public\n * @returns {sap.ui.base.Object} A facade for this object, with at least the public methods of the class of this.\n */\nBaseObject.prototype.getInterface = function () {\n  // New implementation that avoids the overhead of a dedicated member for the interface\n  // initially, an Object instance has no associated Interface and the getInterface\n  // method is defined only in the prototype. So the code here will be executed.\n  // It creates an interface (basically the same code as in the old implementation)\n  var oInterface = new BaseObject._Interface(this, this.getMetadata().getAllPublicMethods());\n  // Now this Object instance gets a new, private implementation of getInterface\n  // that returns the newly created oInterface. Future calls of getInterface on the\n  // same Object therefore will return the already created interface\n  this.getInterface = function () {\n    return oInterface;\n  };\n  // as the first caller doesn't benefit from the new method implementation we have to\n  // return the created interface as well.\n  return oInterface;\n};\n\n/**\n * Returns the metadata for the class that this object belongs to.\n *\n * This method is only defined when metadata has been declared by using {@link sap.ui.base.Object.defineClass}\n * or {@link sap.ui.base.Object.extend}.\n *\n * @return {sap.ui.base.Metadata} metadata for the class of the object\n * @name sap.ui.base.Object#getMetadata\n * @function\n * @public\n */\n\n/**\n * The structure of the \"metadata\" object which is passed when inheriting from sap.ui.base.Object using its static \"extend\" method.\n * See {@link sap.ui.base.Object.extend} for details on its usage.\n *\n * @typedef {object} sap.ui.base.Object.MetadataOptions\n *\n * @property {string[]} [interfaces] set of names of implemented interfaces (defaults to no interfaces)\n * @property {boolean} [abstract=false] flag that marks the class as abstract (purely informational, defaults to false)\n * @property {boolean} [final=false] flag that marks the class as final (defaults to false)\n * @property {boolean} [deprecated=false] flag that marks the class as deprecated (defaults to false). May lead to an additional warning\n *     log message at runtime when the object is still used. For the documentation, also add a <code>@deprecated</code> tag in the JSDoc,\n *     describing since when it is deprecated and what any alternatives are.\n *\n * @public\n */\n\n/**\n * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>\n * and enriches it with the information contained in <code>oClassInfo</code>.\n *\n * <code>oClassInfo</code> might contain three kinds of information:\n * <ul>\n * <li><code>metadata:</code> an (optional) object literal with metadata about the class like implemented interfaces,\n * see {@link sap.ui.base.Object.MetadataOptions MetadataOptions} for details.\n * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}.\n * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).\n * </li>\n *\n * <li><code>constructor:</code> a function that serves as a constructor function for the new class.\n * If no constructor function is given, the framework creates a default implementation that delegates all\n * its arguments to the constructor function of the base class.\n * </li>\n *\n * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype\n * object of the newly created class. Callers can thereby add methods or properties to all instances of the\n * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't\n * make sense to use primitive values here other than to declare public constants.\n *\n * If such a property has a function as its value, and if the property name does not start with an underscore\n * or with the prefix \"on\", the property name will be automatically added to the list of public methods of the\n * class (see property <code>publicMethods</code> in the <code>metadata</code> section). If a method's name\n * matches that pattern, but is not meant to be public, it shouldn't be included in the class info object,\n * but be assigned to the prototype instead.\n * </li>\n *\n * </ul>\n *\n * The prototype object of the newly created class uses the same prototype as instances of the base class\n * (prototype chaining).\n *\n * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>\n * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)\n * itself.\n *\n * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class\n * can be specified. Instances of that class will be used to represent metadata for the newly created class\n * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the\n * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).\n *\n * @param {string} sClassName name of the class to be created\n * @param {object} [oClassInfo] structured object with information about the class\n * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.\n * @return {function} the created class / constructor function\n * @public\n * @static\n * @name sap.ui.base.Object.extend\n * @function\n * @since 1.3.1\n */\n\n/**\n * Creates metadata for a given class and attaches it to the constructor and prototype of that class.\n *\n * After creation, metadata can be retrieved with getMetadata().\n *\n * The static info can at least contain the following entries:\n * <ul>\n * <li>baseType: {string} fully qualified name of a base class or empty</li>\n * <li>publicMethods: {string} an array of method names that will be visible in the interface proxy returned by {@link #getInterface}</li>\n * </ul>\n *\n * @param {string} sClassName name of an (already declared) constructor function\n * @param {object} oStaticInfo static info used to create the metadata object\n * @param {string} oStaticInfo.baseType qualified name of a base class\n * @param {string[]} oStaticInfo.publicMethods array of names of public methods\n * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.\n *\n * @return {sap.ui.base.Metadata} the created metadata object\n * @public\n * @static\n * @deprecated Since 1.3.1. Use the static <code>extend</code> method of the desired base class (e.g. {@link sap.ui.base.Object.extend})\n */\nBaseObject.defineClass = function (sClassName, oStaticInfo, FNMetaImpl) {\n  // create Metadata object\n  var oMetadata = new (FNMetaImpl || Metadata)(sClassName, oStaticInfo);\n  var fnClass = oMetadata.getClass();\n  fnClass.getMetadata = fnClass.prototype.getMetadata = function () {\n    return oMetadata;\n  };\n  // enrich function\n  if (!oMetadata.isFinal()) {\n    fnClass.extend = function (sSCName, oSCClassInfo, fnSCMetaImpl) {\n      return Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);\n    };\n  }\n  Log.debug(\"defined class '\" + sClassName + \"'\" + (oMetadata.getParent() ? \" as subclass of \" + oMetadata.getParent().getName() : \"\"));\n  return oMetadata;\n};\n\n/**\n * Checks whether this object is an instance of the named type.\n *\n * This check is solely based on the type names as declared in the class metadata.\n * It compares the given <code>vTypeName</code> with the name of the class of this object,\n * with the names of any base class of that class and with the names of all interfaces\n * implemented by any of the aforementioned classes.\n *\n * Instead of a single type name, an array of type names can be given and the method\n * will check if this object is an instance of any of the listed types (logical or).\n *\n * Should the UI5 class system in future implement additional means of associating classes\n * with type names (e.g. by introducing mixins), then this method might detect matches\n * for those names as well.\n *\n * @example\n * myObject.isA(\"sap.ui.core.Control\"); // true if myObject is an instance of sap.ui.core.Control\n * myObject.isA([\"sap.ui.core.Control\", \"sap.ui.core.Fragment\"]); // true if myObject is an instance of sap.ui.core.Control or sap.ui.core.Fragment\n *\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether this object is an instance of the given type or of any of the given types\n * @public\n * @since 1.56\n */\nBaseObject.prototype.isA = function (vTypeName) {\n  return this.getMetadata().isA(vTypeName);\n};\n\n/**\n * Checks whether the given object is an instance of the named type.\n * This function is a short-hand convenience for {@link sap.ui.base.Object#isA}.\n *\n * Please see the API documentation of {@link sap.ui.base.Object#isA} for more details.\n *\n * @param {any} oObject Object which will be checked whether it is an instance of the given type\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether the given object is an instance of the given type or of any of the given types\n * @public\n * @since 1.56\n * @static\n * @deprecated Since 1.120, please use {@link sap.ui.base.Object.isObjectA}.\n */\nBaseObject.isA = function (oObject, vTypeName) {\n  return oObject instanceof BaseObject && oObject.isA(vTypeName);\n};\n\n/**\n * Checks whether the given object is an instance of the named type.\n * This function is a short-hand convenience for {@link sap.ui.base.Object#isA}.\n *\n * Please see the API documentation of {@link sap.ui.base.Object#isA} for more details.\n *\n * @param {any} oObject Object which will be checked whether it is an instance of the given type\n * @param {string|string[]} vTypeName Type or types to check for\n * @returns {boolean} Whether the given object is an instance of the given type or of any of the given types\n * @public\n * @since 1.120\n * @static\n */\nBaseObject.isObjectA = function (oObject, vTypeName) {\n  return oObject instanceof BaseObject && oObject.isA(vTypeName);\n};\n\n/**\n * @param  {sap.ui.base.Object} [oObject] Object for which a facade should be created\n * @param  {string[]} [aMethods=[]] Names of the methods, that should be available in the new facade\n * @param  {boolean} [_bReturnFacade=false] If true, the return value of a function call is this created Interface instance instead of the BaseObject interface\n * @private\n * @static\n */\nBaseObject._Interface = function (oObject, aMethods, _bReturnFacade) {\n  // if object is null or undefined, return itself\n  if (!oObject) {\n    return oObject;\n  }\n  function fCreateDelegator(oObject, sMethodName) {\n    return function () {\n      // return oObject[sMethodName].apply(oObject, arguments);\n      var tmp = oObject[sMethodName].apply(oObject, arguments);\n      // to avoid to hide the implementation behind the interface you need\n      // to override the getInterface function in the object or create the interface with bFacade = true\n      if (_bReturnFacade) {\n        return this;\n      } else {\n        return tmp instanceof BaseObject ? tmp.getInterface() : tmp;\n      }\n    };\n  }\n\n  // if there are no methods return\n  if (!aMethods) {\n    return {};\n  }\n  var sMethodName;\n\n  // create functions for all delegated methods\n  // PERFOPT: 'cache' length of aMethods to reduce # of resolutions\n  for (var i = 0, ml = aMethods.length; i < ml; i++) {\n    sMethodName = aMethods[i];\n    //!oObject[sMethodName] for 'lazy' loading interface methods ;-)\n    if (!oObject[sMethodName] || typeof oObject[sMethodName] === \"function\") {\n      this[sMethodName] = fCreateDelegator(oObject, sMethodName);\n    }\n  }\n};\nexport default BaseObject;", "const M_ISO639_OLD_TO_NEW = {\n\t\"iw\": \"he\",\n\t\"ji\": \"yi\",\n};\n\nconst getModernLanguage = (sLanguage: string) => {\n\treturn M_ISO639_OLD_TO_NEW[sLanguage as keyof typeof M_ISO639_OLD_TO_NEW] || sLanguage;\n};\n\nconst Localization = {\n\tgetModernLanguage,\n};\n\nexport default Localization;\n", "/**\n * A regular expression that describes language tags according to BCP-47.\n * @see BCP47 \"Tags for Identifying Languages\" (http://www.ietf.org/rfc/bcp/bcp47.txt)\n *\n * The matching groups are\n *  0=all\n *  1=language (shortest ISO639 code + ext. language sub tags | 4digits (reserved) | registered language sub tags)\n *  2=script (4 letters)\n *  3=region (2 letter language or 3 digits)\n *  4=variants (separated by '-', Note: capturing group contains leading '-' to shorten the regex!)\n *  5=extensions (including leading singleton, multiple extensions separated by '-'.Note: capturing group contains leading '-' to shorten the regex!)\n *  6=private use section (including leading 'x', multiple sections separated by '-')\n *\n *              [-------------------- language ----------------------][--- script ---][------- region --------][------------- variants --------------][----------- extensions ------------][------ private use -------]\n */ /*!\n     * OpenUI5\n     * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n     * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n     */\n\n//Provides the LanguageTag object module:sap/base/i18n/LanguageTag\n\nvar rLanguageTag = /^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?((?:-[0-9A-Z]{5,8}|-[0-9][0-9A-Z]{3})*)((?:-[0-9A-WYZ](?:-[0-9A-Z]{2,8})+)*)(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;\n\n/**\n * Creates an LanguageTag instance.\n * LanguageTag represents a BCP-47 language tag, consisting of a language, script, region, variants, extensions and private use section.\n *\n * @class\n *\n * @param {string} sLanguageTag the language tag identifier, in format en-US or en_US.\n *\n * @author SAP SE\n * @version 1.120.5\n * @public\n * @alias module:sap/base/i18n/LanguageTag\n */\nclass LanguageTag {\n  /**\n   * Get the language.\n   *\n   * Note that the case might differ from the original script tag\n   * (Lower case is enforced as recommended by BCP47/ISO639).\n   *\n   * @type {string}\n   * @public\n   */\n  language;\n\n  /**\n   * Get the script or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original language tag\n   * (Upper case first letter and lower case reminder enforced as\n   * recommended by BCP47/ISO15924)\n   *\n   * @type {string|null}\n   * @public\n   */\n  script;\n\n  /**\n   * Get the region or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original script tag\n   * (Upper case is enforced as recommended by BCP47/ISO3166-1).\n   *\n   * @type {string}\n   * @public\n   */\n  region;\n\n  /**\n   * Get the variants as a single string or <code>null</code>.\n   *\n   * Multiple variants are separated by a dash '-'.\n   *\n   * @type {string|null}\n   * @public\n   */\n  variant;\n\n  /**\n   * Get the variants as an array of individual variants.\n   *\n   * The separating dashes are not part of the result.\n   * If there is no variant section in the language tag, an empty array is returned.\n   *\n   * @type {string[]}\n   * @public\n   */\n  variantSubtags;\n\n  /**\n   * Get the extension as a single string or <code>null</code>.\n   *\n   * The extension always consists of a singleton character (not 'x'),\n   * a dash '-' and one or more extension token, each separated\n   * again with a dash.\n   *\n   * @type {string|null}\n   * @public\n   */\n  extension;\n\n  /**\n   * Get the extensions as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no extensions section in the language tag, an empty array is returned.\n   *\n   * @type {string[]}\n   * @public\n   */\n  extensionSubtags;\n\n  /**\n   * Get the private use section or <code>null</code>.\n   *\n   * @type {string}\n   */\n  privateUse;\n\n  /**\n   * Get the private use section as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no private use section in the language tag, an empty array is returned.\n   *\n   * @type {string[]}\n   */\n  privateUseSubtags;\n  constructor(sLanguageTag) {\n    var aResult = rLanguageTag.exec(sLanguageTag.replace(/_/g, \"-\"));\n    // If the given language tag string cannot be parsed by the regular expression above,\n    // we should at least tell the developer why the Core fails to load.\n    if (aResult === null) {\n      throw new TypeError(\"The given language tag'\" + sLanguageTag + \"' does not adhere to BCP-47.\");\n    }\n    this.language = aResult[1] || null;\n    this.script = aResult[2] || null;\n    this.region = aResult[3] || null;\n    this.variant = aResult[4] && aResult[4].slice(1) || null; // remove leading dash from capturing group\n    this.variantSubtags = this.variant ? this.variant.split('-') : [];\n    this.extension = aResult[5] && aResult[5].slice(1) || null; // remove leading dash from capturing group\n    this.extensionSubtags = this.variant ? this.variant.split('-') : [];\n    this.privateUse = aResult[6] || null;\n    this.privateUseSubtags = this.privateUse ? this.privateUse.slice(2).split('-') : [];\n    // convert subtags according to the BCP47 recommendations\n    // - language: all lower case\n    // - script: lower case with the first letter capitalized\n    // - region: all upper case\n    if (this.language) {\n      this.language = this.language.toLowerCase();\n    }\n    if (this.script) {\n      this.script = this.script.toLowerCase().replace(/^[a-z]/, function ($) {\n        return $.toUpperCase();\n      });\n    }\n    if (this.region) {\n      this.region = this.region.toUpperCase();\n    }\n    Object.freeze(this);\n  }\n  toString() {\n    return this.#join(this.language, this.script, this.region, this.variant, this.extension, this.privateUse);\n  }\n  #join() {\n    return Array.prototype.filter.call(arguments, Boolean).join(\"-\");\n  }\n}\nexport default LanguageTag;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n//Provides the locale object sap.ui.core.Locale\nimport assert from \"../../base/assert.js\";\nimport BaseObject from \"../base/Object.js\";\nimport Localization from \"../../base/i18n/Localization.js\";\nimport LanguageTag from \"../../base/i18n/LanguageTag.js\";\nvar mCache = Object.create(null);\n\n/**\n * Creates an instance of the Locale.\n *\n * @class Locale represents a locale setting, consisting of a language, script, region, variants, extensions and private use section.\n *\n * @param {string} sLocale the locale identifier, in format en-US or en_US.\n *\n * @extends sap.ui.base.Object\n * @author SAP SE\n * @version 1.120.5\n * @public\n * @alias sap.ui.core.Locale\n */\nvar Locale = BaseObject.extend(\"sap.ui.core.Locale\", /** @lends sap.ui.core.Locale.prototype */{\n  constructor: function (vLocale) {\n    BaseObject.apply(this);\n    if (vLocale instanceof LanguageTag) {\n      this.oLanguageTag = vLocale;\n      this.sLocaleId = this.oLanguageTag.toString();\n    } else {\n      this.oLanguageTag = new LanguageTag(vLocale);\n      this.sLocaleId = vLocale;\n    }\n    Object.assign(this, this.oLanguageTag);\n    this.sLanguage = this.language;\n  },\n  /**\n   * Get the locale language.\n   *\n   * Note that the case might differ from the original script tag\n   * (Lower case is enforced as recommended by BCP47/ISO639).\n   *\n   * @returns {string} the language code\n   * @public\n   */\n  getLanguage: function () {\n    return this.language;\n  },\n  /**\n   * Get the locale script or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original language tag\n   * (Upper case first letter and lower case reminder enforced as\n   * recommended by BCP47/ISO15924)\n   *\n   * @returns {string|null} the script code or <code>null</code>\n   * @public\n   */\n  getScript: function () {\n    return this.script;\n  },\n  /**\n   * Get the locale region or <code>null</code> if none was specified.\n   *\n   * Note that the case might differ from the original script tag\n   * (Upper case is enforced as recommended by BCP47/ISO3166-1).\n   *\n   * @returns {string} the ISO3166-1 region code (2-letter or 3-digits)\n   * @public\n   */\n  getRegion: function () {\n    return this.region;\n  },\n  /**\n   * Get the locale variants as a single string or <code>null</code>.\n   *\n   * Multiple variants are separated by a dash '-'.\n   *\n   * @returns {string|null} the variant or <code>null</code>\n   * @public\n   */\n  getVariant: function () {\n    return this.variant;\n  },\n  /**\n   * Get the locale variants as an array of individual variants.\n   *\n   * The separating dashes are not part of the result.\n   * If there is no variant section in the locale tag, an empty array is returned.\n   *\n   * @returns {string[]} the individual variant sections\n   * @public\n   */\n  getVariantSubtags: function () {\n    return this.variantSubtags;\n  },\n  /**\n   * Get the locale extension as a single string or <code>null</code>.\n   *\n   * The extension always consists of a singleton character (not 'x'),\n   * a dash '-' and one or more extension token, each separated\n   * again with a dash.\n   *\n   * Use {@link #getExtensions} to get the individual extension tokens as an array.\n   *\n   * @returns {string|null} the extension or <code>null</code>\n   * @public\n   */\n  getExtension: function () {\n    return this.extension;\n  },\n  /**\n   * Get the locale extensions as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no extensions section in the locale tag, an empty array is returned.\n   *\n   * @returns {string[]} the individual extension sections\n   * @public\n   */\n  getExtensionSubtags: function () {\n    return this.extensionSubtags;\n  },\n  /**\n   * Get the locale private use section or <code>null</code>.\n   *\n   * @returns {string} the private use section\n   * @public\n   */\n  getPrivateUse: function () {\n    return this.privateUse;\n  },\n  /**\n   * Get the locale private use section as an array of tokens.\n   *\n   * The leading singleton and the separating dashes are not part of the result.\n   * If there is no private use section in the locale tag, an empty array is returned.\n   *\n   * @returns {string[]} the tokens of the private use section\n   * @public\n   */\n  getPrivateUseSubtags: function () {\n    return this.privateUseSubtags;\n  },\n  /**\n   * Check if a subtag is provided\n   *\n   * @param {string} sSubtag The subtag to check\n   * @returns {boolean} Wether the subtag is provided or not\n   */\n  hasPrivateUseSubtag: function (sSubtag) {\n    assert(sSubtag && sSubtag.match(/^[0-9A-Z]{1,8}$/i), \"subtag must be a valid BCP47 private use tag\");\n    return this.privateUseSubtags.indexOf(sSubtag) >= 0;\n  },\n  toString: function () {\n    return this.oLanguageTag.toString();\n  },\n  /**\n   * Best guess to get a proper SAP Logon Language for this locale.\n   *\n   * Conversions taken into account:\n   * <ul>\n   * <li>use the language part only</li>\n   * <li>convert old ISO639 codes to newer ones (e.g. 'iw' to 'he')</li>\n   * <li>for Chinese, map 'Traditional Chinese' or region 'TW' to SAP proprietary code 'zf'</li>\n   * <li>map private extensions x-saptrc, x-sappsd and saprigi to SAP pseudo languages '1Q', '2Q' and '3Q'</li>\n   * <li>remove ext. language sub tags</li>\n   * <li>convert to uppercase</li>\n   * </ul>\n   *\n   * Note that the conversion also returns a result for languages that are not\n   * supported by the default set of SAP languages. This method has no knowledge\n   * about the concrete languages of any given backend system.\n   *\n   * @returns {string} a language code that should\n   * @public\n   * @since 1.17.0\n   * @deprecated As of 1.44, use {@link sap.ui.core.Configuration#getSAPLogonLanguage} instead\n   *   as that class allows to configure an SAP Logon language.\n   */\n  getSAPLogonLanguage: function () {\n    return Localization._getSAPLogonLanguage(this);\n  }\n});\nLocale._getCoreLocale = function (oLocale) {\n  if (oLocale instanceof LanguageTag) {\n    oLocale = mCache[oLocale.toString()] || new Locale(oLocale);\n    mCache[oLocale.toString()] = oLocale;\n  }\n  return oLocale;\n};\nexport default Locale;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport isPlainObject from \"./isPlainObject.js\";\nvar oToken = Object.create(null);\n\n/**\n * Performs object extension by merging source objects into a target object.\n *\n * @example\n * var oMerged = _merge(true, false, {}, {prop1:1}, {prop2:2});\n *\n * @function\n * @since 1.71\n * @private\n * @alias module:sap/base/util/_merge\n * @param {boolean} deep Shallow copy or deep merge\n * @param {boolean} skipUndefined Whether <code>undefined</code> values will be skipped, otherwise <code>undefined</code> values will overwrite existing values\n * @param {object} target The object that will receive new properties\n * @param {...object} [source] One or more objects which get merged into the target object\n * @return {object} the target object which is the result of the merge\n */\nvar fnMerge = function () {\n  /*\n   * The code in this function is taken from jQuery 3.6.0 \"jQuery.extend\" and got modified.\n   *\n   * jQuery JavaScript Library v3.6.0\n   * https://jquery.com/\n   *\n   * Copyright OpenJS Foundation and other contributors\n   * Released under the MIT license\n   * https://jquery.org/license\n   */\n  var src,\n    copyIsArray,\n    copy,\n    name,\n    options,\n    clone,\n    target = arguments[2] || {},\n    i = 3,\n    length = arguments.length,\n    deep = arguments[0] || false,\n    skipToken = arguments[1] ? undefined : oToken;\n\n  // Handle case when target is a string or something (possible in deep copy)\n  if (typeof target !== \"object\" && typeof target !== \"function\") {\n    target = {};\n  }\n  for (; i < length; i++) {\n    if ((options = arguments[i]) != null) {\n      // Extend the base object\n      for (name in options) {\n        src = target[name];\n        copy = options[name];\n\n        // Prevent never-ending loop\n        // Prevent Object.prototype pollution for $.extend( true, ... )\n        // For further information, please visit https://github.com/jquery/jquery/pull/4333\n        if (name === \"__proto__\" || target === copy) {\n          continue;\n        }\n\n        // Recurse if we're merging plain objects or arrays\n        if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n          if (copyIsArray) {\n            copyIsArray = false;\n            clone = src && Array.isArray(src) ? src : [];\n          } else {\n            clone = src && isPlainObject(src) ? src : {};\n          }\n\n          // Never move original objects, clone them\n          target[name] = fnMerge(deep, arguments[1], clone, copy);\n\n          // Don't bring in undefined values\n        } else if (copy !== skipToken) {\n          target[name] = copy;\n        }\n      }\n    }\n  }\n\n  // Return the modified object\n  return target;\n};\nexport default fnMerge;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport _merge from \"./_merge.js\";\n/**\n * Performs object extension by merging source objects into a target object. Generates a shallow copy.\n *\n * If during merging a key in the target object exists it is overwritten with the source object's value.\n * Usage is the same as <code>jQuery.extend(...)</code>.\n * Values that are <code>undefined</code> are ignored.\n *\n * As alternative you may also use <code>Object.assign</code>, but note that <code>Object.assign</code>\n * only copies enumerable and own properties and doesn't copy properties on the prototype and non-enumerable\n * properties. Also, values that are <code>undefined</code> are NOT ignored.\n *\n * For deep copies, you may use {@link module:sap/base/util/deepExtend sap/base/util/deepExtend}.\n *\n * @example\n * var oResult = extend({}, {\n *   prop1: {\n *     prop1a: \"1a\"\n *   }\n * }, {\n *   prop2: {\n *     prop2a: \"2a\"\n *   }\n * }, {\n *   prop1: {\n *      prop1b: \"1b\"\n *   }\n * }, {\n *   prop2: undefined\n * });\n *\n *\n * console.log(oResult);\n * {\n *   \"prop1\": {\n *     \"prop1b\": \"1b\"\n *   },\n *   \"prop2\": {\n *     \"prop2a\": \"2a\"\n *   }\n * }\n *\n * @function\n * @alias module:sap/base/util/extend\n * @param {object} target The object that will receive new properties\n * @param {...object} [source] One or more objects which get merged into the target object\n * @return {object} the target object which is the result of the merge\n * @public\n * @since 1.71\n */\nvar fnExtend = function () {\n  var args = [false, true];\n  args.push.apply(args, arguments);\n  return _merge.apply(null, args);\n};\nexport default fnExtend;", "import { getLocaleData } from \"@ui5/webcomponents-base/dist/asset-registries/LocaleData.js\";\n\nconst loadResource = (moduleName: string) => {\n\tconst moduleFormat = moduleName.match(/sap\\/ui\\/core\\/cldr\\/(\\w+)\\.json/);\n\tif (!moduleFormat) {\n\t\tthrow new Error(`Unknown module \"${moduleName}\"`);\n\t}\n\n\tconst localeId = moduleFormat[1];\n\treturn getLocaleData(localeId);\n};\n\nconst LoaderExtensions = {\n\tloadResource,\n};\n\nexport default LoaderExtensions;\n", "/**\n * The <code>CalendarWeekNumbering</code> enum defines how to calculate calendar weeks. Each\n * value defines:\n * <ul>\n * <li>The first day of the week,</li>\n * <li>the first week of the year.</li>\n * </ul>\n *\n * @enum {string}\n * @public\n * @alias module:sap/base/i18n/date/CalendarWeekNumbering\n * @since 1.120\n */ /*!\n     * OpenUI5\n     * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n     * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n     */\n\n// Provides type module:sap/base/i18n/date/CalendarWeekNumbering.\n\nvar CalendarWeekNumbering = {\n  /**\n   * The default calendar week numbering:\n   *\n   * The framework determines the week numbering scheme; currently it is derived from the\n   * active format locale. Future versions of UI5 might select a different week numbering\n   * scheme.\n   *\n   * @public\n   */\n  Default: \"Default\",\n  /**\n   * Official calendar week numbering in most of Europe (ISO 8601 standard):\n   * <ul>\n   * <li>Monday is first day of the week,\n   * <li>the week containing January 4th is first week of the year.\n   * </ul>\n   *\n   * @public\n   */\n  ISO_8601: \"ISO_8601\",\n  /**\n   * Official calendar week numbering in much of the Middle East (Middle Eastern calendar):\n   * <ul>\n   * <li>Saturday is first day of the week,\n   * <li>the week containing January 1st is first week of the year.\n   * </ul>\n   *\n   * @public\n   */\n  MiddleEastern: \"MiddleEastern\",\n  /**\n   * Official calendar week numbering in the United States, Canada, Brazil, Israel, Japan, and\n   * other countries (Western traditional calendar):\n   * <ul>\n   * <li>Sunday is first day of the week,\n   * <li>the week containing January 1st is first week of the year.\n   * </ul>\n   *\n   * @public\n   */\n  WesternTraditional: \"WesternTraditional\"\n};\n\n/**\n * Returns an object containing the week configuration values for the given calendar week\n * numbering algorithm.\n *\n * @param {module:sap/base/i18n/date/CalendarWeekNumbering} [sCalendarWeekNumbering=Default]\n *   The calendar week numbering algorithm\n * @returns {{firstDayOfWeek: 0|1|2|3|4|5|6, minimalDaysInFirstWeek: 1|2|3|4|5|6|7}|undefined}\n *   The week configuration values or <code>undefined</code> if the given calendar week\n *   numbering algorithm is \"Default\"\n *\n * @function\n * @name module:sap/base/i18n/date/CalendarWeekNumbering.getWeekConfigurationValues\n * @private\n */\nObject.defineProperty(CalendarWeekNumbering, \"getWeekConfigurationValues\", {\n  // configurable : false,\n  // enumerable : false,\n  value: function (sCalendarWeekNumbering) {\n    switch (sCalendarWeekNumbering) {\n      case CalendarWeekNumbering.ISO_8601:\n        return {\n          firstDayOfWeek: 1,\n          minimalDaysInFirstWeek: 4\n        };\n      case CalendarWeekNumbering.MiddleEastern:\n        return {\n          firstDayOfWeek: 6,\n          minimalDaysInFirstWeek: 1\n        };\n      case CalendarWeekNumbering.WesternTraditional:\n        return {\n          firstDayOfWeek: 0,\n          minimalDaysInFirstWeek: 1\n        };\n      default:\n        return undefined;\n    }\n  }\n  // writable : false\n});\nexport default CalendarWeekNumbering;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n// Provides type sap.ui.core.date.CalendarWeekNumbering.\nimport DataType from \"../../base/DataType.js\";\nimport CalendarWeekNumbering from \"../../../base/i18n/date/CalendarWeekNumbering.js\";\n/**\n * The <code>CalendarWeekNumbering</code> enum defines how to calculate calendar weeks. Each\n * value defines:\n * <ul>\n * <li>The first day of the week,</li>\n * <li>the first week of the year.</li>\n * </ul>\n *\n * @enum {string}\n * @public\n * @since 1.108.0\n * @deprecated As of Version 1.120. Please use {@link module:sap/base/18n/date/CalendarWeekNumbering} instead.\n * @name sap.ui.core.date.CalendarWeekNumbering\n * @borrows module:sap/base/i18n/date/CalendarWeekNumbering.Default as Default\n * @borrows module:sap/base/i18n/date/CalendarWeekNumbering.ISO_8601 as ISO_8601\n * @borrows module:sap/base/i18n/date/CalendarWeekNumbering.MiddleEastern as MiddleEastern\n * @borrows module:sap/base/i18n/date/CalendarWeekNumbering.WesternTraditional as WesternTraditional\n * @borrows module:sap/base/i18n/date/CalendarWeekNumbering.getWeekConfigurationValues as getWeekConfigurationValues\n */\n\nDataType.registerEnum(\"sap.ui.core.date.CalendarWeekNumbering\", CalendarWeekNumbering);\nexport default CalendarWeekNumbering;", "import Core from \"./Core.js\"; /*!\n                              * OpenUI5\n                              * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n                              * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n                              */\n//Provides the locale object sap.ui.core.LocaleData\nimport CalendarType from \"./CalendarType.js\";\nimport Locale from \"./Locale.js\";\nimport assert from \"../../base/assert.js\";\nimport LanguageTag from \"../../base/i18n/LanguageTag.js\";\nimport Localization from \"../../base/i18n/Localization.js\";\nimport extend from \"../../base/util/extend.js\";\nimport LoaderExtensions from \"../../base/util/LoaderExtensions.js\";\nimport BaseObject from \"../base/Object.js\";\nimport Configuration from \"./Configuration.js\";\nimport CalendarWeekNumbering from \"./date/CalendarWeekNumbering.js\";\nvar rCIgnoreCase = /c/i,\n  rEIgnoreCase = /e/i,\n  /*\n  * With the upgrade of the CLDR to version 41 some unit keys have changed.\n  * For compatibility reasons this map is used for formatting units.\n  * It maps a legacy unit key to its renamed key.\n  */\n  mLegacyUnit2CurrentUnit = {\n    \"acceleration-meter-per-second-squared\": \"acceleration-meter-per-square-second\",\n    \"concentr-milligram-per-deciliter\": \"concentr-milligram-ofglucose-per-deciliter\",\n    \"concentr-part-per-million\": \"concentr-permillion\",\n    \"consumption-liter-per-100kilometers\": \"consumption-liter-per-100-kilometer\",\n    \"mass-metric-ton\": \"mass-tonne\",\n    \"pressure-millimeter-of-mercury\": \"pressure-millimeter-ofhg\",\n    \"pressure-pound-per-square-inch\": \"pressure-pound-force-per-square-inch\",\n    \"pressure-inch-hg\": \"pressure-inch-ofhg\",\n    \"torque-pound-foot\": \"torque-pound-force-foot\"\n  },\n  rNumberInScientificNotation = /^([+-]?)((\\d+)(?:\\.(\\d+))?)[eE]([+-]?\\d+)$/,\n  rTrailingZeroes = /0+$/;\nconst rFallbackPatternTextParts = /(.*)?\\{[0|1]}(.*)?\\{[0|1]}(.*)?/;\nconst aSupportedWidths = [\"narrow\", \"abbreviated\", \"wide\"];\n\n/**\n * Creates an instance of LocaleData for the given locale.\n *\n * @class Provides access to locale-specific data, such as, date formats, number formats, and currencies.\n *\n * @param {sap.ui.core.Locale} oLocale the locale\n *\n * @extends sap.ui.base.Object\n * @author SAP SE\n * @version 1.120.5\n * @public\n * @alias sap.ui.core.LocaleData\n */\nvar LocaleData = BaseObject.extend(\"sap.ui.core.LocaleData\", /** @lends sap.ui.core.LocaleData.prototype */{\n  constructor: function (oLocale) {\n    BaseObject.apply(this);\n    this.oLocale = Locale._getCoreLocale(oLocale);\n    var oDataLoaded = getData(this.oLocale);\n    this.mData = oDataLoaded.mData;\n    this.sCLDRLocaleId = oDataLoaded.sCLDRLocaleId;\n  },\n  /**\n   * @private\n   * @ui5-restricted UI5 Web Components\n   */\n  _get: function () {\n    return this._getDeep(this.mData, arguments);\n  },\n  /**\n   * Retrieves merged object if overlay data is available\n   * @private\n   * @return {object} merged object\n   */\n  _getMerged: function () {\n    return this._get.apply(this, arguments);\n  },\n  /**\n   * Get month names in width \"narrow\", \"abbreviated\" or \"wide\". Result may contain alternative month names.\n   *\n   * @param {\"narrow\"|\"abbreviated\"|\"wide\"} sWidth\n   *   The required width for the month names\n   * @param {sap.ui.core.CalendarType} [sCalendarType]\n   *   The type of calendar; defaults to the calendar type either set in configuration or calculated from locale\n   * @returns {array}\n   *   The array of month names; if no alternative exists the entry for the month is its name as a string; if\n   *   there are alternative month names the entry for the month is an array of strings with the alternative names\n   * @private\n   */\n  _getMonthsWithAlternatives: function (sWidth, sCalendarType) {\n    return this._get(getCLDRCalendarName(sCalendarType), \"months\", \"format\", sWidth);\n  },\n  /**\n   * Get standalone month names in width \"narrow\", \"abbreviated\" or \"wide\". Result may contain alternative month\n   * names.\n   *\n   * @param {\"narrow\"|\"abbreviated\"|\"wide\"} sWidth\n   *   The required width for the month names\n   * @param {sap.ui.core.CalendarType} [sCalendarType]\n   *   The type of calendar; defaults to the calendar type either set in configuration or calculated from locale\n   * @returns {array}\n   *   The array of month names; if no alternative exists the entry for the month is its name as a string; if\n   *   there are alternative month names the entry for the month is an array of strings with the alternative names\n   * @private\n   */\n  _getMonthsStandAloneWithAlternatives: function (sWidth, sCalendarType) {\n    return this._get(getCLDRCalendarName(sCalendarType), \"months\", \"stand-alone\", sWidth);\n  },\n  _getDeep: function (oObject, aPropertyNames) {\n    var oResult = oObject;\n    for (var i = 0; i < aPropertyNames.length; i++) {\n      oResult = oResult[aPropertyNames[i]];\n      if (oResult === undefined) {\n        break;\n      }\n    }\n    return oResult;\n  },\n  /**\n   * Get orientation (left-to-right or right-to-left).\n   *\n   * @returns {string} character orientation for this locale\n   * @public\n   */\n  getOrientation: function () {\n    return this._get(\"orientation\");\n  },\n  /**\n   * Get a display name for the language of the Locale of this LocaleData, using\n   * the CLDR display names for languages.\n   *\n   * The lookup logic works as follows:\n   * 1. language code and region is checked (e.g. \"en-GB\")\n   * 2. If not found: language code and script is checked (e.g. \"zh-Hant\")\n   * 3. If not found language code is checked (e.g. \"en\")\n   * 4. If it is then still not found <code>undefined</code> is returned.\n   *\n   * @returns {string} language name, e.g. \"English\", \"British English\", \"American English\"\n   *  or <code>undefined</code> if language cannot be found\n   * @private\n   * @ui5-restricted sap.ushell\n   */\n  getCurrentLanguageName: function () {\n    return this.getLanguageName(this.oLocale.toString());\n  },\n  /**\n   * Gets the locale-specific language name for the given language tag.\n   *\n   * The languages returned by {@link #getLanguages} from the CLDR raw data do not contain the\n   * language names if they can be derived from the language and the script or the territory.\n   * If the map of languages contains no entry for the given language tag, derive the language\n   * name from the used script or region.\n   *\n   * @param {string} sLanguageTag\n   *   The language tag, for example \"en\", \"en-US\", \"en_US\", \"zh-Hant\", or \"zh_Hant\"\n   * @returns {string|undefined}\n   *   The language name, or <code>undefined</code> if the name cannot be determined\n   * @throws {TypeError} When the given language tag isn't valid\n   *\n   * @public\n   */\n  getLanguageName: function (sLanguageTag) {\n    const oLanguageTag = new LanguageTag(sLanguageTag);\n    let sLanguage = Localization.getModernLanguage(oLanguageTag.language);\n    let sScript = oLanguageTag.script;\n    // special case for \"sr_Latn\" language: \"sh\" should then be used\n    if (sLanguage === \"sr\" && sScript === \"Latn\") {\n      sLanguage = \"sh\";\n      sScript = null;\n    }\n    const sRegion = oLanguageTag.region;\n    const oLanguages = this._get(\"languages\");\n    const sLanguageText = oLanguages[sLanguage];\n    if (!sScript && !sRegion || !sLanguageText) {\n      return sLanguageText;\n    }\n    const sResult = oLanguages[sLanguage + \"_\" + sRegion] || oLanguages[sLanguage + \"_\" + sScript];\n    if (sResult) {\n      return sResult;\n    }\n    if (sScript) {\n      const sScriptText = this._get(\"scripts\")[sScript];\n      if (sScriptText) {\n        return sLanguageText + \" (\" + sScriptText + \")\";\n      }\n    }\n    if (sRegion) {\n      const sRegionText = this._get(\"territories\")[sRegion];\n      if (sRegionText) {\n        return sLanguageText + \" (\" + sRegionText + \")\";\n      }\n    }\n    return sLanguageText;\n  },\n  /**\n   * Gets locale-specific language names, as available in the CLDR raw data.\n   *\n   * To avoid redundancies, with CLDR version 43 only language names are contained which cannot be derived from\n   * the language and the script or the territory. If a language tag is not contained in the map, use\n   * {@link #getLanguageName} to get the derived locale-specific language name for that language tag.\n   *\n   * @returns {Object<string, string>} Maps a language tag to the locale-specific language name\n   *\n   * @public\n   */\n  getLanguages: function () {\n    const oLanguages = this._get(\"languages\");\n    /** @deprecated As of version 1.120.0 */\n    [\"ar_001\", \"de_AT\", \"de_CH\", \"en_AU\", \"en_CA\", \"en_GB\", \"en_US\", \"es_419\", \"es_ES\", \"es_MX\", \"fa_AF\", \"fr_CA\", \"fr_CH\", \"nds_NL\", \"nl_BE\", \"pt_BR\", \"pt_PT\", \"ro_MD\", \"sw_CD\", \"zh_Hans\", \"zh_Hant\"].forEach(sLanguageTag => {\n      // for compatibility reasons, ensure that for these language tags the corresponding language names are\n      // available\n      if (!oLanguages[sLanguageTag]) {\n        oLanguages[sLanguageTag] = this.getLanguageName(sLanguageTag);\n      }\n    });\n    return oLanguages;\n  },\n  /**\n   * Gets locale-specific script names, as available in the CLDR raw data.\n   *\n   * To avoid redundancies, with CLDR version 43 only scripts are contained for which the language-specific name\n   * is different from the script key. If a script key is not contained in the map, use the script key as script\n   * name.\n   *\n   * @returns {Object<string, string>} Maps a script key to the locale-specific script name\n   *\n   * @public\n   */\n  getScripts: function () {\n    return this._get(\"scripts\");\n  },\n  /**\n   * Gets locale-specific territory names, as available in the CLDR raw data.\n   *\n   * To avoid redundancies, with CLDR version 43 only territories are contained for which the language-specific\n   * name is different from the territory key.\n   *\n   * @returns {Object<string, string>} Maps a territory key to the locale-specific territory name\n   *\n   * @public\n   */\n  getTerritories: function () {\n    return this._get(\"territories\");\n  },\n  /**\n   * Get month names in width \"narrow\", \"abbreviated\" or \"wide\".\n   *\n   * @param {\"narrow\"|\"abbreviated\"|\"wide\"} sWidth\n   *   The required width for the month names\n   * @param {sap.ui.core.CalendarType} [sCalendarType]\n   *   The type of calendar; defaults to the calendar type either set in configuration or calculated from locale\n   * @returns {string[]}\n   *   The array of month names\n   * @public\n   */\n  getMonths: function (sWidth, sCalendarType) {\n    assert(aSupportedWidths.includes(sWidth), \"sWidth must be narrow, abbreviated or wide\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"months\", \"format\", sWidth).map(vMonthName => {\n      return Array.isArray(vMonthName) ? vMonthName[0] : vMonthName;\n    });\n  },\n  /**\n   * Get standalone month names in width \"narrow\", \"abbreviated\" or \"wide\".\n   *\n   * @param {\"narrow\"|\"abbreviated\"|\"wide\"} sWidth\n   *   The required width for the month names\n   * @param {sap.ui.core.CalendarType} [sCalendarType]\n   *   The type of calendar; defaults to the calendar type either set in configuration or calculated from locale\n   * @returns {string[]}\n   *   The array of standalone month names\n   * @public\n   */\n  getMonthsStandAlone: function (sWidth, sCalendarType) {\n    assert(aSupportedWidths.includes(sWidth), \"sWidth must be narrow, abbreviated or wide\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"months\", \"stand-alone\", sWidth).map(vMonthName => {\n      return Array.isArray(vMonthName) ? vMonthName[0] : vMonthName;\n    });\n  },\n  /**\n   * Get day names in width \"narrow\", \"abbreviated\" or \"wide\".\n   *\n   * @param {string} sWidth the required width for the day names\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {array} array of day names (starting with Sunday)\n   * @public\n   */\n  getDays: function (sWidth, sCalendarType) {\n    assert(sWidth == \"narrow\" || sWidth == \"abbreviated\" || sWidth == \"wide\" || sWidth == \"short\", \"sWidth must be narrow, abbreviate, wide or short\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"days\", \"format\", sWidth);\n  },\n  /**\n   * Get standalone day names in width \"narrow\", \"abbreviated\" or \"wide\".\n   *\n   * @param {string} sWidth the required width for the day names\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {array} array of day names (starting with Sunday)\n   * @public\n   */\n  getDaysStandAlone: function (sWidth, sCalendarType) {\n    assert(sWidth == \"narrow\" || sWidth == \"abbreviated\" || sWidth == \"wide\" || sWidth == \"short\", \"sWidth must be narrow, abbreviated, wide or short\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"days\", \"stand-alone\", sWidth);\n  },\n  /**\n   * Get quarter names in width \"narrow\", \"abbreviated\" or \"wide\".\n   *\n   * @param {string} sWidth the required width for the quarter names\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {array} array of quarters\n   * @public\n   */\n  getQuarters: function (sWidth, sCalendarType) {\n    assert(sWidth == \"narrow\" || sWidth == \"abbreviated\" || sWidth == \"wide\", \"sWidth must be narrow, abbreviated or wide\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"quarters\", \"format\", sWidth);\n  },\n  /**\n   * Get standalone quarter names in width \"narrow\", \"abbreviated\" or \"wide\".\n   *\n   * @param {string} sWidth the required width for the quarter names\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {array} array of quarters\n   * @public\n   */\n  getQuartersStandAlone: function (sWidth, sCalendarType) {\n    assert(sWidth == \"narrow\" || sWidth == \"abbreviated\" || sWidth == \"wide\", \"sWidth must be narrow, abbreviated or wide\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"quarters\", \"stand-alone\", sWidth);\n  },\n  /**\n   * Get day periods in width \"narrow\", \"abbreviated\" or \"wide\".\n   *\n   * @param {string} sWidth the required width for the day period names\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {array} array of day periods (AM, PM)\n   * @public\n   */\n  getDayPeriods: function (sWidth, sCalendarType) {\n    assert(sWidth == \"narrow\" || sWidth == \"abbreviated\" || sWidth == \"wide\", \"sWidth must be narrow, abbreviated or wide\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"dayPeriods\", \"format\", sWidth);\n  },\n  /**\n   * Get standalone day periods in width \"narrow\", \"abbreviated\" or \"wide\".\n   *\n   * @param {string} sWidth the required width for the day period names\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {array} array of day periods (AM, PM)\n   * @public\n   */\n  getDayPeriodsStandAlone: function (sWidth, sCalendarType) {\n    assert(sWidth == \"narrow\" || sWidth == \"abbreviated\" || sWidth == \"wide\", \"sWidth must be narrow, abbreviated or wide\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"dayPeriods\", \"stand-alone\", sWidth);\n  },\n  /**\n   * Get date pattern in format \"short\", \"medium\", \"long\" or \"full\".\n   *\n   * @param {string} sStyle the required style for the date pattern\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {string} the selected date pattern\n   * @public\n   */\n  getDatePattern: function (sStyle, sCalendarType) {\n    assert(sStyle == \"short\" || sStyle == \"medium\" || sStyle == \"long\" || sStyle == \"full\", \"sStyle must be short, medium, long or full\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"dateFormats\", sStyle);\n  },\n  /**\n   * Get flexible day periods in style format \"abbreviated\", \"narrow\" or \"wide\".\n   *\n   * @param {string} sWidth\n   *   The required width for the flexible day period names\n   * @param {sap.ui.core.CalendarType} [sCalendarType]\n   *   The type of calendar. If it's not set, it falls back to the calendar type either set in\n   *   configuration or calculated from locale.\n   * @returns {object|undefined}\n   *   Object of flexible day periods or 'undefined' if none can be found\n   *\n   * @example <caption>Output</caption>\n   * {\n   *   \"midnight\": \"midnight\",\n   *   \"noon\": \"noon\",\n   *   \"morning1\": \"in the morning\",\n   *   \"afternoon1\": \"in the afternoon\",\n   *   \"evening1\": \"in the evening\",\n   *   \"night1\": \"at night\"\n   * }\n   *\n   * @private\n   */\n  getFlexibleDayPeriods: function (sWidth, sCalendarType) {\n    return this._get(getCLDRCalendarName(sCalendarType), \"flexibleDayPeriods\", \"format\", sWidth);\n  },\n  /**\n   * Get flexible day periods in style format \"abbreviated\", \"narrow\" or \"wide\" for case\n   * \"stand-alone\".\n   *\n   * @param {string} sWidth\n   *   The required width for the flexible day period names\n   * @param {sap.ui.core.CalendarType} [sCalendarType]\n   *   The type of calendar. If it's not set, it falls back to the calendar type either set in\n   *   configuration or calculated from locale.\n   * @returns {object|undefined}\n   *   Object of flexible day periods or 'undefined' if none can be found\n   *\n   * @example <caption>Output</caption>\n   * {\n   *   \"midnight\": \"midnight\",\n   *   \"noon\": \"noon\",\n   *   \"morning1\": \"in the morning\",\n   *   \"afternoon1\": \"in the afternoon\",\n   *   \"evening1\": \"in the evening\",\n   *   \"night1\": \"at night\"\n   * }\n   *\n   * @private\n   */\n  getFlexibleDayPeriodsStandAlone: function (sWidth, sCalendarType) {\n    return this._get(getCLDRCalendarName(sCalendarType), \"flexibleDayPeriods\", \"stand-alone\", sWidth);\n  },\n  /**\n   * Get flexible day period of time or a point in time\n   *\n   * @param {int} iHour Hour\n   * @param {int} iMinute Minute\n   * @returns {string} Key of flexible day period of time e.g. <code>afternoon2</code>\n   *\n   * @private\n   */\n  getFlexibleDayPeriodOfTime: function (iHour, iMinute) {\n    var iAbsoluteMinutes, oDayPeriodRules, sPeriodMatch;\n    iAbsoluteMinutes = (iHour * 60 + iMinute) % 1440;\n    oDayPeriodRules = this._get(\"dayPeriodRules\");\n    function parseToAbsoluteMinutes(sValue) {\n      var aSplit = sValue.split(\":\"),\n        sHour = aSplit[0],\n        sMinute = aSplit[1];\n      return parseInt(sHour) * 60 + parseInt(sMinute);\n    }\n\n    // unfortunately there are some overlaps:\n    // e.g. en.json\n    // \"afternoon1\": {\n    //   \"_before\": \"18:00\",\n    //   \"_from\": \"12:00\"\n    // },\n    // \"noon\": {\n    //   \"_at\": \"12:00\"\n    // }\n    // -> 12:00 can be either \"noon\" or \"afternoon1\" because \"_from\" is inclusive\n    // therefore first check all exact periods\n\n    sPeriodMatch = Object.keys(oDayPeriodRules).find(function (sDayPeriodRule) {\n      var oDayPeriodRule = oDayPeriodRules[sDayPeriodRule];\n      return oDayPeriodRule[\"_at\"] && parseToAbsoluteMinutes(oDayPeriodRule[\"_at\"]) === iAbsoluteMinutes;\n    });\n    if (sPeriodMatch) {\n      return sPeriodMatch;\n    }\n    return Object.keys(oDayPeriodRules).find(function (sDayPeriodRule) {\n      var iEndValue,\n        aIntervals,\n        iStartValue,\n        oDayPeriodRule = oDayPeriodRules[sDayPeriodRule];\n      if (oDayPeriodRule[\"_at\"]) {\n        return false;\n      }\n      iStartValue = parseToAbsoluteMinutes(oDayPeriodRule[\"_from\"]);\n      iEndValue = parseToAbsoluteMinutes(oDayPeriodRule[\"_before\"]);\n\n      // periods which span across days need to be split into individual intervals\n      // e.g. \"22:00 - 03:00\" becomes \"22:00 - 24:00\" and \"00:00 - 03:00\"\n      if (iStartValue > iEndValue) {\n        aIntervals = [{\n          start: iStartValue,\n          end: 1440\n        },\n        // 24 * 60\n        {\n          start: 0,\n          end: iEndValue\n        }];\n      } else {\n        aIntervals = [{\n          start: iStartValue,\n          end: iEndValue\n        }];\n      }\n      return aIntervals.some(function (oInterval) {\n        return oInterval.start <= iAbsoluteMinutes && oInterval.end > iAbsoluteMinutes;\n      });\n    });\n  },\n  /**\n   * Get time pattern in style \"short\", \"medium\", \"long\" or \"full\".\n   *\n   * @param {string} sStyle the required style for the date pattern\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {string} the selected time pattern\n   * @public\n   */\n  getTimePattern: function (sStyle, sCalendarType) {\n    assert(sStyle == \"short\" || sStyle == \"medium\" || sStyle == \"long\" || sStyle == \"full\", \"sStyle must be short, medium, long or full\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"timeFormats\", sStyle);\n  },\n  /**\n   * Get datetime pattern in style \"short\", \"medium\", \"long\" or \"full\".\n   *\n   * @param {string} sStyle the required style for the datetime pattern\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {string} the selected datetime pattern\n   * @public\n   */\n  getDateTimePattern: function (sStyle, sCalendarType) {\n    assert(sStyle == \"short\" || sStyle == \"medium\" || sStyle == \"long\" || sStyle == \"full\", \"sStyle must be short, medium, long or full\");\n    return this._get(getCLDRCalendarName(sCalendarType), \"dateTimeFormats\", sStyle);\n  },\n  /**\n   * Get combined datetime pattern with given date and time style.\n   *\n   * @param {string} sDateStyle the required style for the date part\n   * @param {string} sTimeStyle the required style for the time part\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {string} the combined datetime pattern\n   * @public\n   */\n  getCombinedDateTimePattern: function (sDateStyle, sTimeStyle, sCalendarType) {\n    assert(sDateStyle == \"short\" || sDateStyle == \"medium\" || sDateStyle == \"long\" || sDateStyle == \"full\", \"sStyle must be short, medium, long or full\");\n    assert(sTimeStyle == \"short\" || sTimeStyle == \"medium\" || sTimeStyle == \"long\" || sTimeStyle == \"full\", \"sStyle must be short, medium, long or full\");\n    var sDateTimePattern = this.getDateTimePattern(sDateStyle, sCalendarType),\n      sDatePattern = this.getDatePattern(sDateStyle, sCalendarType),\n      sTimePattern = this.getTimePattern(sTimeStyle, sCalendarType);\n    return sDateTimePattern.replace(\"{0}\", sTimePattern).replace(\"{1}\", sDatePattern);\n  },\n  /**\n   * Get combined pattern with datetime and timezone for the given date and time style.\n   *\n   * @example\n   * // locale de\n   * oLocaleData.getCombinedDateTimeWithTimezonePattern(\"long\", \"long\");\n   * // \"d. MMMM y 'um' HH:mm:ss z VV\"\n   *\n   * // locale en_GB\n   * oLocaleData.getCombinedDateTimeWithTimezonePattern(\"long\", \"long\");\n   * // \"d MMMM y 'at' HH:mm:ss z VV\"\n   *\n   * @param {string} sDateStyle The required style for the date part\n   * @param {string} sTimeStyle The required style for the time part\n   * @param {sap.ui.core.CalendarType} [sCalendarType] The type of calendar. If it's not set,\n   *   it falls back to the calendar type either set in the configuration or calculated from\n   *   the locale.\n   * @returns {string} the combined pattern with datetime and timezone\n   * @private\n   * @ui5-restricted sap.ui.core.format.DateFormat\n   * @since 1.101\n   */\n  getCombinedDateTimeWithTimezonePattern: function (sDateStyle, sTimeStyle, sCalendarType) {\n    return this.applyTimezonePattern(this.getCombinedDateTimePattern(sDateStyle, sTimeStyle, sCalendarType));\n  },\n  /**\n   * Applies the timezone to the pattern\n   *\n   * @param {string} sPattern pattern, e.g. <code>y</code>\n   * @returns {string} applied timezone, e.g. <code>y VV</code>\n   * @private\n   * @ui5-restricted sap.ui.core.format.DateFormat\n   * @since 1.101\n   */\n  applyTimezonePattern: function (sPattern) {\n    var aPatterns = [sPattern];\n    var aMissingTokens = [{\n      group: \"Timezone\",\n      length: 2,\n      field: \"zone\",\n      symbol: \"V\"\n    }];\n    this._appendItems(aPatterns, aMissingTokens);\n    return aPatterns[0];\n  },\n  /**\n   * Retrieves all timezone translations.\n   *\n   * E.g. for locale \"en\"\n   * <pre>\n   * {\n   *  \"America/New_York\": \"Americas, New York\"\n   *  ...\n   * }\n   * </pre>\n   *\n   * @return {Object<string, string>} the mapping, with 'key' being the IANA timezone ID, and\n   * 'value' being the translation.\n   * @ui5-restricted sap.ui.core.format.DateFormat, sap.ui.export, sap.ushell\n   * @private\n   */\n  getTimezoneTranslations: function () {\n    var sLocale = this.oLocale.toString();\n    var mTranslations = LocaleData._mTimezoneTranslations[sLocale];\n    if (!mTranslations) {\n      LocaleData._mTimezoneTranslations[sLocale] = mTranslations = _resolveTimezoneTranslationStructure(this._get(\"timezoneNames\"));\n    }\n\n    // retrieve a copy such that the original object won't be modified.\n    return Object.assign({}, mTranslations);\n  },\n  /**\n   * Get custom datetime pattern for a given skeleton format.\n   *\n   * The format string does contain pattern symbols (e.g. \"yMMMd\" or \"Hms\") and will be converted into the pattern in the used\n   * locale, which matches the wanted symbols best. The symbols must be in canonical order, that is:\n   * Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D),\n   * Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)\n   *\n   * See https://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems\n   *\n   * @param {string} sSkeleton the wanted skeleton format for the datetime pattern\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {string} the best matching datetime pattern\n   * @since 1.34\n   * @public\n   */\n  getCustomDateTimePattern: function (sSkeleton, sCalendarType) {\n    var oAvailableFormats = this._get(getCLDRCalendarName(sCalendarType), \"dateTimeFormats\", \"availableFormats\");\n    return this._getFormatPattern(sSkeleton, oAvailableFormats, sCalendarType);\n  },\n  /**\n   * Returns the interval format with the given Id (see CLDR documentation for valid Ids)\n   * or the fallback format if no interval format with that Id is known.\n   *\n   * The empty Id (\"\") might be used to retrieve the interval format fallback.\n   *\n   * @param {string} sId Id of the interval format, e.g. \"d-d\"\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {string} interval format string with placeholders {0} and {1}\n   * @public\n   * @since 1.17.0\n   */\n  getIntervalPattern: function (sId, sCalendarType) {\n    var oIntervalFormats = this._get(getCLDRCalendarName(sCalendarType), \"dateTimeFormats\", \"intervalFormats\"),\n      aIdParts,\n      sIntervalId,\n      sDifference,\n      oInterval,\n      sPattern;\n    if (sId) {\n      aIdParts = sId.split(\"-\");\n      sIntervalId = aIdParts[0];\n      sDifference = aIdParts[1];\n      oInterval = oIntervalFormats[sIntervalId];\n      if (oInterval) {\n        sPattern = oInterval[sDifference];\n        if (sPattern) {\n          return sPattern;\n        }\n      }\n    }\n    return oIntervalFormats.intervalFormatFallback;\n  },\n  /**\n   * Get combined interval pattern using a given pattern and the fallback interval pattern.\n   *\n   * If a skeleton based pattern is not available or not wanted, this method can be used to create an interval\n   * pattern based on a given pattern, using the fallback interval pattern.\n   *\n   * @param {string} sPattern the single date pattern to use within the interval pattern\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {string} the calculated interval pattern\n   * @since 1.46\n   * @public\n   */\n  getCombinedIntervalPattern: function (sPattern, sCalendarType) {\n    const oIntervalFormats = this._get(getCLDRCalendarName(sCalendarType), \"dateTimeFormats\", \"intervalFormats\");\n    const [/*sAll*/, sTextBefore, sTextBetween, sTextAfter] = rFallbackPatternTextParts.exec(oIntervalFormats.intervalFormatFallback);\n\n    // text part of intervalFormatFallback is not escaped\n    return LocaleData._escapeIfNeeded(sTextBefore) + sPattern + LocaleData._escapeIfNeeded(sTextBetween) + sPattern + LocaleData._escapeIfNeeded(sTextAfter);\n  },\n  /**\n   * Get interval pattern for a given skeleton format.\n   *\n   * The format string does contain pattern symbols (e.g. \"yMMMd\" or \"Hms\") and will be converted into the pattern in the used\n   * locale, which matches the wanted symbols best. The symbols must be in canonical order, that is:\n   * Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D),\n   * Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)\n   *\n   * See https://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems\n   *\n   * @param {string} sSkeleton the wanted skeleton format for the datetime pattern\n   * @param {object|string} vGreatestDiff is either a string which represents the symbol matching the greatest difference in the two dates to format or an object which contains key-value pairs.\n   *  The value is always true. The key is one of the date field symbol groups whose value are different between the two dates. The key can only be set with 'Year', 'Quarter', 'Month', 'Week',\n   *  'Day', 'DayPeriod', 'Hour', 'Minute', or 'Second'.\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.\n   * @returns {string|string[]} the best matching interval pattern if interval difference is given otherwise an array with all possible interval patterns which match the given skeleton format\n   * @since 1.46\n   * @public\n   */\n  getCustomIntervalPattern: function (sSkeleton, vGreatestDiff, sCalendarType) {\n    var oAvailableFormats = this._get(getCLDRCalendarName(sCalendarType), \"dateTimeFormats\", \"intervalFormats\");\n    return this._getFormatPattern(sSkeleton, oAvailableFormats, sCalendarType, vGreatestDiff);\n  },\n  /* Helper functions for skeleton pattern processing */\n  _getFormatPattern: function (sSkeleton, oAvailableFormats, sCalendarType, vDiff) {\n    var vPattern, aPatterns, oIntervalFormats;\n    if (!vDiff) {\n      // the call is from getCustomDateTimePattern\n      vPattern = oAvailableFormats[sSkeleton];\n    } else if (typeof vDiff === \"string\") {\n      // vDiff is given as a symbol\n      if (vDiff == \"j\" || vDiff == \"J\") {\n        vDiff = this.getPreferredHourSymbol();\n      }\n      oIntervalFormats = oAvailableFormats[sSkeleton];\n      vPattern = oIntervalFormats && oIntervalFormats[vDiff];\n    }\n    if (vPattern) {\n      if (typeof vPattern === \"object\") {\n        aPatterns = Object.keys(vPattern).map(function (sKey) {\n          return vPattern[sKey];\n        });\n      } else {\n        return vPattern;\n      }\n    }\n    if (!aPatterns) {\n      aPatterns = this._createFormatPattern(sSkeleton, oAvailableFormats, sCalendarType, vDiff);\n    }\n    if (aPatterns && aPatterns.length === 1) {\n      return aPatterns[0];\n    }\n    return aPatterns;\n  },\n  _createFormatPattern: function (sSkeleton, oAvailableFormats, sCalendarType, vDiff) {\n    var aTokens = this._parseSkeletonFormat(sSkeleton),\n      aPatterns,\n      oBestMatch = this._findBestMatch(aTokens, sSkeleton, oAvailableFormats),\n      oToken,\n      oAvailableDateTimeFormats,\n      oSymbol,\n      oGroup,\n      sPattern,\n      sSinglePattern,\n      sDiffSymbol,\n      sDiffGroup,\n      rMixedSkeleton = /^([GyYqQMLwWEecdD]+)([hHkKjJmszZvVOXx]+)$/,\n      bSingleDate,\n      i;\n    if (vDiff) {\n      if (typeof vDiff === \"string\") {\n        sDiffGroup = mCLDRSymbols[vDiff] ? mCLDRSymbols[vDiff].group : \"\";\n        if (sDiffGroup) {\n          // if the index of interval diff is greater than the index of the last field\n          // in the sSkeleton, which means the diff unit is smaller than all units in\n          // the skeleton, return a single date pattern which is generated using the\n          // given skeleton\n          bSingleDate = mCLDRSymbolGroups[sDiffGroup].index > aTokens[aTokens.length - 1].index;\n        }\n        sDiffSymbol = vDiff;\n      } else {\n        bSingleDate = true;\n        // Special handling of \"y\" (Year) in case patterns contains also \"G\" (Era)\n        if (aTokens[0].symbol === \"y\" && oBestMatch && oBestMatch.pattern.G) {\n          oSymbol = mCLDRSymbols[\"G\"];\n          oGroup = mCLDRSymbolGroups[oSymbol.group];\n          aTokens.splice(0, 0, {\n            symbol: \"G\",\n            group: oSymbol.group,\n            match: oSymbol.match,\n            index: oGroup.index,\n            field: oGroup.field,\n            length: 1\n          });\n        }\n\n        // Check if at least one token's group appears in the interval diff\n        // If not, a single date pattern is returned\n        for (i = aTokens.length - 1; i >= 0; i--) {\n          oToken = aTokens[i];\n          if (vDiff[oToken.group]) {\n            bSingleDate = false;\n            break;\n          }\n        }\n\n        // select the greatest diff symbol\n        for (i = 0; i < aTokens.length; i++) {\n          oToken = aTokens[i];\n          if (vDiff[oToken.group]) {\n            sDiffSymbol = oToken.symbol;\n            break;\n          }\n        }\n        // Special handling of \"a\" (Dayperiod)\n        // Find out whether dayperiod is different between the dates\n        // If yes, set the  diff symbol with 'a' Dayperiod symbol\n        if ((sDiffSymbol == \"h\" || sDiffSymbol == \"K\") && vDiff.DayPeriod) {\n          sDiffSymbol = \"a\";\n        }\n      }\n      if (bSingleDate) {\n        return [this.getCustomDateTimePattern(sSkeleton, sCalendarType)];\n      }\n\n      // Only use best match, if there are no missing tokens, as there is no possibility\n      // to append items on interval formats\n      if (oBestMatch && oBestMatch.missingTokens.length === 0) {\n        sPattern = oBestMatch.pattern[sDiffSymbol];\n        // if there is no exact match, we need to do further processing\n        if (sPattern && oBestMatch.distance > 0) {\n          sPattern = this._expandFields(sPattern, oBestMatch.patternTokens, aTokens);\n        }\n      }\n      // If no pattern could be found, get the best availableFormat for the skeleton\n      // and use the fallbackIntervalFormat to create the pattern\n      if (!sPattern) {\n        oAvailableDateTimeFormats = this._get(getCLDRCalendarName(sCalendarType), \"dateTimeFormats\", \"availableFormats\");\n        // If it is a mixed skeleton and the greatest interval on time, create a mixed pattern\n        if (rMixedSkeleton.test(sSkeleton) && \"ahHkKjJms\".indexOf(sDiffSymbol) >= 0) {\n          sPattern = this._getMixedFormatPattern(sSkeleton, oAvailableDateTimeFormats, sCalendarType, vDiff);\n        } else {\n          sSinglePattern = this._getFormatPattern(sSkeleton, oAvailableDateTimeFormats, sCalendarType);\n          sPattern = this.getCombinedIntervalPattern(sSinglePattern, sCalendarType);\n        }\n      }\n      aPatterns = [sPattern];\n    } else if (!oBestMatch) {\n      sPattern = sSkeleton;\n      aPatterns = [sPattern];\n    } else {\n      if (typeof oBestMatch.pattern === \"string\") {\n        aPatterns = [oBestMatch.pattern];\n      } else if (typeof oBestMatch.pattern === \"object\") {\n        aPatterns = [];\n        for (var sKey in oBestMatch.pattern) {\n          sPattern = oBestMatch.pattern[sKey];\n          aPatterns.push(sPattern);\n        }\n      }\n      // if there is no exact match, we need to do further processing\n      if (oBestMatch.distance > 0) {\n        if (oBestMatch.missingTokens.length > 0) {\n          // if tokens are missing create a pattern containing all, otherwise just adjust pattern\n          if (rMixedSkeleton.test(sSkeleton)) {\n            aPatterns = [this._getMixedFormatPattern(sSkeleton, oAvailableFormats, sCalendarType)];\n          } else {\n            aPatterns = this._expandFields(aPatterns, oBestMatch.patternTokens, aTokens);\n            aPatterns = this._appendItems(aPatterns, oBestMatch.missingTokens, sCalendarType);\n          }\n        } else {\n          aPatterns = this._expandFields(aPatterns, oBestMatch.patternTokens, aTokens);\n        }\n      }\n    }\n\n    // If special input token \"J\" was used, remove dayperiod from pattern\n    if (sSkeleton.indexOf(\"J\") >= 0) {\n      aPatterns.forEach(function (sPattern, iIndex) {\n        aPatterns[iIndex] = sPattern.replace(/ ?[abB](?=([^']*'[^']*')*[^']*)$/g, \"\");\n      });\n    }\n    return aPatterns;\n  },\n  _parseSkeletonFormat: function (sSkeleton) {\n    var aTokens = [],\n      oToken = {\n        index: -1\n      },\n      sSymbol,\n      oSymbol,\n      oGroup;\n    for (var i = 0; i < sSkeleton.length; i++) {\n      sSymbol = sSkeleton.charAt(i);\n      // Handle special input symbols\n      if (sSymbol == \"j\" || sSymbol == \"J\") {\n        sSymbol = this.getPreferredHourSymbol();\n      }\n      // if the symbol is the same as current token, increase the length\n      if (sSymbol == oToken.symbol) {\n        oToken.length++;\n        continue;\n      }\n      // get symbol group\n      oSymbol = mCLDRSymbols[sSymbol];\n      oGroup = mCLDRSymbolGroups[oSymbol.group];\n      // if group is other, the symbol is not allowed in skeleton tokens\n      if (oSymbol.group == \"Other\" || oGroup.diffOnly) {\n        throw new Error(\"Symbol '\" + sSymbol + \"' is not allowed in skeleton format '\" + sSkeleton + \"'\");\n      }\n      // if group index the same or lower, format is invalid\n      if (oGroup.index <= oToken.index) {\n        throw new Error(\"Symbol '\" + sSymbol + \"' at wrong position or duplicate in skeleton format '\" + sSkeleton + \"'\");\n      }\n      // create token and add it the token array\n      oToken = {\n        symbol: sSymbol,\n        group: oSymbol.group,\n        match: oSymbol.match,\n        index: oGroup.index,\n        field: oGroup.field,\n        length: 1\n      };\n      aTokens.push(oToken);\n    }\n    return aTokens;\n  },\n  _findBestMatch: function (aTokens, sSkeleton, oAvailableFormats) {\n    var aTestTokens,\n      aMissingTokens,\n      oToken,\n      oTestToken,\n      iTest,\n      iDistance,\n      bMatch,\n      iFirstDiffPos,\n      oTokenSymbol,\n      oTestTokenSymbol,\n      oBestMatch = {\n        distance: 10000,\n        firstDiffPos: -1\n      };\n    // Loop through all available tokens, find matches and calculate distance\n    for (var sTestSkeleton in oAvailableFormats) {\n      // Skip patterns with symbol \"B\" (which is introduced from CLDR v32.0.0) which isn't supported in DateFormat yet\n      if (sTestSkeleton === \"intervalFormatFallback\" || sTestSkeleton.indexOf(\"B\") > -1) {\n        continue;\n      }\n      aTestTokens = this._parseSkeletonFormat(sTestSkeleton);\n      iDistance = 0;\n      aMissingTokens = [];\n      bMatch = true;\n      // if test format contains more tokens, it cannot be a best match\n      if (aTokens.length < aTestTokens.length) {\n        continue;\n      }\n      iTest = 0;\n      iFirstDiffPos = aTokens.length;\n      for (var i = 0; i < aTokens.length; i++) {\n        oToken = aTokens[i];\n        oTestToken = aTestTokens[iTest];\n        if (iFirstDiffPos === aTokens.length) {\n          iFirstDiffPos = i;\n        }\n        if (oTestToken) {\n          oTokenSymbol = mCLDRSymbols[oToken.symbol];\n          oTestTokenSymbol = mCLDRSymbols[oTestToken.symbol];\n          // if the symbol matches, just add the length difference to the distance\n          if (oToken.symbol === oTestToken.symbol) {\n            if (oToken.length === oTestToken.length) {\n              // both symbol and length match, check the next token\n              // clear the first difference position\n              if (iFirstDiffPos === i) {\n                iFirstDiffPos = aTokens.length;\n              }\n            } else {\n              if (oToken.length < oTokenSymbol.numericCeiling ? oTestToken.length < oTestTokenSymbol.numericCeiling : oTestToken.length >= oTestTokenSymbol.numericCeiling) {\n                // if the symbols are in the same category (either numeric or text representation), add the length diff\n                iDistance += Math.abs(oToken.length - oTestToken.length);\n              } else {\n                // otherwise add 5 which is bigger than any length difference\n                iDistance += 5;\n              }\n            }\n            iTest++;\n            continue;\n          } else {\n            // if only the group matches, add some more distance in addition to length difference\n            if (oToken.match == oTestToken.match) {\n              iDistance += Math.abs(oToken.length - oTestToken.length) + 10;\n              iTest++;\n              continue;\n            }\n          }\n        }\n        // if neither symbol nor group matched, add it to the missing tokens and add distance\n        aMissingTokens.push(oToken);\n        iDistance += 50 - i;\n      }\n\n      // if not all test tokens have been found, the format does not match\n      if (iTest < aTestTokens.length) {\n        bMatch = false;\n      }\n\n      // The current pattern is saved as the best pattern when there is a match and\n      //  1. the distance is smaller than the best distance or\n      //  2. the distance equals the best distance and the position of the token in the given skeleton which\n      //   isn't the same between the given skeleton and the available skeleton is bigger than the best one's.\n      if (bMatch && (iDistance < oBestMatch.distance || iDistance === oBestMatch.distance && iFirstDiffPos > oBestMatch.firstDiffPos)) {\n        oBestMatch.distance = iDistance;\n        oBestMatch.firstDiffPos = iFirstDiffPos;\n        oBestMatch.missingTokens = aMissingTokens;\n        oBestMatch.pattern = oAvailableFormats[sTestSkeleton];\n        oBestMatch.patternTokens = aTestTokens;\n      }\n    }\n    if (oBestMatch.pattern) {\n      return oBestMatch;\n    }\n  },\n  _expandFields: function (vPattern, aPatternTokens, aTokens) {\n    var bSinglePattern = typeof vPattern === \"string\";\n    var aPatterns;\n    if (bSinglePattern) {\n      aPatterns = [vPattern];\n    } else {\n      aPatterns = vPattern;\n    }\n    var aResult = aPatterns.map(function (sPattern) {\n      var mGroups = {},\n        mPatternGroups = {},\n        sResultPatterm = \"\",\n        bQuoted = false,\n        i = 0,\n        iSkeletonLength,\n        iPatternLength,\n        iBestLength,\n        iNewLength,\n        oSkeletonToken,\n        oBestToken,\n        oSymbol,\n        sChar;\n\n      // Create a map of group names to token\n      aTokens.forEach(function (oToken) {\n        mGroups[oToken.group] = oToken;\n      });\n      // Create a map of group names to token in best pattern\n      aPatternTokens.forEach(function (oToken) {\n        mPatternGroups[oToken.group] = oToken;\n      });\n      // Loop through pattern and adjust symbol length\n      while (i < sPattern.length) {\n        sChar = sPattern.charAt(i);\n        if (bQuoted) {\n          sResultPatterm += sChar;\n          if (sChar == \"'\") {\n            bQuoted = false;\n          }\n        } else {\n          oSymbol = mCLDRSymbols[sChar];\n          // If symbol is a CLDR symbol and is contained in the group, expand length\n          if (oSymbol && mGroups[oSymbol.group] && mPatternGroups[oSymbol.group]) {\n            oSkeletonToken = mGroups[oSymbol.group];\n            oBestToken = mPatternGroups[oSymbol.group];\n            iSkeletonLength = oSkeletonToken.length;\n            iBestLength = oBestToken.length;\n            iPatternLength = 1;\n            while (sPattern.charAt(i + 1) == sChar) {\n              i++;\n              iPatternLength++;\n            }\n\n            // Prevent expanding the length of the field when:\n            // 1. The length in the best matching skeleton (iBestLength) matches the length of the application provided skeleton (iSkeletonLength) or\n            // 2. The length of the provided skeleton (iSkeletonLength) and the length of the result pattern (iPatternLength) are not in the same category (numeric or text)\n            //\tbecause switching between numeric to text representation is wrong in all cases\n            if (iSkeletonLength === iBestLength || (iSkeletonLength < oSymbol.numericCeiling ? iPatternLength >= oSymbol.numericCeiling : iPatternLength < oSymbol.numericCeiling)) {\n              iNewLength = iPatternLength;\n            } else {\n              iNewLength = Math.max(iPatternLength, iSkeletonLength);\n            }\n            for (var j = 0; j < iNewLength; j++) {\n              sResultPatterm += sChar;\n            }\n          } else {\n            sResultPatterm += sChar;\n            if (sChar == \"'\") {\n              bQuoted = true;\n            }\n          }\n        }\n        i++;\n      }\n      return sResultPatterm;\n    });\n    return bSinglePattern ? aResult[0] : aResult;\n  },\n  _appendItems: function (aPatterns, aMissingTokens, sCalendarType) {\n    var oAppendItems = this._get(getCLDRCalendarName(sCalendarType), \"dateTimeFormats\", \"appendItems\");\n    aPatterns.forEach(function (sPattern, iIndex) {\n      var sDisplayName, sAppendPattern, sAppendField;\n      aMissingTokens.forEach(function (oToken) {\n        sAppendPattern = oAppendItems[oToken.group];\n        sDisplayName = \"'\" + this.getDisplayName(oToken.field) + \"'\";\n        sAppendField = \"\";\n        for (var i = 0; i < oToken.length; i++) {\n          sAppendField += oToken.symbol;\n        }\n        aPatterns[iIndex] = sAppendPattern.replace(/\\{0\\}/, sPattern).replace(/\\{1\\}/, sAppendField).replace(/\\{2\\}/, sDisplayName);\n      }.bind(this));\n    }.bind(this));\n    return aPatterns;\n  },\n  _getMixedFormatPattern: function (sSkeleton, oAvailableFormats, sCalendarType, vDiff) {\n    var rMixedSkeleton = /^([GyYqQMLwWEecdD]+)([hHkKjJmszZvVOXx]+)$/,\n      rWideMonth = /MMMM|LLLL/,\n      rAbbrevMonth = /MMM|LLL/,\n      rWeekDay = /E|e|c/,\n      oResult,\n      sDateSkeleton,\n      sTimeSkeleton,\n      sStyle,\n      sDatePattern,\n      sTimePattern,\n      sDateTimePattern,\n      sResultPattern;\n\n    // Split skeleton into date and time part\n    oResult = rMixedSkeleton.exec(sSkeleton);\n    sDateSkeleton = oResult[1];\n    sTimeSkeleton = oResult[2];\n    // Get patterns for date and time separately\n    sDatePattern = this._getFormatPattern(sDateSkeleton, oAvailableFormats, sCalendarType);\n    if (vDiff) {\n      sTimePattern = this.getCustomIntervalPattern(sTimeSkeleton, vDiff, sCalendarType);\n    } else {\n      sTimePattern = this._getFormatPattern(sTimeSkeleton, oAvailableFormats, sCalendarType);\n    }\n    // Combine patterns with datetime pattern, dependent on month and weekday\n    if (rWideMonth.test(sDateSkeleton)) {\n      sStyle = rWeekDay.test(sDateSkeleton) ? \"full\" : \"long\";\n    } else if (rAbbrevMonth.test(sDateSkeleton)) {\n      sStyle = \"medium\";\n    } else {\n      sStyle = \"short\";\n    }\n    sDateTimePattern = this.getDateTimePattern(sStyle, sCalendarType);\n    sResultPattern = sDateTimePattern.replace(/\\{1\\}/, sDatePattern).replace(/\\{0\\}/, sTimePattern);\n    return sResultPattern;\n  },\n  /**\n   * Get number symbol \"decimal\", \"group\", \"plusSign\", \"minusSign\", \"percentSign\".\n   *\n   * @param {string} sType the required type of symbol\n   * @returns {string} the selected number symbol\n   * @public\n   */\n  getNumberSymbol: function (sType) {\n    assert(sType == \"decimal\" || sType == \"group\" || sType == \"plusSign\" || sType == \"minusSign\" || sType == \"percentSign\", \"sType must be decimal, group, plusSign, minusSign or percentSign\");\n    return this._get(\"symbols-latn-\" + sType);\n  },\n  /**\n   * Get lenient number symbols for \"plusSign\" or \"minusSign\".\n   *\n   * @param {string} sType the required type of symbol\n   * @returns {string} the selected lenient number symbols, e.g. \"-‒⁻₋−➖﹣\"\n   * @public\n   */\n  getLenientNumberSymbols: function (sType) {\n    assert(sType == \"plusSign\" || sType == \"minusSign\", \"sType must be plusSign or minusSign\");\n    return this._get(\"lenient-scope-number\")[sType];\n  },\n  /**\n   * Get decimal format pattern.\n   *\n   * @returns {string} The pattern\n   * @public\n   */\n  getDecimalPattern: function () {\n    return this._get(\"decimalFormat\").standard;\n  },\n  /**\n   * Get currency format pattern.\n   *\n   * CLDR format pattern:\n   *\n   * @example standard with currency symbol in front of the number\n   * ¤#,##0.00\n   * $100,000.00\n   * $-100,000.00\n   *\n   * @example accounting with negative number pattern after the semicolon\n   * ¤#,##0.00;(¤#,##0.00)\n   * $100,000.00\n   * ($100,000.00)\n   *\n   * @see https://cldr.unicode.org/translation/numbers-currency/number-patterns\n   *\n   * @param {string} sContext the context of the currency pattern (standard or accounting)\n   * @returns {string} The pattern\n   * @public\n   */\n  getCurrencyPattern: function (sContext) {\n    // Undocumented contexts for NumberFormat internal use: \"sap-standard\" and \"sap-accounting\"\n    return this._get(\"currencyFormat\")[sContext] || this._get(\"currencyFormat\").standard;\n  },\n  getCurrencySpacing: function (sPosition) {\n    return this._get(\"currencyFormat\", \"currencySpacing\", sPosition === \"after\" ? \"afterCurrency\" : \"beforeCurrency\");\n  },\n  /**\n   * Get percent format pattern.\n   *\n   * @returns {string} The pattern\n   * @public\n   */\n  getPercentPattern: function () {\n    return this._get(\"percentFormat\").standard;\n  },\n  /**\n   * Get miscellaneous pattern.\n   *\n   * @param {string} sName the name of the misc pattern, can be \"approximately\", \"atLeast\", \"atMost\" or \"range\"\n   * @returns {string} The pattern\n   * @public\n   */\n  getMiscPattern: function (sName) {\n    assert(sName == \"approximately\" || sName == \"atLeast\" || sName == \"atMost\" || sName == \"range\", \"sName must be approximately, atLeast, atMost or range\");\n    return this._get(\"miscPattern\")[sName];\n  },\n  /**\n   * Returns the required minimal number of days for the first week of a year.\n   *\n   * This is the minimal number of days of the week which must be contained in the new year\n   * for the week to become the first week of the year. Depending on the country, this\n   * is just a single day (in the US) or at least 4 days (in most of Europe).\n   *\n   * All week data information in the CLDR is provided for territories (countries).\n   * If the locale of this LocaleData doesn't contain country information (e.g. if it\n   * contains only a language), then the \"likelySubtag\" information of the CLDR\n   * is taken into account to guess the \"most likely\" territory for the locale.\n   *\n   * @returns {int} minimal number of days\n   * @public\n   */\n  getMinimalDaysInFirstWeek: function () {\n    return this._get(\"weekData-minDays\");\n  },\n  /**\n   * Returns the day that usually is regarded as the first day\n   * of a week in the current locale.\n   *\n   * Days are encoded as integer where Sunday=0, Monday=1 etc.\n   *\n   * All week data information in the CLDR is provided for territories (countries).\n   * If the locale of this LocaleData doesn't contain country information (e.g. if it\n   * contains only a language), then the \"likelySubtag\" information of the CLDR\n   * is taken into account to guess the \"most likely\" territory for the locale.\n   *\n   * @returns {int} first day of week\n   * @public\n   */\n  getFirstDayOfWeek: function () {\n    return this._get(\"weekData-firstDay\");\n  },\n  /**\n   * Returns the first day of a weekend for the given locale.\n   *\n   * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.\n   *\n   * All week data information in the CLDR is provided for territories (countries).\n   * If the locale of this LocaleData doesn't contain country information (e.g. if it\n   * contains only a language), then the \"likelySubtag\" information of the CLDR\n   * is taken into account to guess the \"most likely\" territory for the locale.\n   *\n   * @returns {int} first day of weekend\n   * @public\n   */\n  getWeekendStart: function () {\n    return this._get(\"weekData-weekendStart\");\n  },\n  /**\n   * Returns the last day of a weekend for the given locale.\n   *\n   * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.\n   *\n   * All week data information in the CLDR is provided for territories (countries).\n   * If the locale of this LocaleData doesn't contain country information (e.g. if it\n   * contains only a language), then the \"likelySubtag\" information of the CLDR\n   * is taken into account to guess the \"most likely\" territory for the locale.\n   *\n   * @returns {int} last day of weekend\n   * @public\n   */\n  getWeekendEnd: function () {\n    return this._get(\"weekData-weekendEnd\");\n  },\n  /**\n   * Returns a map of custom currency codes, defined via global configuration.\n   * @returns {object} map of custom currency codes, e.g.\n   * {\n   *     \"AUD\": \"AUD\",\n   *     \"BRL\": \"BRL\",\n   *     \"EUR\": \"EUR\",\n   *     \"GBP\": \"GBP\",\n   * }\n   * @private\n   * @ui5-restricted sap.ui.core.format.NumberFormat\n   * @since 1.63\n   */\n  getCustomCurrencyCodes: function () {\n    var mCustomCurrencies = this._get(\"currency\") || {},\n      mCustomCurrencyCodes = {};\n    Object.keys(mCustomCurrencies).forEach(function (sCurrencyKey) {\n      mCustomCurrencyCodes[sCurrencyKey] = sCurrencyKey;\n    });\n    return mCustomCurrencyCodes;\n  },\n  /**\n   * Returns the number of digits of the specified currency.\n   *\n   * @param {string} sCurrency ISO 4217 currency code\n   * @returns {int} digits of the currency\n   * @public\n   * @since 1.21.1\n   */\n  getCurrencyDigits: function (sCurrency) {\n    // try to lookup currency digits from custom currencies\n    var mCustomCurrencies = this._get(\"currency\");\n    if (mCustomCurrencies) {\n      if (mCustomCurrencies[sCurrency] && mCustomCurrencies[sCurrency].hasOwnProperty(\"digits\")) {\n        return mCustomCurrencies[sCurrency].digits;\n      } else if (mCustomCurrencies[\"DEFAULT\"] && mCustomCurrencies[\"DEFAULT\"].hasOwnProperty(\"digits\")) {\n        return mCustomCurrencies[\"DEFAULT\"].digits;\n      }\n    }\n    var iDigits = this._get(\"currencyDigits\", sCurrency);\n    if (iDigits == null) {\n      iDigits = this._get(\"currencyDigits\", \"DEFAULT\");\n      if (iDigits == null) {\n        iDigits = 2; // default\n      }\n    }\n    return iDigits;\n  },\n  /**\n   * Returns the currency symbol for the specified currency, if no symbol is found the ISO 4217 currency code is returned.\n   *\n   * @param {string} sCurrency ISO 4217 currency code\n   * @returns {string} the currency symbol\n   * @public\n   * @since 1.21.1\n   */\n  getCurrencySymbol: function (sCurrency) {\n    var oCurrencySymbols = this.getCurrencySymbols();\n    return oCurrencySymbols && oCurrencySymbols[sCurrency] || sCurrency;\n  },\n  /**\n   * Returns the currency code which is corresponded with the given currency symbol.\n   *\n   * @param {string} sCurrencySymbol The currency symbol which needs to be converted to currency code\n   * @return {string} The corresponded currency code defined for the given currency symbol. The given currency symbol is returned if no currency code can be found by using the given currency symbol.\n   * @public\n   * @since 1.27.0\n   */\n  getCurrencyCodeBySymbol: function (sCurrencySymbol) {\n    var oCurrencySymbols = this._get(\"currencySymbols\"),\n      sCurrencyCode;\n    for (sCurrencyCode in oCurrencySymbols) {\n      if (oCurrencySymbols[sCurrencyCode] === sCurrencySymbol) {\n        return sCurrencyCode;\n      }\n    }\n    return sCurrencySymbol;\n  },\n  /**\n   * Returns the currency symbols available for this locale.\n   * Currency symbols get accumulated by custom currency symbols.\n   *\n   * @returns {Object<string, string>} the map of all currency symbols available in this locale, e.g.\n   * {\n   *     \"AUD\": \"A$\",\n   *     \"BRL\": \"R$\",\n   *     \"EUR\": \"€\",\n   *     \"GBP\": \"£\",\n   * }\n   * @public\n   * @since 1.60\n   */\n  getCurrencySymbols: function () {\n    // Lookup into global Config\n    var mCustomCurrencies = this._get(\"currency\"),\n      mCustomCurrencySymbols = {},\n      sIsoCode;\n    for (var sCurrencyKey in mCustomCurrencies) {\n      sIsoCode = mCustomCurrencies[sCurrencyKey].isoCode;\n      if (mCustomCurrencies[sCurrencyKey].symbol) {\n        mCustomCurrencySymbols[sCurrencyKey] = mCustomCurrencies[sCurrencyKey].symbol;\n      } else if (sIsoCode) {\n        mCustomCurrencySymbols[sCurrencyKey] = this._get(\"currencySymbols\")[sIsoCode];\n      }\n    }\n    return Object.assign({}, this._get(\"currencySymbols\"), mCustomCurrencySymbols);\n  },\n  /**\n   * Retrieves the localized display name of a unit by sUnit, e.g. \"duration-hour\".\n   * @param {string} sUnit the unit key, e.g. \"duration-hour\"\n   * @return {string} The localized display name for the requested unit, e.g. <code>\"Hour\"</code>. Return empty string <code>\"\"</code> if not found\n   * @public\n   * @since 1.54\n   */\n  getUnitDisplayName: function (sUnit) {\n    var mUnitFormat = this.getUnitFormat(sUnit);\n    return mUnitFormat && mUnitFormat[\"displayName\"] || \"\";\n  },\n  /**\n   * Returns relative time patterns for the given scales as an array of objects containing scale, value and pattern.\n   *\n   * The array may contain the following values: \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\" and \"second\". If\n   * no scales are given, patterns for all available scales will be returned.\n   *\n   * The return array will contain objects looking like:\n   * <pre>\n   * {\n   *     scale: \"minute\",\n   *     sign: 1,\n   *     pattern: \"in {0} minutes\"\n   * }\n   * </pre>\n   *\n   * @param {string[]} aScales The scales for which the available patterns should be returned\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 The style of the scale patterns. The valid values are \"wide\", \"short\" and \"narrow\".\n   * @returns {object[]} An array of all relative time patterns\n   * @public\n   * @since 1.34\n   */\n  getRelativePatterns: function (aScales, sStyle) {\n    if (sStyle === undefined) {\n      sStyle = \"wide\";\n    }\n    assert(sStyle === \"wide\" || sStyle === \"short\" || sStyle === \"narrow\", \"sStyle is only allowed to be set with 'wide', 'short' or 'narrow'\");\n    var aPatterns = [],\n      aPluralCategories = this.getPluralCategories(),\n      oScale,\n      oTimeEntry,\n      iValue,\n      iSign;\n    if (!aScales) {\n      aScales = [\"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\", \"second\"];\n    }\n    aScales.forEach(function (sScale) {\n      oScale = this._get(\"dateFields\", sScale + \"-\" + sStyle);\n      for (var sEntry in oScale) {\n        if (sEntry.indexOf(\"relative-type-\") === 0) {\n          iValue = parseInt(sEntry.substr(14));\n          aPatterns.push({\n            scale: sScale,\n            value: iValue,\n            pattern: oScale[sEntry]\n          });\n        } else if (sEntry.indexOf(\"relativeTime-type-\") == 0) {\n          oTimeEntry = oScale[sEntry];\n          iSign = sEntry.substr(18) === \"past\" ? -1 : 1;\n          aPluralCategories.forEach(function (sKey) {\n            // eslint-disable-line no-loop-func\n            var sPattern = oTimeEntry[\"relativeTimePattern-count-\" + sKey];\n            if (sPattern) {\n              aPatterns.push({\n                scale: sScale,\n                sign: iSign,\n                pattern: sPattern\n              });\n            }\n          });\n        }\n      }\n    }.bind(this));\n    return aPatterns;\n  },\n  /**\n   * Returns the relative format pattern with given scale (year, month, week, ...) and difference value.\n   *\n   * @param {string} sScale the scale the relative pattern is needed for\n   * @param {int} iDiff the difference in the given scale unit\n   * @param {boolean} [bFuture] whether a future or past pattern should be used\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\"\n   * @returns {string} the relative format pattern\n   * @public\n   * @since 1.34\n   */\n  getRelativePattern: function (sScale, iDiff, bFuture, sStyle) {\n    var sPattern, oTypes, sKey, sPluralCategory;\n    if (typeof bFuture === \"string\") {\n      sStyle = bFuture;\n      bFuture = undefined;\n    }\n    if (bFuture === undefined) {\n      bFuture = iDiff > 0;\n    }\n    if (sStyle === undefined) {\n      sStyle = \"wide\";\n    }\n    assert(sStyle === \"wide\" || sStyle === \"short\" || sStyle === \"narrow\", \"sStyle is only allowed to be set with 'wide', 'short' or 'narrow'\");\n    sKey = sScale + \"-\" + sStyle;\n    if (iDiff === 0 || iDiff === -2 || iDiff === 2) {\n      sPattern = this._get(\"dateFields\", sKey, \"relative-type-\" + iDiff);\n    }\n    if (!sPattern) {\n      oTypes = this._get(\"dateFields\", sKey, \"relativeTime-type-\" + (bFuture ? \"future\" : \"past\"));\n      sPluralCategory = this.getPluralCategory(Math.abs(iDiff).toString());\n      sPattern = oTypes[\"relativeTimePattern-count-\" + sPluralCategory];\n    }\n    return sPattern;\n  },\n  /**\n   * Returns the relative resource pattern with unit 'second' (like now, \"in {0} seconds\", \"{0} seconds ago\" under locale 'en') based on the given\n   * difference value (0 means now, positive value means in the future and negative value means in the past).\n   *\n   * @param {int} iDiff the difference in seconds\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\"\n   * @returns {string} the relative resource pattern in unit 'second'\n   * @public\n   * @since 1.31.0\n   */\n  getRelativeSecond: function (iDiff, sStyle) {\n    return this.getRelativePattern(\"second\", iDiff, sStyle);\n  },\n  /**\n   * Returns the relative resource pattern with unit 'minute' (like \"in {0} minute(s)\", \"{0} minute(s) ago\" under locale 'en') based on the given\n   * difference value (positive value means in the future and negative value means in the past).\n   *\n   * There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeSecond\n   * function to format the difference using unit 'second'.\n   *\n   * @param {int} iDiff the difference in minutes\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\"\n   * @returns {string|null} the relative resource pattern in unit 'minute'. The method returns null if 0 is given as parameter.\n   * @public\n   * @since 1.31.0\n   */\n  getRelativeMinute: function (iDiff, sStyle) {\n    if (iDiff == 0) {\n      return null;\n    }\n    return this.getRelativePattern(\"minute\", iDiff, sStyle);\n  },\n  /**\n   * Returns the relative resource pattern with unit 'hour' (like \"in {0} hour(s)\", \"{0} hour(s) ago\" under locale 'en') based on the given\n   * difference value (positive value means in the future and negative value means in the past).\n   *\n   * There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeMinute or getRelativeSecond\n   * function to format the difference using unit 'minute' or 'second'.\n   *\n   * @param {int} iDiff the difference in hours\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\"\n   * @returns {string|null} the relative resource pattern in unit 'hour'. The method returns null if 0 is given as parameter.\n   * @public\n   * @since 1.31.0\n   */\n  getRelativeHour: function (iDiff, sStyle) {\n    if (iDiff == 0) {\n      return null;\n    }\n    return this.getRelativePattern(\"hour\", iDiff, sStyle);\n  },\n  /**\n   * Returns the relative day resource pattern (like \"Today\", \"Yesterday\", \"{0} days ago\") based on the given\n   * difference of days (0 means today, 1 means tomorrow, -1 means yesterday, ...).\n   *\n   * @param {int} iDiff the difference in days\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\"\n   * @returns {string} the relative day resource pattern\n   * @public\n   * @since 1.25.0\n   */\n  getRelativeDay: function (iDiff, sStyle) {\n    return this.getRelativePattern(\"day\", iDiff, sStyle);\n  },\n  /**\n   * Returns the relative week resource pattern (like \"This week\", \"Last week\", \"{0} weeks ago\") based on the given\n   * difference of weeks (0 means this week, 1 means next week, -1 means last week, ...).\n   *\n   * @param {int} iDiff the difference in weeks\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\"\n   * @returns {string} the relative week resource pattern\n   * @public\n   * @since 1.31.0\n   */\n  getRelativeWeek: function (iDiff, sStyle) {\n    return this.getRelativePattern(\"week\", iDiff, sStyle);\n  },\n  /**\n   * Returns the relative month resource pattern (like \"This month\", \"Last month\", \"{0} months ago\") based on the given\n   * difference of months (0 means this month, 1 means next month, -1 means last month, ...).\n   *\n   * @param {int} iDiff the difference in months\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\"\n   * @returns {string} the relative month resource pattern\n   * @public\n   * @since 1.25.0\n   */\n  getRelativeMonth: function (iDiff, sStyle) {\n    return this.getRelativePattern(\"month\", iDiff, sStyle);\n  },\n  /**\n   * Returns the display name for a time unit (second, minute, hour, day, week, month, year).\n   *\n   * @param {string} sType Type (second, minute, hour, day, week, month, year)\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\"\n   * returns {string} display name\n   * @public\n   * @since 1.34.0\n   */\n  getDisplayName: function (sType, sStyle) {\n    assert(sType == \"second\" || sType == \"minute\" || sType == \"hour\" || sType == \"zone\" || sType == \"day\" || sType == \"weekday\" || sType == \"week\" || sType == \"month\" || sType == \"quarter\" || sType == \"year\" || sType == \"era\", \"sType must be second, minute, hour, zone, day, weekday, week, month, quarter, year, era\");\n    if (sStyle === undefined) {\n      sStyle = \"wide\";\n    }\n    assert(sStyle === \"wide\" || sStyle === \"short\" || sStyle === \"narrow\", \"sStyle is only allowed to be set with 'wide', 'short' or 'narrow'\");\n    var aSingleFormFields = [\"era\", \"weekday\", \"zone\"],\n      sKey = aSingleFormFields.indexOf(sType) === -1 ? sType + \"-\" + sStyle : sType;\n    return this._get(\"dateFields\", sKey, \"displayName\");\n  },\n  /**\n   * Returns the relative year resource pattern (like \"This year\", \"Last year\", \"{0} year ago\") based on the given\n   * difference of years (0 means this year, 1 means next year, -1 means last year, ...).\n   *\n   * @param {int} iDiff the difference in years\n   * @param {string} [sStyle=\"wide\"] @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\"\n   * @returns {string} the relative year resource pattern\n   * @public\n   * @since 1.25.0\n   */\n  getRelativeYear: function (iDiff, sStyle) {\n    return this.getRelativePattern(\"year\", iDiff, sStyle);\n  },\n  /**\n   * Returns the short decimal formats (like 1K, 1M....).\n   *\n   * @param {string} sStyle short or long\n   * @param {string} sNumber 1000, 10000 ...\n   * @param {string} sPlural one or other (if not exists other is used)\n   * @returns {string} decimal format\n   * @public\n   * @since 1.25.0\n   */\n  getDecimalFormat: function (sStyle, sNumber, sPlural) {\n    var sFormat;\n    var oFormats;\n    switch (sStyle) {\n      case \"long\":\n        oFormats = this._get(\"decimalFormat-long\");\n        break;\n      default:\n        //short\n        oFormats = this._get(\"decimalFormat-short\");\n        break;\n    }\n    if (oFormats) {\n      var sName = sNumber + \"-\" + sPlural;\n      sFormat = oFormats[sName];\n      if (!sFormat) {\n        sName = sNumber + \"-other\";\n        sFormat = oFormats[sName];\n      }\n    }\n    return sFormat;\n  },\n  /**\n   * Returns the short currency formats (like 1K USD, 1M USD....).\n   *\n   * @param {string} sStyle short\n   * @param {string} sNumber 1000, 10000 ...\n   * @param {string} sPlural one or other (if not exists other is used)\n   * @returns {string} decimal format\n   * @public\n   * @since 1.51.0\n   */\n  getCurrencyFormat: function (sStyle, sNumber, sPlural) {\n    var sFormat;\n    var oFormats = this._get(\"currencyFormat-\" + sStyle);\n\n    // Defaults to \"short\" if not found\n    if (!oFormats) {\n      if (sStyle === \"sap-short\") {\n        throw new Error(\"Failed to get CLDR data for property \\\"currencyFormat-sap-short\\\"\");\n      }\n      oFormats = this._get(\"currencyFormat-short\");\n    }\n    if (oFormats) {\n      var sName = sNumber + \"-\" + sPlural;\n      sFormat = oFormats[sName];\n      if (!sFormat) {\n        sName = sNumber + \"-other\";\n        sFormat = oFormats[sName];\n      }\n    }\n    return sFormat;\n  },\n  /**\n   * Returns a map containing patterns for formatting lists\n   *\n   *@param {string} [sType='standard'] The type of the list pattern. It can be 'standard' or 'or'.\n   *@param {string} [sStyle='wide'] The style of the list pattern. It can be 'wide' or 'short'.\n  * @return {object} Map with list patterns\n   */\n  getListFormat: function (sType, sStyle) {\n    var oFormats = this._get(\"listPattern-\" + (sType || \"standard\") + \"-\" + (sStyle || \"wide\"));\n    if (oFormats) {\n      return oFormats;\n    }\n    return {};\n  },\n  /**\n   * Retrieves the unit format pattern for a specific unit name considering the unit mappings.\n   * @param {string} sUnit unit name, e.g. \"duration-hour\" or \"my\"\n   * @return {object} The unit format configuration for the given unit name\n   * @public\n   * @since 1.54\n   * @see sap.ui.core.LocaleData#getUnitFromMapping\n   */\n  getResolvedUnitFormat: function (sUnit) {\n    sUnit = this.getUnitFromMapping(sUnit) || sUnit;\n    return this.getUnitFormat(sUnit);\n  },\n  /**\n   * Retrieves the unit format pattern for a specific unit name.\n   *\n   * Note: Does not take unit mapping into consideration.\n   * @param {string} sUnit unit name, e.g. \"duration-hour\"\n   * @return {object} The unit format configuration for the given unit name\n   * @public\n   * @since 1.54\n   */\n  getUnitFormat: function (sUnit) {\n    var oResult = this._get(\"units\", \"short\", sUnit);\n    if (!oResult && mLegacyUnit2CurrentUnit[sUnit]) {\n      oResult = this._get(\"units\", \"short\", mLegacyUnit2CurrentUnit[sUnit]);\n    }\n    return oResult;\n  },\n  /**\n   * Retrieves all unit format patterns merged.\n   *\n   * Note: Does not take unit mapping into consideration.\n   * @return {object} The unit format patterns\n   * @public\n   * @since 1.54\n   */\n  getUnitFormats: function () {\n    return this._getMerged(\"units\", \"short\");\n  },\n  /**\n   * Looks up the unit from defined unit mapping.\n   * E.g. for defined unit mapping\n   * <code>\n   * {\n   *  \"my\": \"my-custom-unit\",\n   *  \"cm\": \"length-centimeter\"\n   * }\n   * </code>\n   *\n   * Call:\n   * <code>getUnitFromMapping(\"my\")</code> would result in <code>\"my-custom-unit\"</code>\n   * @param {string} sMapping mapping identifier\n   * @return {string} unit from the mapping\n   * @public\n   * @since 1.54\n   */\n  getUnitFromMapping: function (sMapping) {\n    return this._get(\"unitMappings\", sMapping);\n  },\n  /**\n   * Returns array of eras.\n   *\n   * @param {string} sWidth the style of the era name. It can be 'wide', 'abbreviated' or 'narrow'\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar\n   * @return {array} the array of eras\n   * @public\n   * @since 1.32.0\n   */\n  getEras: function (sWidth, sCalendarType) {\n    assert(sWidth == \"wide\" || sWidth == \"abbreviated\" || sWidth == \"narrow\", \"sWidth must be wide, abbreviate or narrow\");\n\n    //TODO Adapt generation so that eras are an array instead of object\n    var oEras = this._get(getCLDRCalendarName(sCalendarType), \"era-\" + sWidth),\n      aEras = [];\n    for (var i in oEras) {\n      aEras[parseInt(i)] = oEras[i];\n    }\n    return aEras;\n  },\n  /**\n   * Returns the map of era IDs to era dates.\n   *\n   * @param {sap.ui.core.CalendarType} [sCalendarType] the type of calendar\n   * @return {array} the array of eras containing objects with either an _end or _start property with a date\n   * @public\n   * @since 1.32.0\n   */\n  getEraDates: function (sCalendarType) {\n    //TODO Adapt generation so that eradates are an array instead of object\n    var oEraDates = this._get(\"eras-\" + sCalendarType.toLowerCase()),\n      aEraDates = [];\n    for (var i in oEraDates) {\n      aEraDates[parseInt(i)] = oEraDates[i];\n    }\n    return aEraDates;\n  },\n  /**\n   * Returns the defined pattern for representing the calendar week number.\n   *\n   * @param {string} sStyle the style of the pattern. It can only be either \"wide\" or \"narrow\".\n   * @param {int} iWeekNumber the week number\n   * @return {string} the week number string\n   *\n   * @public\n   * @since 1.32.0\n   */\n  getCalendarWeek: function (sStyle, iWeekNumber) {\n    assert(sStyle == \"wide\" || sStyle == \"narrow\", \"sStyle must be wide or narrow\");\n    var oMessageBundle = Core.getLibraryResourceBundle(\"sap.ui.core\", this.oLocale.toString()),\n      sKey = \"date.week.calendarweek.\" + sStyle;\n    return oMessageBundle.getText(sKey, iWeekNumber ? [iWeekNumber] : undefined);\n  },\n  /**\n   * Whether 1 January is the first day of the first calendar week.\n   * This is the definition of the calendar week in the US.\n   *\n   * @return {boolean} true if the first week of the year starts with 1 January.\n   * @public\n   * @since 1.92.0\n   */\n  firstDayStartsFirstWeek: function () {\n    return this.oLocale.getLanguage() === \"en\" && this.oLocale.getRegion() === \"US\";\n  },\n  /**\n   * Returns the preferred calendar type for the current locale which exists in {@link sap.ui.core.CalendarType}\n   *\n   * @returns {sap.ui.core.CalendarType} the preferred calendar type\n   * @public\n   * @since 1.28.6\n   */\n  getPreferredCalendarType: function () {\n    var sCalendarName,\n      sType,\n      i,\n      aCalendars = this._get(\"calendarPreference\") || [];\n    for (i = 0; i < aCalendars.length; i++) {\n      // No support for calendar subtypes (islamic) yet, so ignore part after -\n      sCalendarName = aCalendars[i].split(\"-\")[0];\n      for (sType in CalendarType) {\n        if (sCalendarName === sType.toLowerCase()) {\n          return sType;\n        }\n      }\n    }\n    return CalendarType.Gregorian;\n  },\n  /**\n   * Returns the preferred hour pattern symbol (h for 12, H for 24 hours) for the current locale.\n   *\n   * @returns {string} the preferred hour symbol\n   * @public\n   * @since 1.34\n   */\n  getPreferredHourSymbol: function () {\n    return this._get(\"timeData\", \"_preferred\");\n  },\n  /**\n   * Returns an array of all plural categories available in this language.\n   *\n   * @returns {array} The array of plural categories\n   * @public\n   * @since 1.50\n   */\n  getPluralCategories: function () {\n    var oPlurals = this._get(\"plurals\"),\n      aCategories = Object.keys(oPlurals);\n    aCategories.push(\"other\");\n    return aCategories;\n  },\n  /**\n   * Returns the plural category (zero, one, two, few, many or other) for the given number value.\n   * The number must be passed as an unformatted number string with dot as decimal\n   * separator (for example \"12345.67\"). To determine the correct plural category, it\n   * is also necessary to keep the same number of decimal digits as given in the formatted\n   * output string. For example \"1\" and \"1.0\" could be in different plural categories as\n   * the number of decimal digits is different.\n   *\n   * Compact numbers (for example in \"short\" format) must be provided in the\n   * locale-independent CLDR compact notation. This notation uses the plural rule operand \"c\"\n   * for the compact decimal exponent, for example \"1.2c3\" for \"1.2K\" (1200) or \"4c6\" for\n   * \"4M\" (4000000).\n   *\n   * Note that the operand \"e\" is deprecated, but is a synonym corresponding to the CLDR\n   * specification for \"c\" and may be redefined in the future.\n   *\n   * @param {string|number} vNumber The number to find the plural category for\n   * @returns {string} The plural category\n   * @public\n   * @since 1.50\n   */\n  getPluralCategory: function (vNumber) {\n    var sNumber = typeof vNumber === \"number\" ? vNumber.toString() : vNumber,\n      oPlurals = this._get(\"plurals\");\n    if (!this._pluralTest) {\n      this._pluralTest = {};\n    }\n    for (var sCategory in oPlurals) {\n      var fnTest = this._pluralTest[sCategory];\n      if (!fnTest) {\n        fnTest = this._parsePluralRule(oPlurals[sCategory]);\n        this._pluralTest[sCategory] = fnTest;\n      }\n      if (fnTest(sNumber).bMatch) {\n        return sCategory;\n      }\n    }\n    return \"other\";\n  },\n  /**\n   * Parses a language plural rule as specified in\n   * https://unicode.org/reports/tr35/tr35-numbers.html#table-plural-operand-meanings\n   *\n   * @param {string} sRule The plural rule as a string\n   * @returns {function(string)} A function to determine for a number given as string parameter if it matches the\n   *   plural rule.\n   *\n   * @private\n   */\n  _parsePluralRule: function (sRule) {\n    var OP_OR = \"or\",\n      OP_AND = \"and\",\n      OP_MOD = \"%\",\n      OP_EQ = \"=\",\n      OP_NEQ = \"!=\",\n      OPD_N = \"n\",\n      OPD_I = \"i\",\n      OPD_F = \"f\",\n      OPD_T = \"t\",\n      OPD_V = \"v\",\n      OPD_W = \"w\",\n      OPD_C = \"c\",\n      OPD_E = \"e\",\n      RANGE = \"..\",\n      SEP = \",\";\n    var i = 0,\n      aTokens;\n    aTokens = sRule.split(\" \");\n    function accept(sToken) {\n      if (aTokens[i] === sToken) {\n        i++;\n        return true;\n      }\n      return false;\n    }\n    function consume() {\n      var sToken = aTokens[i];\n      i++;\n      return sToken;\n    }\n    function or_condition() {\n      var fnAnd, fnOr;\n      fnAnd = and_condition();\n      if (accept(OP_OR)) {\n        fnOr = or_condition();\n        return function (o) {\n          return fnAnd(o) || fnOr(o);\n        };\n      }\n      return fnAnd;\n    }\n    function and_condition() {\n      var fnRelation, fnAnd;\n      fnRelation = relation();\n      if (accept(OP_AND)) {\n        fnAnd = and_condition();\n        return function (o) {\n          return fnRelation(o) && fnAnd(o);\n        };\n      }\n      return fnRelation;\n    }\n    function relation() {\n      var fnExpr, fnRangeList, bEq;\n      fnExpr = expr();\n      if (accept(OP_EQ)) {\n        bEq = true;\n      } else if (accept(OP_NEQ)) {\n        bEq = false;\n      } else {\n        throw new Error(\"Expected '=' or '!='\");\n      }\n      fnRangeList = range_list();\n      if (bEq) {\n        return function (o) {\n          return fnRangeList(o).indexOf(fnExpr(o)) >= 0;\n        };\n      } else {\n        return function (o) {\n          return fnRangeList(o).indexOf(fnExpr(o)) === -1;\n        };\n      }\n    }\n    function expr() {\n      var fnOperand;\n      fnOperand = operand();\n      if (accept(OP_MOD)) {\n        var iDivisor = parseInt(consume());\n        return function (o) {\n          return fnOperand(o) % iDivisor;\n        };\n      }\n      return fnOperand;\n    }\n    function operand() {\n      if (accept(OPD_N)) {\n        return function (o) {\n          return o.n;\n        };\n      } else if (accept(OPD_I)) {\n        return function (o) {\n          return o.i;\n        };\n      } else if (accept(OPD_F)) {\n        return function (o) {\n          return o.f;\n        };\n      } else if (accept(OPD_T)) {\n        return function (o) {\n          return o.t;\n        };\n      } else if (accept(OPD_V)) {\n        return function (o) {\n          return o.v;\n        };\n      } else if (accept(OPD_W)) {\n        return function (o) {\n          return o.w;\n        };\n      } else if (accept(OPD_C)) {\n        return function (o) {\n          return o.c;\n        };\n      } else if (accept(OPD_E)) {\n        return function (o) {\n          return o.c; // c is an alias for e\n        };\n      } else {\n        throw new Error(\"Unknown operand: \" + consume());\n      }\n    }\n    function range_list() {\n      var aValues = [],\n        sRangeList = consume(),\n        aParts = sRangeList.split(SEP),\n        aRange,\n        iFrom,\n        iTo;\n      aParts.forEach(function (sPart) {\n        aRange = sPart.split(RANGE);\n        if (aRange.length === 1) {\n          aValues.push(parseInt(sPart));\n        } else {\n          iFrom = parseInt(aRange[0]);\n          iTo = parseInt(aRange[1]);\n          for (var i = iFrom; i <= iTo; i++) {\n            aValues.push(i);\n          }\n        }\n      });\n      return function (o) {\n        return aValues;\n      };\n    }\n    var fnOr = or_condition();\n    if (i != aTokens.length) {\n      throw new Error(\"Not completely parsed\");\n    }\n    return function (sValue) {\n      var iDotPos, iExponent, iExponentPos, sFraction, sFractionNoZeros, sInteger, o;\n\n      // replace compact operand \"c\" to scientific \"e\" to be convertible in LocaleData.convertToDecimal\n      sValue = sValue.replace(rCIgnoreCase, \"e\");\n      iExponentPos = sValue.search(rEIgnoreCase);\n      iExponent = iExponentPos < 0 ? 0 : parseInt(sValue.slice(iExponentPos + 1));\n      sValue = LocaleData.convertToDecimal(sValue);\n      iDotPos = sValue.indexOf(\".\");\n      if (iDotPos === -1) {\n        sInteger = sValue;\n        sFraction = \"\";\n        sFractionNoZeros = \"\";\n      } else {\n        sInteger = sValue.slice(0, iDotPos);\n        sFraction = sValue.slice(iDotPos + 1);\n        sFractionNoZeros = sFraction.replace(rTrailingZeroes, \"\");\n      }\n      o = {\n        n: parseFloat(sValue),\n        i: parseInt(sInteger),\n        v: sFraction.length,\n        w: sFractionNoZeros.length,\n        f: sFraction === \"\" ? 0 : parseInt(sFraction),\n        t: sFractionNoZeros === \"\" ? 0 : parseInt(sFractionNoZeros),\n        c: iExponent\n      };\n      return {\n        bMatch: fnOr(o),\n        oOperands: o\n      };\n    };\n  }\n});\n\n/**\n * Returns the non-scientific (=decimal) notation of the given numeric value which does not contain an exponent\n * value.\n * For numbers with a magnitude (ignoring sign) greater than or equal to 1e+21 or less than 1e-6, a conversion is\n * required, as Number#toString formats these in scientific notation.\n *\n * @param {float|string} vValue\n *   A number such as 10.1 or a string containing a number based on radix 10\n * @return {string} The number in decimal notation\n *\n * @private\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString#description\n */\nLocaleData.convertToDecimal = function (vValue) {\n  var iIntegerLength,\n    iExponent,\n    iFractionLength,\n    bNegative,\n    iNewIntegerLength,\n    aResult,\n    sValue = String(vValue);\n  if (!sValue.includes(\"e\") && !sValue.includes(\"E\")) {\n    return sValue;\n  }\n  aResult = sValue.match(rNumberInScientificNotation);\n  bNegative = aResult[1] === \"-\";\n  sValue = aResult[2].replace(\".\", \"\");\n  iIntegerLength = aResult[3] ? aResult[3].length : 0;\n  iFractionLength = aResult[4] ? aResult[4].length : 0;\n  iExponent = parseInt(aResult[5]);\n  iNewIntegerLength = iIntegerLength + iExponent;\n  if (iExponent > 0) {\n    sValue = iExponent < iFractionLength ? sValue.slice(0, iNewIntegerLength) + \".\" + sValue.slice(iNewIntegerLength) : sValue = sValue.padEnd(iNewIntegerLength, \"0\");\n  } else {\n    sValue = -iExponent < iIntegerLength ? sValue = sValue.slice(0, iNewIntegerLength) + \".\" + sValue.slice(iNewIntegerLength) : sValue = \"0.\" + sValue.padStart(iFractionLength - iExponent, \"0\");\n  }\n  if (bNegative) {\n    sValue = \"-\" + sValue;\n  }\n  return sValue;\n};\nvar mCLDRSymbolGroups = {\n  \"Era\": {\n    field: \"era\",\n    index: 0\n  },\n  \"Year\": {\n    field: \"year\",\n    index: 1\n  },\n  \"Quarter\": {\n    field: \"quarter\",\n    index: 2\n  },\n  \"Month\": {\n    field: \"month\",\n    index: 3\n  },\n  \"Week\": {\n    field: \"week\",\n    index: 4\n  },\n  \"Day-Of-Week\": {\n    field: \"weekday\",\n    index: 5\n  },\n  \"Day\": {\n    field: \"day\",\n    index: 6\n  },\n  \"DayPeriod\": {\n    field: \"hour\",\n    index: 7,\n    diffOnly: true\n  },\n  \"Hour\": {\n    field: \"hour\",\n    index: 8\n  },\n  \"Minute\": {\n    field: \"minute\",\n    index: 9\n  },\n  \"Second\": {\n    field: \"second\",\n    index: 10\n  },\n  \"Timezone\": {\n    field: \"zone\",\n    index: 11\n  }\n};\nvar mCLDRSymbols = {\n  \"G\": {\n    group: \"Era\",\n    match: \"Era\",\n    numericCeiling: 1\n  },\n  \"y\": {\n    group: \"Year\",\n    match: \"Year\",\n    numericCeiling: 100\n  },\n  \"Y\": {\n    group: \"Year\",\n    match: \"Year\",\n    numericCeiling: 100\n  },\n  \"Q\": {\n    group: \"Quarter\",\n    match: \"Quarter\",\n    numericCeiling: 3\n  },\n  \"q\": {\n    group: \"Quarter\",\n    match: \"Quarter\",\n    numericCeiling: 3\n  },\n  \"M\": {\n    group: \"Month\",\n    match: \"Month\",\n    numericCeiling: 3\n  },\n  \"L\": {\n    group: \"Month\",\n    match: \"Month\",\n    numericCeiling: 3\n  },\n  \"w\": {\n    group: \"Week\",\n    match: \"Week\",\n    numericCeiling: 100\n  },\n  \"W\": {\n    group: \"Week\",\n    match: \"Week\",\n    numericCeiling: 100\n  },\n  \"d\": {\n    group: \"Day\",\n    match: \"Day\",\n    numericCeiling: 100\n  },\n  \"D\": {\n    group: \"Day\",\n    match: \"Day\",\n    numericCeiling: 100\n  },\n  \"E\": {\n    group: \"Day-Of-Week\",\n    match: \"Day-Of-Week\",\n    numericCeiling: 1\n  },\n  \"e\": {\n    group: \"Day-Of-Week\",\n    match: \"Day-Of-Week\",\n    numericCeiling: 3\n  },\n  \"c\": {\n    group: \"Day-Of-Week\",\n    match: \"Day-Of-Week\",\n    numericCeiling: 2\n  },\n  \"h\": {\n    group: \"Hour\",\n    match: \"Hour12\",\n    numericCeiling: 100\n  },\n  \"H\": {\n    group: \"Hour\",\n    match: \"Hour24\",\n    numericCeiling: 100\n  },\n  \"k\": {\n    group: \"Hour\",\n    match: \"Hour24\",\n    numericCeiling: 100\n  },\n  \"K\": {\n    group: \"Hour\",\n    match: \"Hour12\",\n    numericCeiling: 100\n  },\n  \"m\": {\n    group: \"Minute\",\n    match: \"Minute\",\n    numericCeiling: 100\n  },\n  \"s\": {\n    group: \"Second\",\n    match: \"Second\",\n    numericCeiling: 100\n  },\n  \"z\": {\n    group: \"Timezone\",\n    match: \"Timezone\",\n    numericCeiling: 1\n  },\n  \"Z\": {\n    group: \"Timezone\",\n    match: \"Timezone\",\n    numericCeiling: 1\n  },\n  \"O\": {\n    group: \"Timezone\",\n    match: \"Timezone\",\n    numericCeiling: 1\n  },\n  \"v\": {\n    group: \"Timezone\",\n    match: \"Timezone\",\n    numericCeiling: 1\n  },\n  \"V\": {\n    group: \"Timezone\",\n    match: \"Timezone\",\n    numericCeiling: 1\n  },\n  \"X\": {\n    group: \"Timezone\",\n    match: \"Timezone\",\n    numericCeiling: 1\n  },\n  \"x\": {\n    group: \"Timezone\",\n    match: \"Timezone\",\n    numericCeiling: 1\n  },\n  \"S\": {\n    group: \"Other\",\n    numericCeiling: 100\n  },\n  \"u\": {\n    group: \"Other\",\n    numericCeiling: 100\n  },\n  \"U\": {\n    group: \"Other\",\n    numericCeiling: 1\n  },\n  \"r\": {\n    group: \"Other\",\n    numericCeiling: 100\n  },\n  \"F\": {\n    group: \"Other\",\n    numericCeiling: 100\n  },\n  \"g\": {\n    group: \"Other\",\n    numericCeiling: 100\n  },\n  \"a\": {\n    group: \"DayPeriod\",\n    numericCeiling: 1\n  },\n  \"b\": {\n    group: \"Other\",\n    numericCeiling: 1\n  },\n  \"B\": {\n    group: \"Other\",\n    numericCeiling: 1\n  },\n  \"A\": {\n    group: \"Other\",\n    numericCeiling: 100\n  }\n};\n\n/**\n * Helper to analyze and parse designtime (aka buildtime) variables\n *\n * At buildtime, the build can detect a pattern like $some-variable-name:some-value$\n * and replace 'some-value' with a value determined at buildtime (here: the actual list of locales).\n *\n * At runtime, this method removes the surrounding pattern ('$some-variable-name:' and '$') and leaves only the 'some-value'.\n * Additionally, this value is parsed as a comma-separated list (because this is the only use case here).\n *\n * The mimic of the comments is borrowed from the CVS (Concurrent Versions System),\n * see http://web.mit.edu/gnu/doc/html/cvs_17.html.\n *\n * If no valid <code>sValue</code> is given, <code>null</code> is returned\n *\n * @param {string} sValue The raw designtime property e.g. $cldr-rtl-locales:ar,fa,he$\n * @returns {string[]|null} The designtime property e.g. ['ar', 'fa', 'he']\n * @private\n */\nfunction getDesigntimePropertyAsArray(sValue) {\n  var m = /\\$([-a-z0-9A-Z._]+)(?::([^$]*))?\\$/.exec(sValue);\n  return m && m[2] ? m[2].split(/,/) : null;\n}\n\n/**\n * A list of locales for which CLDR data is bundled with the UI5 runtime.\n * @private\n */\nvar _cldrLocales = getDesigntimePropertyAsArray(\"$cldr-locales:ar,ar_EG,ar_SA,bg,ca,cnr,cy,cs,da,de,de_AT,de_CH,el,el_CY,en,en_AU,en_GB,en_HK,en_IE,en_IN,en_NZ,en_PG,en_SG,en_ZA,es,es_AR,es_BO,es_CL,es_CO,es_MX,es_PE,es_UY,es_VE,et,fa,fi,fr,fr_BE,fr_CA,fr_CH,fr_LU,he,hi,hr,hu,id,it,it_CH,ja,kk,ko,lt,lv,mk,ms,nb,nl,nl_BE,pl,pt,pt_PT,ro,ru,ru_UA,sk,sl,sr,sr_Latn,sv,th,tr,uk,vi,zh_CN,zh_HK,zh_SG,zh_TW$\");\n\n/**\n * A set of locales for which the UI5 runtime contains a CLDR JSON file.\n *\n * Helps to avoid unsatisfiable backend calls.\n *\n * @private\n */\nvar M_SUPPORTED_LOCALES = function () {\n  var LOCALES = _cldrLocales,\n    result = {},\n    i;\n  if (LOCALES) {\n    for (i = 0; i < LOCALES.length; i++) {\n      result[LOCALES[i]] = true;\n    }\n  }\n  return result;\n}();\n\n/**\n * Locale data cache.\n *\n * @private\n */\nvar mLocaleDatas = {};\n\n/**\n * Creates a flat map from an object structure which contains a link to the parent (\"_parent\").\n * The values should contain the parent(s) and the element joined by <code>\", \"</code>.\n * The keys are the keys of the object structure joined by \"/\" excluding \"_parent\".\n *\n * E.g. input\n * <code>\n * {\n *     a: {\n *         a1: {\n *             a11: \"A11\",\n *             _parent: \"A1\"\n *         },\n *         _parent: \"A\"\n *     }\n * }\n * </code>\n *\n * output:\n * <code>\n * {\n *     \"a/a1/a11\": \"A, A1, A11\"\n * }\n * </code>\n *\n * @param {object} oNode the node which will be processed\n * @param {string} [sKey=\"\"] the key inside the node which should be processed\n * @param {object} [oResult={}] the result which is passed through the recursion\n * @param {string[]} [aParentTranslations=[]] the list of parent translations, e.g. [\"A\", \"A1\"]\n * @returns {Object<string, string>} object map with key being the keys joined by \"/\" and the values joined by \", \".\n * @private\n */\nfunction _resolveTimezoneTranslationStructure(oNode, sKey, oResult, aParentTranslations) {\n  aParentTranslations = aParentTranslations ? aParentTranslations.slice() : [];\n  oResult = oResult || {};\n  sKey = sKey || \"\";\n  Object.keys(oNode).forEach(function (sChildKey) {\n    var vChildNode = oNode[sChildKey];\n    if (typeof vChildNode === \"object\") {\n      var aParentTranslationForChild = aParentTranslations.slice();\n      var sParent = vChildNode[\"_parent\"];\n      if (sParent) {\n        aParentTranslationForChild.push(sParent);\n      }\n      _resolveTimezoneTranslationStructure(vChildNode, sKey + sChildKey + \"/\", oResult, aParentTranslationForChild);\n    } else if (typeof vChildNode === \"string\" && sChildKey !== \"_parent\") {\n      var sParents = aParentTranslations.length ? aParentTranslations.join(\", \") + \", \" : \"\";\n      oResult[sKey + sChildKey] = sParents + vChildNode;\n    }\n  });\n  return oResult;\n}\n\n/**\n * Returns the corresponding calendar name in CLDR of the given calendar type, or the calendar type\n * from the configuration, in case sCalendarType is undefined.\n *\n * @param {sap.ui.core.CalendarType} sCalendarType the type defined in {@link sap.ui.core.CalendarType}.\n * @returns {string} calendar name\n * @private\n */\nfunction getCLDRCalendarName(sCalendarType) {\n  if (!sCalendarType) {\n    sCalendarType = Configuration.getCalendarType();\n  }\n  return \"ca-\" + sCalendarType.toLowerCase();\n}\n\n/**\n * Load LocaleData data from the CLDR generated files.\n */\nfunction getData(oLocale) {\n  var sLanguage = oLocale.getLanguage() || \"\",\n    sScript = oLocale.getScript() || \"\",\n    sRegion = oLocale.getRegion() || \"\",\n    mData;\n\n  /*\n   * Merge a CLDR delta file and a CLDR fallback file.\n   *\n   * Note: this function can't be replaced by sap/base/util/extend or sap/base/util/merge\n   * as its contract for null values differs from those modules.\n   */\n  function merge(obj, fallbackObj) {\n    var name, value, fallbackValue;\n    if (!fallbackObj) {\n      return;\n    }\n    for (name in fallbackObj) {\n      if (fallbackObj.hasOwnProperty(name)) {\n        value = obj[name];\n        fallbackValue = fallbackObj[name];\n        if (value === undefined) {\n          // 'undefined': value doesn't exist in delta, so take it from the fallback object\n          // Note: undefined is not a valid value in JSON, so we can't misunderstand an existing undefined\n          obj[name] = fallbackValue;\n        } else if (value === null) {\n          // 'null' is used by the delta tooling as a marker that a value must not be taken form the fallback\n          delete obj[name];\n        } else if (typeof value === 'object' && typeof fallbackValue === 'object' && !Array.isArray(value)) {\n          // both values are objects, merge them recursively\n          merge(value, fallbackValue);\n        }\n      }\n    }\n  }\n  function getOrLoad(sId) {\n    if (!mLocaleDatas[sId] && (!M_SUPPORTED_LOCALES || M_SUPPORTED_LOCALES[sId] === true)) {\n      var data = mLocaleDatas[sId] = LoaderExtensions.loadResource(\"sap/ui/core/cldr/\" + sId + \".json\", {\n        dataType: \"json\",\n        failOnError: false\n      });\n\n      // check if the data is a minified delta file.\n      // If so, load the corresponding fallback data as well, merge it and remove the fallback marker\n      if (data && data.__fallbackLocale) {\n        merge(data, getOrLoad(data.__fallbackLocale));\n        delete data.__fallbackLocale;\n      }\n\n      // if load fails, null is returned\n      // -> caller will process the fallback chain, in the end a result is identified and stored in mDatas under the originally requested ID\n    }\n    return mLocaleDatas[sId];\n  }\n\n  // normalize language and handle special cases\n  sLanguage = sLanguage && Localization.getModernLanguage(sLanguage) || sLanguage;\n  // Special case 1: in an SAP context, the inclusive language code \"no\" always means Norwegian Bokmal (\"nb\")\n  if (sLanguage === \"no\") {\n    sLanguage = \"nb\";\n  }\n  // Special case 2: for Chinese, derive a default region from the script (this behavior is inherited from Java)\n  if (sLanguage === \"zh\" && !sRegion) {\n    if (sScript === \"Hans\") {\n      sRegion = \"CN\";\n    } else if (sScript === \"Hant\") {\n      sRegion = \"TW\";\n    }\n  }\n\n  // Special case 3: for Serbian, there is script cyrillic and latin, \"sh\" and \"sr-latn\" map to \"latin\", \"sr\" maps to cyrillic\n  // CLDR files: sr.json (cyrillic) and sr_Latn.json (latin)\n  if (sLanguage === \"sh\" || sLanguage === \"sr\" && sScript === \"Latn\") {\n    sLanguage = \"sr_Latn\";\n  }\n\n  // sId is the originally requested locale.\n  // this is the key under which the result (even a fallback one) will be stored in the end\n  var sId = sLanguage + \"_\" + sRegion;\n\n  // the locale of the loaded json file\n  var sCLDRLocaleId = sId;\n\n  // first try: load CLDR data for specific language / region combination\n  if (sLanguage && sRegion) {\n    mData = getOrLoad(sId);\n  }\n  // second try: load data for language only\n  if (!mData && sLanguage) {\n    mData = getOrLoad(sLanguage);\n    sCLDRLocaleId = sLanguage;\n  }\n  // last try: load data for default language \"en\" (english)\n  if (!mData) {\n    mData = getOrLoad(\"en\");\n    sCLDRLocaleId = \"en\";\n  }\n\n  // store in cache\n  mLocaleDatas[sId] = mData;\n  sCLDRLocaleId = sCLDRLocaleId.replace(/_/g, \"-\");\n  return {\n    mData: mData,\n    sCLDRLocaleId: sCLDRLocaleId\n  };\n}\n\n/**\n * @classdesc A specialized subclass of LocaleData that merges custom settings.\n * @extends sap.ui.core.LocaleData\n * @alias sap.ui.core.CustomLocaleData\n * @private\n */\nvar CustomLocaleData = LocaleData.extend(\"sap.ui.core.CustomLocaleData\", {\n  constructor: function (oLocale) {\n    LocaleData.apply(this, arguments);\n    this.mCustomData = Configuration.getFormatSettings().getCustomLocaleData();\n  },\n  /**\n   * Retrieves the value for the given arguments by checking first <code>mCustomData</code> and if not\n   * found <code>mData</code>\n   * @returns {*} value\n   * @private\n   */\n  _get: function () {\n    var aArguments = Array.prototype.slice.call(arguments),\n      sCalendar,\n      sKey;\n    // Calendar data needs special handling, as CustomLocaleData does have one version of calendar data only\n    if (aArguments[0].indexOf(\"ca-\") == 0) {\n      sCalendar = aArguments[0];\n      if (sCalendar == getCLDRCalendarName()) {\n        aArguments = aArguments.slice(1);\n      }\n    }\n    sKey = aArguments.join(\"-\");\n    // first try customdata with special formatted key\n    // afterwards try customdata lookup\n    // afterwards try mData lookup\n    var vValue = this.mCustomData[sKey];\n    if (vValue == null) {\n      vValue = this._getDeep(this.mCustomData, arguments);\n      if (vValue == null) {\n        vValue = this._getDeep(this.mData, arguments);\n      }\n    }\n    return vValue;\n  },\n  /**\n   * Retrieves merged object from <code>mData</code> extended with <code>mCustomData</code>.\n   * This function merges the content of <code>mData</code> and <code>mCustomData</code> instead of returning one or the other like <code>_get()</code> does.\n   *\n   * Note: Properties defined in <code>mCustomData</code> overwrite the ones from <code>mData</code>.\n   * @private\n   * @return {object} merged object\n   */\n  _getMerged: function () {\n    var mData = this._getDeep(this.mData, arguments);\n    var mCustomData = this._getDeep(this.mCustomData, arguments);\n    return extend({}, mData, mCustomData);\n  },\n  /**\n   * Returns the first day of the week defined by the calendar week numbering algorithm\n   * set in the configuration, see {@link sap.ui.core.Configuration#setCalendarWeekNumbering}.\n   * If no specific calendar week numbering algorithm is configured the value set by\n   * {@link sap.ui.core.Configuration#setFirstDayOfWeek} is returned. Otherwise the first day\n   * of the week is determined by the current locale, see {@link sap.ui.core.LocaleData#getFirstDayOfWeek}.\n   *\n   * Days are encoded as integer where Sunday=0, Monday=1 etc.\n   *\n   * @returns {int} The first day of week\n   * @override sap.ui.core.LocalData#getFirstDayOfWeek\n   * @since 1.113.0\n   */\n  getFirstDayOfWeek: function () {\n    var sCalendarWeekNumbering = Configuration.getCalendarWeekNumbering();\n    if (sCalendarWeekNumbering === CalendarWeekNumbering.Default) {\n      return LocaleData.prototype.getFirstDayOfWeek.call(this);\n    }\n    return CalendarWeekNumbering.getWeekConfigurationValues(sCalendarWeekNumbering).firstDayOfWeek;\n  },\n  /**\n   * Returns the required minimal number of days for the first week of a year defined by the\n   * calendar week numbering algorithm set in the configuration,\n   * see {@link sap.ui.core.Configuration#setCalendarWeekNumbering}.\n   * If no specific calendar week numbering algorithm is configured the required minimal number\n   * of days for the first week of a year is determined by the current locale,\n   * see {@link sap.ui.core.LocaleData#getMinimalDaysInFirstWeek}.\n   *\n   * @returns {int} The required minimal number of days for the first week of a year\n   * @override sap.ui.core.LocalData#getMinimalDaysInFirstWeek\n   * @since 1.113.0\n   */\n  getMinimalDaysInFirstWeek: function () {\n    var sCalendarWeekNumbering = Configuration.getCalendarWeekNumbering();\n    if (sCalendarWeekNumbering === CalendarWeekNumbering.Default) {\n      return LocaleData.prototype.getMinimalDaysInFirstWeek.call(this);\n    }\n    return CalendarWeekNumbering.getWeekConfigurationValues(sCalendarWeekNumbering).minimalDaysInFirstWeek;\n  }\n});\n\n/**\n *\n */\nLocaleData.getInstance = function (oLocale) {\n  oLocale = Locale._getCoreLocale(oLocale);\n  return oLocale.hasPrivateUseSubtag(\"sapufmt\") ? new CustomLocaleData(oLocale) : new LocaleData(oLocale);\n};\nLocaleData._cldrLocales = _cldrLocales;\n// maps a locale to a map of time zone translations, which maps an IANA time zone ID to the translated time zone\n// name\nLocaleData._mTimezoneTranslations = {};\nconst rContainsSymbol = new RegExp(\"[\" + Object.keys(mCLDRSymbols).join(\"\") + \"]\");\nconst rTextWithOptionalSpacesAtStartAndEnd = /^(\\s)?(.*?)(\\s)?$/;\n\n/**\n * Returns the escaped value if the given value contains CLDR symbols.\n *\n * @param {string} [sValue=\"\"]\n *   The value to be checked and escaped if needed; the value must not contain '\n * @returns {string}\n *   The escaped value; only the string between one optional space at the beginning and at the\n *   end is escaped\n */\nLocaleData._escapeIfNeeded = function (sValue) {\n  if (sValue === undefined) {\n    return \"\";\n  }\n  if (rContainsSymbol.test(sValue)) {\n    return sValue.replace(rTextWithOptionalSpacesAtStartAndEnd, \"$1'$2'$3\");\n  }\n  return sValue;\n};\nexport default LocaleData;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n// Provides type sap.ui.core.date.CalendarUtils.\nimport CalendarWeekNumbering from \"./CalendarWeekNumbering.js\";\nimport Configuration from \"../Configuration.js\";\nimport LocaleData from \"../LocaleData.js\";\n/**\n * Provides calendar-related utilities.\n *\n * @namespace\n * @alias module:sap/ui/core/date/CalendarUtils\n * @public\n * @since 1.108.0\n */\nvar CalendarUtils = {\n  /**\n   * Resolves calendar week configuration.\n   *\n   * Returns an object with the following fields:\n   * <ul>\n   *   <li><code>firstDayOfWeek</code>: specifies the first day of the week starting with\n   *   <code>0</code> (which is Sunday)</li>\n   *   <li><code>minimalDaysInFirstWeek</code>: minimal days at the beginning of the year\n   *   which define the first calendar week</li>\n   * </ul>\n   *\n   * @param {sap.ui.core.date.CalendarWeekNumbering} [sCalendarWeekNumbering]\n   *   The calendar week numbering; if omitted, the calendar week numbering of the Configuration\n   *   is used; see {@link sap.ui.core.Configuration#getCalendarWeekNumbering}. If this value is\n   *   <code>Default</code> the returned calendar week configuration is derived from the given\n   *   <code>oLocale</code>.\n   * @param {sap.ui.core.Locale} [oLocale]\n   *   The locale to use; if not provided, this falls back to the format locale from the\n   *   Configuration; see {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale}.\n   *   Is only used when <code>sCalendarWeekNumbering</code> is set to <code>Default</code>.\n   * @returns {{firstDayOfWeek: int, minimalDaysInFirstWeek: int}|undefined}\n   *   The calendar week configuration, or <code>undefined<code> for an invalid value of\n   *   <code>sap.ui.core.date.CalendarWeekNumbering</code>.\n   * @public\n   * @since 1.108.0\n   */\n  getWeekConfigurationValues: function (sCalendarWeekNumbering, oLocale) {\n    var oLocaleData, oWeekConfigurationValues;\n    if (!sCalendarWeekNumbering) {\n      return CalendarUtils.getWeekConfigurationValues(Configuration.getCalendarWeekNumbering(), oLocale);\n    }\n    oWeekConfigurationValues = CalendarWeekNumbering.getWeekConfigurationValues(sCalendarWeekNumbering);\n    if (oWeekConfigurationValues) {\n      return oWeekConfigurationValues;\n    }\n    if (sCalendarWeekNumbering === CalendarWeekNumbering.Default) {\n      oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n      oLocaleData = LocaleData.getInstance(oLocale);\n      return {\n        firstDayOfWeek: oLocaleData.getFirstDayOfWeek(),\n        minimalDaysInFirstWeek: oLocaleData.getMinimalDaysInFirstWeek()\n      };\n    }\n    return undefined;\n  }\n};\nexport default CalendarUtils;", "/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\nimport Configuration from \"../Configuration.js\";\nimport TimezoneUtil from \"../format/TimezoneUtil.js\";\nvar aAllParts = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"fractionalSecond\"],\n  // \"2023\", \"2023-01\", \"2023-01-20\", \"+002023-01-20\" are parsed by JavaScript Date as UTC\n  // timestamps, whereas \"798\", \"2023-1\", \"2023-01-5\" are parsed as local dates.\n  // If \"Z\", \"GMT\" or a time zone offset (e.g. 00:00+0530) is included in the input string,\n  // the string is parsed as a UTC related timestamp\n  rIsUTCString = /Z|GMT|:.*[\\+|\\-]|^([\\+|\\-]\\d{2})?\\d{4}(-\\d{2}){0,2}$/,\n  aWeekday = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  aMonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n  mWeekdayToDay = {\n    Sun: 0,\n    Mon: 1,\n    Tue: 2,\n    Wed: 3,\n    Thu: 4,\n    Fri: 5,\n    Sat: 6\n  };\n\n/**\n * Pads the start of the absolute given value with zeros up to the given length. If the given\n * value is negative the leading minus is added in front of the zeros.\n *\n * @param {int} iValue The value to be padded\n * @param {int} iLength The minimal length of the resulting string excluding the minus sign\n * @returns {string} The padded string\n */\nfunction addLeadingZeros(iValue, iLength) {\n  return (iValue < 0 ? \"-\" : \"\") + Math.abs(iValue).toString().padStart(iLength, \"0\");\n}\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * DO NOT call the constructor for UI5Date directly; use <code>UI5Date.getInstance</code>.\n *\n * @param {object} vDateParts\n *   An array like object containing the arguments as passed to\n *   <code>UI5Date.getInstance</code>\n * @param {string} sTimezoneID\n *   The time zone ID to use for local methods of <code>Date</code>\n *\n * @alias module:sap/ui/core/date/UI5Date\n * @author SAP SE\n * @extends Date\n * @class A date implementation considering the configured time zone\n *\n *   A subclass of JavaScript <code>Date</code> that considers the configured time zone, see\n *   {@link sap.ui.core.Configuration#getTimezone}. All JavaScript <code>Date</code> functions\n *   that use the local browser time zone, like <code>getDate</code>,\n *   <code>setDate</code>, and <code>toString</code>, are overwritten and use the\n *   configured time zone to compute the values.\n *\n *   Use {@link module:sap/ui/core/date/UI5Date.getInstance} to create new date instances.\n *\n *   <b>Note:</b> Adjusting the time zone in a running application can lead to unexpected data\n *   inconsistencies. For more information, see {@link sap.ui.core.Configuration#setTimezone}.\n *\n * @hideconstructor\n * @public\n * @since 1.111.0\n * @version 1.120.5\n */\nfunction UI5Date(vDateParts, sTimezoneID) {\n  var oDateInstance = UI5Date._createDateInstance(vDateParts);\n  // mark internal properties not enumerable -> deepEqual handles this as a Date instance\n  Object.defineProperties(this, {\n    sTimezoneID: {\n      value: sTimezoneID\n    },\n    oDate: {\n      value: oDateInstance,\n      writable: true\n    },\n    oDateParts: {\n      value: undefined,\n      writable: true\n    }\n  });\n  if (isNaN(oDateInstance)) {\n    return;\n  }\n  if (vDateParts.length > 1 || vDateParts.length === 1 && typeof vDateParts[0] === \"string\" && !rIsUTCString.test(vDateParts[0])) {\n    this._setParts(aAllParts,\n    // JavaScript Date parsed the arguments already in local browser time zone\n    [oDateInstance.getFullYear(), oDateInstance.getMonth(), oDateInstance.getDate(), oDateInstance.getHours(), oDateInstance.getMinutes(), oDateInstance.getSeconds(), oDateInstance.getMilliseconds()]);\n  }\n}\nUI5Date.prototype = Object.create(Date.prototype, {\n  constructor: {\n    value: Date\n  }\n});\n// QUnit uses Object.prototype.toString.call and expects \"[object Date]\" for dates; UI5Date\n// shall be treated as a JavaScript Date so Symbol.toStringTag has to be \"Date\"\nUI5Date.prototype[Symbol.toStringTag] = \"Date\";\n\n/**\n * Returns the value for the requested date part (e.g. \"month\", \"year\", \"hour\") of this date\n * according to the configured time zone.\n *\n * @param {string} sPart The date part name\n * @returns {int} The value of the date part\n *\n * @private\n */\nUI5Date.prototype._getPart = function (sPart) {\n  var iResult;\n  if (isNaN(this.oDate)) {\n    return NaN;\n  }\n  this.oDateParts = this.oDateParts || TimezoneUtil._getParts(this.oDate, this.sTimezoneID);\n  if (sPart === \"weekday\") {\n    return mWeekdayToDay[this.oDateParts.weekday];\n  }\n  iResult = parseInt(this.oDateParts[sPart]);\n  if (sPart === \"month\") {\n    iResult -= 1;\n  } else if (sPart === \"year\") {\n    if (this.oDateParts.era === \"B\") {\n      iResult = 1 - iResult;\n    }\n  }\n  return iResult;\n};\n\n/**\n * Updates this date instance by setting the given parts in the configured time zone.\n *\n * @param {string[]} aParts\n *   The names of the date parts to be updated, supported names are: \"year\", \"month\", \"day\",\n *   \"hour\", \"minute\", \"second\", \"fractionalSecond\"\n * @param {object} aValues\n *   The arguments object of the local setters\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be created\n *\n * @private\n */\nUI5Date.prototype._setParts = function (aParts, aValues) {\n  var i,\n    oCurrentDateParts,\n    oNewDateAsUTCTimestamp,\n    iNewTimestamp,\n    sPart,\n    vValue,\n    oDateParts = {},\n    iMaxLength = Math.min(aParts.length, aValues.length);\n  if (iMaxLength === 0) {\n    return this.setTime(NaN);\n  }\n  for (i = 0; i < iMaxLength; i += 1) {\n    // convert the value to number as JavaScript Date does it;\n    // +\"\" -> 0, +null -> 0, +undefined -> NaN, +\"foo\" -> NaN, +\"4\" -> 4\n    vValue = parseInt(+aValues[i]);\n    sPart = aParts[i];\n    if (isNaN(vValue)) {\n      return this.setTime(NaN);\n    }\n    if (sPart === \"month\") {\n      vValue += 1;\n    } else if (sPart === \"year\") {\n      if (vValue <= 0) {\n        vValue = 1 - vValue;\n        oDateParts.era = \"B\";\n      } else {\n        oDateParts.era = \"A\";\n      }\n    }\n    oDateParts[sPart] = vValue.toString();\n  }\n  if (this.oDateParts) {\n    oCurrentDateParts = this.oDateParts;\n  } else if (isNaN(this.oDate)) {\n    //era and year are given at least\n    oCurrentDateParts = {\n      day: \"1\",\n      fractionalSecond: \"0\",\n      hour: \"0\",\n      minute: \"0\",\n      month: \"1\",\n      second: \"0\"\n    };\n  } else {\n    oCurrentDateParts = TimezoneUtil._getParts(this.oDate, this.sTimezoneID);\n  }\n  oDateParts = Object.assign({}, oCurrentDateParts, oDateParts);\n\n  // NaN may happen if no year is given if current date is invalid\n  oNewDateAsUTCTimestamp = TimezoneUtil._getDateFromParts(oDateParts);\n  if (isNaN(oNewDateAsUTCTimestamp)) {\n    return this.setTime(NaN);\n  }\n  iNewTimestamp = oNewDateAsUTCTimestamp.getTime() + TimezoneUtil.calculateOffset(oNewDateAsUTCTimestamp, this.sTimezoneID) * 1000;\n  return this.setTime(iNewTimestamp);\n};\n\n/**\n * Clones this UI5Date instance.\n *\n * @returns {Date|module:sap/ui/core/date/UI5Date} The cloned date instance\n *\n * @private\n */\nUI5Date.prototype.clone = function () {\n  return UI5Date.getInstance(this);\n};\n\n/**\n * Returns the day of the month of this date instance according to the configured time zone,\n * see <code>Date.prototype.getDate</code>.\n *\n * @returns {int}\n *   A number between 1 and 31 representing the day of the month of this date instance according\n *   to the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getDate = function () {\n  return this._getPart(\"day\");\n};\n\n/**\n * Returns the day of the week of this date instance according to the configured time zone,\n * see <code>Date.prototype.getDay</code>.\n *\n * @returns {int}\n *   A number between 0 (Sunday) and 6 (Saturday) representing the day of the week of this date\n *   instance according to the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getDay = function () {\n  return this._getPart(\"weekday\");\n};\n\n/**\n * Returns the year of this date instance according to the configured time zone,\n * see <code>Date.prototype.getFullYear</code>.\n *\n * @returns {int} The year of this date instance according to the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getFullYear = function () {\n  return this._getPart(\"year\");\n};\n\n/**\n * Returns the hours of this date instance according to the configured time zone, see\n * <code>Date.prototype.getHours</code>.\n *\n * @returns {int}\n *   A number between 0 and 23 representing the hours of this date instance according to the\n *   configured time zone\n *\n * @public\n */\nUI5Date.prototype.getHours = function () {\n  return this._getPart(\"hour\");\n};\n\n/**\n * Returns the milliseconds of this date instance according to the configured time zone,\n * see <code>Date.prototype.getMilliseconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of this date instance according to\n *   the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getMilliseconds = function () {\n  return this._getPart(\"fractionalSecond\");\n};\n\n/**\n * Returns the minutes of this date instance according to the configured time zone,\n * see <code>Date.prototype.getMinutes</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of this date instance according to the\n *   configured time zone\n *\n * @public\n */\nUI5Date.prototype.getMinutes = function () {\n  return this._getPart(\"minute\");\n};\n\n/**\n * Returns the month index of this date instance according to the configured time zone,\n * see <code>Date.prototype.getMonth</code>.\n *\n * @returns {int}\n *   The month index between 0 (January) and 11 (December) of this date instance according to\n *   the configured time zone\n *\n * @public\n */\nUI5Date.prototype.getMonth = function () {\n  return this._getPart(\"month\");\n};\n\n/**\n * Returns the seconds of this date instance according to the configured time zone,\n * see <code>Date.prototype.getSeconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of this date instance according to the\n *   configured time zone\n *\n * @public\n */\nUI5Date.prototype.getSeconds = function () {\n  return this._getPart(\"second\");\n};\n\n/**\n * Returns the difference in minutes between the UTC and the configured time zone for this date,\n * see <code>Date.prototype.getTimezoneOffset</code>.\n *\n * @returns {int}\n *   The difference in minutes between the UTC and the configured time zone for this date\n *\n * @public\n */\nUI5Date.prototype.getTimezoneOffset = function () {\n  return TimezoneUtil.calculateOffset(this.oDate, this.sTimezoneID) / 60;\n};\n\n/**\n * Returns the year of this date instance minus 1900 according to the configured time zone,\n * see <code>Date.prototype.getYear</code>.\n *\n * @returns {int}\n *   The year of this date instance minus 1900 according to the configured time zone\n *\n * @deprecated As of version 1.111 as it is deprecated in the base class JavaScript Date; use\n *   {@link #getFullYear} instead\n * @public\n */\nUI5Date.prototype.getYear = function () {\n  return this._getPart(\"year\") - 1900;\n};\n\n/**\n * Sets the day of the month for this date instance considering the configured time zone,\n * see <code>Date.prototype.setDate</code>.\n *\n * @param {int} iDay\n *   An integer representing the new day value, see <code>Date.prototype.setDate</code>\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setDate = function (iDay) {\n  return this._setParts([\"day\"], arguments);\n};\n\n/**\n * Sets the year, month and day for this date instance considering the configured time zone,\n * see <code>Date.prototype.setFullYear</code>.\n *\n * @param {int} iYear An integer representing the new year value\n * @param {int} [iMonth] An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setFullYear = function (iYear, iMonth, iDay) {\n  return this._setParts([\"year\", \"month\", \"day\"], arguments);\n};\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for this date instance considering the\n * configured time zone, see <code>Date.prototype.setHours</code>.\n *\n * @param {int} iHours An integer representing the new hour value\n * @param {int} [iMinutes] An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setHours = function (iHours, iMinutes, iSeconds, iMilliseconds) {\n  return this._setParts([\"hour\", \"minute\", \"second\", \"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets the milliseconds for this date instance considering the configured time zone, see\n * <code>Date.prototype.setMilliseconds</code>.\n *\n * @param {int} iMilliseconds An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setMilliseconds = function (iMilliseconds) {\n  return this._setParts([\"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets the minutes, seconds and milliseconds for this date instance considering the configured\n * time zone, see <code>Date.prototype.setMinutes</code>.\n *\n * @param {int} iMinutes An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setMinutes = function (iMinutes, iSeconds, iMilliseconds) {\n  return this._setParts([\"minute\", \"second\", \"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets the month and day for this date instance considering the configured time zone,\n * see <code>Date.prototype.setMonth</code>.\n *\n * @param {int} iMonth An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setMonth = function (iMonth, iDay) {\n  return this._setParts([\"month\", \"day\"], arguments);\n};\n\n/**\n * Sets the seconds and milliseconds for this date instance considering the configured time zone,\n * see <code>Date.prototype.setSeconds</code>.\n *\n * @param {int} iSeconds An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setSeconds = function (iSeconds, iMilliseconds) {\n  return this._setParts([\"second\", \"fractionalSecond\"], arguments);\n};\n\n/**\n * Sets this date object to the given time represented by a number of milliseconds based on the\n * UNIX epoch and resets the previously set date parts, see\n * <code>Date.prototype.setTime</code>.\n *\n * @param {int} iTime The date time in milliseconds based in the UNIX epoch\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @public\n */\nUI5Date.prototype.setTime = function (iTime) {\n  this.oDateParts = undefined;\n  return this.oDate.setTime(iTime);\n};\n\n/**\n * Sets the year for this date instance plus 1900 considering the configured time zone, see\n * <code>Date.prototype.setYear</code>.\n *\n * @param {int} iYear The year which is to be set for this date. If iYear is a number between 0\n *   and 99 (inclusive), then the year for this date is set to 1900 + iYear. Otherwise, the year\n *   for this date is set to iYear.\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @deprecated As of version 1.111 as it is deprecated in the base class JavaScript Date; use\n *   {@link #setFullYear} instead\n * @public\n */\nUI5Date.prototype.setYear = function (iYear) {\n  var iValue = parseInt(iYear);\n  iValue = iValue < 0 || iValue > 99 ? iValue : iValue + 1900;\n  return this._setParts([\"year\"], [iValue]);\n};\n\n/**\n * Returns this date object to the given time represented by a number of milliseconds based on the\n * UNIX epoch, see <code>Date.prototype.getTime</code>.\n *\n * @returns {int}\n *   The timestamp in milliseconds of this date based on the UNIX epoch, or <code>NaN</code> if\n *   the date is an invalid date\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getTime\n * @public\n */\n\n/**\n * Returns the day of the month of this date instance according to universal time,\n * see <code>Date.prototype.getUTCDate</code>.\n *\n * @returns {int}\n *   A number between 1 and 31 representing the day of the month of this date instance according\n *   to universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCDate\n * @public\n */\n\n/**\n *\n * Returns the day of the week of this date instance according to universal time,\n * see <code>Date.prototype.getUTCDay</code>.\n *\n * @returns {int}\n *   A number between 0 (Sunday) and 6 (Saturday) representing the day of the week of this date\n *   instance according to universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCDay\n * @public\n */\n\n/**\n * Returns the year of this date instance according to universal time, see\n * <code>Date.prototype.getUTCFullYear</code>.\n *\n * @returns {int} The year of this date instance according to universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCFullYear\n * @public\n */\n\n/**\n * Returns the hours of this date instance according to universal time, see\n * <code>Date.prototype.getUTCHours</code>.\n *\n * @returns {int}\n *   A number between 0 and 23 representing the hours of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCHours\n * @public\n */\n\n/**\n * Returns the milliseconds of this date instance according to universal time,\n * see <code>Date.prototype.getUTCMilliseconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCMilliseconds\n * @public\n */\n\n/**\n * Returns the minutes of this date instance according to universal time, see\n * <code>Date.prototype.getUTCMinutes</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCMinutes\n * @public\n */\n\n/**\n * Returns the month index of this date instance according to universal time, see\n * <code>Date.prototype.getUTCMonth</code>.\n *\n * @returns {int}\n *   The month index between 0 (January) and 11 (December) of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCMonth\n * @public\n */\n\n/**\n * Returns the seconds of this date instance according to universal time, see\n * <code>Date.prototype.getUTCSeconds</code>.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of this date instance according to\n *   universal time\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.getUTCSeconds\n * @public\n */\n\n/**\n * Sets the day of the month for this date instance according to universal time,\n * see <code>Date.prototype.setUTCDate</code>.\n *\n * @param {int} iDay\n *   An integer representing the new day value, see <code>Date.prototype.setUTCDate</code>\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCDate\n * @public\n */\n\n/**\n * Sets the year, month and day for this date instance according to universal time,\n * see <code>Date.prototype.setUTCFullYear</code>.\n *\n * @param {int} iYear An integer representing the new year value\n * @param {int} [iMonth] An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCFullYear\n * @public\n */\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for this date instance according to\n * universal time, see <code>Date.prototype.setUTCHours</code>.\n *\n * @param {int} iHours An integer representing the new hour value\n * @param {int} [iMinutes] An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCHours\n * @public\n */\n\n/**\n * Sets the milliseconds for this date instance according to universal time, see\n * <code>Date.prototype.setUTCMilliseconds</code>.\n *\n * @param {int} iMilliseconds An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCMilliseconds\n * @public\n */\n\n/**\n * Sets the minutes, seconds and milliseconds for this date instance according to universal\n * time, see <code>Date.prototype.setUTCMinutes</code>.\n *\n * @param {int} iMinutes An integer representing the new minutes value\n * @param {int} [iSeconds] An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCMinutes\n * @public\n */\n\n/**\n * Sets the month and day for this date instance according to universal time,\n * see <code>Date.prototype.setUTCMonth</code>.\n *\n * @param {int} iMonth An integer representing the new month index\n * @param {int} [iDay] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCMonth\n * @public\n */\n\n/**\n * Sets the seconds and milliseconds for this date instance  according to universal time,\n * see <code>Date.prototype.setUTCSeconds</code>.\n *\n * @param {int} iSeconds An integer representing the new seconds value\n * @param {int} [iMilliseconds] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.setUTCSeconds\n * @public\n */\n\n/**\n * Converts this date to a string, interpreting it in the UTC time zone, see\n * <code>Date.prototype.toGMTString</code>.\n *\n * @returns {string} The converted date as string in the UTC time zone\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toGMTString\n * @public\n */\n\n/**\n * Converts this date to a string in ISO format in the UTC offset zero time zone, as denoted\n * by the suffix <code>Z</code>, see <code>Date.prototype.toISOString</code>.\n *\n * @returns {string}\n *   The converted date as a string in ISO format, in the UTC offset zero time zone\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toISOString\n * @public\n */\n\n/**\n * Returns a string representation of this date object, see <code>Date.prototype.toJSON</code>.\n *\n * @returns {string} The date object representation as a string\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toJSON\n * @public\n */\n\n/**\n * Returns the date portion of this date object interpreted in the configured time zone in\n * English, see <code>Date.prototype.toDateString</code>.\n *\n * @returns {string}\n *   The date portion of this date object interpreted in the configured time zone in English\n *\n * @public\n */\nUI5Date.prototype.toDateString = function () {\n  if (isNaN(this.oDate)) {\n    return this.oDate.toDateString();\n  }\n  return aWeekday[this.getDay()] + \" \" + aMonths[this.getMonth()] + \" \" + addLeadingZeros(this.getDate(), 2) + \" \" + addLeadingZeros(this.getFullYear(), 4);\n};\n\n/**\n * Returns a string with a language-dependent representation of the date part of this date\n * object interpreted by default in the configured time zone, see\n * <code>Date.prototype.toLocaleDateString</code>.\n *\n * @param {string} [sLocale=sap.ui.core.Configuration.getLanguageTag()]\n *   The locale used for formatting; the configured locale by default\n * @param {object} [oOptions]\n *   The options object used for formatting, corresponding to the options parameter of the\n *   <code>Intl.DateTimeFormat</code> constructor\n * @param {string} [oOptions.timeZone=sap.ui.core.Configuration.getTimezone()]\n *   The IANA time zone ID; the configured time zone by default\n * @returns {string}\n *   The language-dependent representation of the date part of this date object\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toLocaleDateString\n * @public\n */\n\n/**\n * Returns a string with a language-dependent representation of this date object interpreted by\n * default in the configured time zone, see <code>Date.prototype.toLocaleString</code>.\n *\n * @param {string} [sLocale=sap.ui.core.Configuration.getLanguageTag()]\n *   The locale used for formatting; the configured locale by default\n * @param {object} [oOptions]\n *   The options object used for formatting, corresponding to the options parameter of the\n *   <code>Intl.DateTimeFormat</code> constructor\n * @param {string} [oOptions.timeZone=sap.ui.core.Configuration.getTimezone()]\n *   The IANA time zone ID; the configured time zone by default\n * @returns {string}\n *   The language-dependent representation of this date object\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toLocaleString\n * @public\n */\n\n/**\n * Returns a string with a language-dependent representation of the time part of this date\n * object interpreted by default in the configured time zone, see\n * <code>Date.prototype.toLocaleTimeString</code>.\n *\n * @param {string} [sLocale=sap.ui.core.Configuration.getLanguageTag()]\n *   The locale used for formatting; the configured locale by default\n * @param {object} [oOptions]\n *   The options object used for formatting, corresponding to the options parameter of the\n *   <code>Intl.DateTimeFormat</code> constructor\n * @param {string} [oOptions.timeZone=sap.ui.core.Configuration.getTimezone()]\n *   The IANA time zone ID; the configured time zone by default\n * @returns {string}\n *   The language-dependent representation of the time part of this date object\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toLocaleTimeString\n * @public\n */\n\n/**\n * Returns a string representing this date object interpreted in the configured time zone.\n *\n * @returns {string}\n *   A string representing this date object interpreted in the configured time zone\n *\n * @public\n */\nUI5Date.prototype.toString = function () {\n  if (isNaN(this.oDate)) {\n    return this.oDate.toString();\n  }\n  return this.toDateString() + \" \" + this.toTimeString();\n};\n\n/**\n * Returns the time portion of this date object interpreted in the configured time zone in English.\n *\n * @returns {string}\n *   The time portion of this date object interpreted in the configured time zone in English\n *\n * @public\n */\nUI5Date.prototype.toTimeString = function () {\n  var iHours, iMinutes, sSign, iTimeZoneOffset;\n  if (isNaN(this.oDate)) {\n    return this.oDate.toTimeString();\n  }\n  iTimeZoneOffset = this.getTimezoneOffset();\n  sSign = iTimeZoneOffset > 0 ? \"-\" : \"+\";\n  iHours = Math.floor(Math.abs(iTimeZoneOffset) / 60);\n  iMinutes = Math.abs(iTimeZoneOffset) % 60;\n\n  // ommit the optional, implementation dependent time zone name\n  return addLeadingZeros(this.getHours(), 2) + \":\" + addLeadingZeros(this.getMinutes(), 2) + \":\" + addLeadingZeros(this.getSeconds(), 2) + \" GMT\" + sSign + addLeadingZeros(iHours, 2) + addLeadingZeros(iMinutes, 2);\n};\n\n/**\n * Converts this date to a string, interpreting it in the UTC time zone, see\n * <code>Date.prototype.toUTCString</code>.\n *\n * @returns {string} The converted date as a string in the UTC time zone\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.toUTCString\n * @public\n */\n\n/**\n * Returns the value of this date object in milliseconds based on the UNIX epoch, see\n * <code>Date.prototype.valueOf</code>.\n *\n * @returns {int} The primitive value of this date object in milliseconds based on the UNIX epoch\n *\n * @function\n * @name module:sap/ui/core/date/UI5Date.prototype.valueOf\n * @public\n */\n\n// functions that simply delegate to the inner date instance\n[\"getTime\", \"getUTCDate\", \"getUTCDay\", \"getUTCFullYear\", \"getUTCHours\", \"getUTCMilliseconds\", \"getUTCMinutes\", \"getUTCMonth\", \"getUTCSeconds\", \"toGMTString\", \"toISOString\", \"toJSON\", \"toUTCString\", \"valueOf\"].forEach(function (sMethod) {\n  UI5Date.prototype[sMethod] = function () {\n    return this.oDate[sMethod].apply(this.oDate, arguments);\n  };\n});\n[\"toLocaleDateString\", \"toLocaleString\", \"toLocaleTimeString\"].forEach(function (sMethod) {\n  UI5Date.prototype[sMethod] = function (sLocale, oOptions) {\n    return this.oDate[sMethod](sLocale || Configuration.getLanguageTag(), Object.assign({\n      timeZone: this.sTimezoneID\n    }, oOptions));\n  };\n});\n\n// before delegating to the inner date instance clear the cached date parts\n[\"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\", \"setUTCMonth\", \"setUTCSeconds\"].forEach(function (sMethod) {\n  UI5Date.prototype[sMethod] = function () {\n    this.oDateParts = undefined;\n    return this.oDate[sMethod].apply(this.oDate, arguments);\n  };\n});\n\n/**\n * Creates a JavaScript Date instance.\n *\n * @param {object} vParts\n *   The <code>arguments</code> object which is given to\n *   <code>module:sap/ui/core/date/UI5Date.getInstance</code>\n * @returns {Date}\n *   A JavaScript Date instance\n *\n * @private\n */\nUI5Date._createDateInstance = function (vParts) {\n  if (vParts[0] instanceof Date) {\n    vParts[0] = vParts[0].valueOf();\n  }\n\n  // ES5 variant of new Date(...vParts)\n  return new (Function.prototype.bind.apply(Date, [].concat.apply([null], vParts)))();\n};\n\n/**\n * Creates a date instance (either JavaScript Date or <code>UI5Date</code>) which considers the\n * configured time zone wherever JavaScript Date uses the local browser time zone, for example\n * in <code>getDate</code>, <code>toString</code>, or <code>setHours</code>. The supported\n * parameters are the same as the ones supported by the JavaScript Date constructor.\n *\n * <b>Note:</b> Adjusting the time zone in a running application can lead to unexpected data\n * inconsistencies. For more information, see {@link sap.ui.core.Configuration#setTimezone}.\n *\n * @param {int|string|Date|module:sap/ui/core/date/UI5Date|null} [vYearOrValue]\n *   Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vMonthIndex]\n *   Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vDay=1] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vHours=0] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vMinutes=0] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vSeconds=0] Same meaning as in the JavaScript Date constructor\n * @param {int|string} [vMilliseconds=0] Same meaning as in the JavaScript Date constructor\n * @returns {Date|module:sap/ui/core/date/UI5Date}\n *   The date instance that considers the configured time zone in all local getters and setters.\n *\n * @public\n * @see sap.ui.core.Configuration#getTimezone\n */\nUI5Date.getInstance = function () {\n  var sTimezone = Configuration.getTimezone();\n  if (sTimezone !== TimezoneUtil.getLocalTimezone()) {\n    return new UI5Date(arguments, sTimezone);\n  }\n  // time zones are equal -> use JavaScript Date as it is\n  return UI5Date._createDateInstance(arguments);\n};\n\n/**\n * Checks whether the given date object is a valid date, considers the configured time zone\n * and throws an error otherwise.\n *\n * @param {Date|module:sap/ui/core/date/UI5Date} oDate\n *   The date object created via <code>UI5Date.getInstance</code>\n * @throws {Error}\n *   If the given date object is not valid or does not consider the configured time zone\n *\n * @private\n */\nUI5Date.checkDate = function (oDate) {\n  if (isNaN(oDate.getTime())) {\n    throw new Error(\"The given Date is not valid\");\n  }\n  if (!(oDate instanceof UI5Date) && Configuration.getTimezone() !== TimezoneUtil.getLocalTimezone()) {\n    throw new Error(\"Configured time zone requires the parameter 'oDate' to be an instance of\" + \" sap.ui.core.date.UI5Date\");\n  }\n};\nexport default UI5Date;", "import Core from \"../Core.js\"; /*!\n                               * OpenUI5\n                               * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n                               * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n                               */\n// Provides class sap.ui.core.date.UniversalDate\nimport BaseObject from \"../../base/Object.js\";\nimport Configuration from \"../Configuration.js\";\nimport LocaleData from \"../LocaleData.js\";\nimport _Calendars from \"./_Calendars.js\";\nimport CalendarUtils from \"./CalendarUtils.js\";\nimport CalendarWeekNumbering from \"./CalendarWeekNumbering.js\";\nimport UI5Date from \"./UI5Date.js\";\n/**\n * Constructor for UniversalDate.\n *\n * @class\n * The UniversalDate is the base class of calendar date instances. It contains the static methods to create calendar\n * specific instances.\n *\n * The member variable <code>this.oDate</code> contains a date instance\n * (either JavaScript Date or <code>module:sap/ui/core/date/UI5Date</code>) which considers the\n * configured time zone wherever JavaScript Date uses the local browser time zone; see\n * {@link module:sap/ui/core/date/UI5Date#getInstance}. This is the source value of the date\n * information. The prototype contains getters and setters of the Date and is delegating them\n * to the internal date object. Implementations for specific calendars may override methods\n * needed for their specific calendar (e.g. getYear and getEra for Japanese emperor calendar).\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @alias sap.ui.core.date.UniversalDate\n */\nvar UniversalDate = BaseObject.extend(\"sap.ui.core.date.UniversalDate\", /** @lends sap.ui.core.date.UniversalDate.prototype */{\n  constructor: function () {\n    var clDate = UniversalDate.getClass();\n    return this.createDate(clDate, arguments);\n  }\n});\n\n/**\n * Delegates this method to the calender specific implementation.\n *\n * @returns {int}\n *   The number of milliseconds since January 1, 1970, 00:00:00 UTC based on the Gregorian\n *   calendar, for the given calendar specific arguments\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.UTC = function () {\n  var clDate = UniversalDate.getClass();\n  return clDate.UTC.apply(clDate, arguments);\n};\n\n/**\n * Returns a number representing the millisecond since January 1, 1970, 00:00:00 to the current date,\n * see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now Date.now}.\n *\n * @returns {int} A number representing the millisecond since January 1, 1970, 00:00:00 to the current date\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.now = function () {\n  return Date.now();\n};\n\n/**\n * Creates an object of the provided date class and with the given arguments.\n *\n * @param {function} clDate\n *   The constructor function for either <code>Date</code> or an implementation of\n *   <code>sap.ui.core.date.UniversalDate</code>\n * @param {object} aArgs\n *   The <code>arguments</code> object which is given to the constructor of the given date class\n *   to create the date object\n * @returns {sap.ui.core.date.UniversalDate|module:sap/ui/core/date/UI5Date}\n *   The created date, either an UI5Date or UniversalDate instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.createDate = function (clDate, aArgs) {\n  if (clDate === Date) {\n    return UI5Date.getInstance.apply(null, aArgs);\n  }\n  switch (aArgs.length) {\n    case 0:\n      return new clDate();\n    // new Date(new Date()) is officially not supported\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date\n    case 1:\n      return new clDate(aArgs[0] instanceof Date ? aArgs[0].getTime() : aArgs[0]);\n    case 2:\n      return new clDate(aArgs[0], aArgs[1]);\n    case 3:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2]);\n    case 4:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3]);\n    case 5:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4]);\n    case 6:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4], aArgs[5]);\n    case 7:\n      return new clDate(aArgs[0], aArgs[1], aArgs[2], aArgs[3], aArgs[4], aArgs[5], aArgs[6]);\n  }\n};\n\n/**\n * Returns an instance of UniversalDate, based on the calendar type from the configuration, or as explicitly\n * defined by parameter. The object contains getters and setters of the JavaScript Date and is delegating them\n * to an internal date object.\n *\n * Note: Prefer this method over calling <code>new UniversalDate</code> with an instance of <code>Date</code>.\n *\n * @param {Date|module:sap/ui/core/date/UI5Date|sap.ui.core.date.UniversalDate} [oDate]\n *   The date object, defaults to <code>UI5Date.getInstance()</code>\n * @param {sap.ui.core.CalendarType} [sCalendarType]\n *   The calendar type, defaults to <code>Core.getConfiguration().getCalendarType()</code>\n * @returns {sap.ui.core.date.UniversalDate}\n *   An instance of <code>UniversalDate</code>\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getInstance = function (oDate, sCalendarType) {\n  var clDate, oInstance;\n  if (oDate instanceof UniversalDate) {\n    oDate = oDate.getJSDate();\n  }\n  if (oDate && isNaN(oDate.getTime())) {\n    throw new Error(\"The given date object is invalid\");\n  }\n  if (!sCalendarType) {\n    sCalendarType = Configuration.getCalendarType();\n  }\n  clDate = UniversalDate.getClass(sCalendarType);\n  oInstance = Object.create(clDate.prototype);\n  oInstance.oDate = oDate ? UI5Date.getInstance(oDate) : UI5Date.getInstance();\n  oInstance.sCalendarType = sCalendarType;\n  return oInstance;\n};\n\n/**\n * Returns the constructor function of a subclass of <code>UniversalDate</code> for the given calendar type.\n * If no calendar type is given the globally configured calendar type is used.\n *\n * @param {sap.ui.core.CalendarType} sCalendarType the type of the used calendar\n *\n * @returns {function}\n *   The class of the given <code>sCalenderType</code>. If <code>sCalenderType</code> is not\n *   provided, the class of the configured calendar type is returned.\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getClass = function (sCalendarType) {\n  if (!sCalendarType) {\n    sCalendarType = Configuration.getCalendarType();\n  }\n  return _Calendars.get(sCalendarType);\n};\n\n/**\n * Returns the day of the month of the embedded date instance according to the configured time\n * zone and selected calender.\n *\n * @returns {int}\n *   A number representing the day of the month of the embedded date instance according\n *   to the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the day of the week of the embedded date instance according to the configured time zone and\n * selected calender.\n *\n * @returns {int}\n *   A number representing the day of the week of the embedded date instance according to the configured\n *   time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getDay\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the year of the embedded date instance according to the configured time zone and selected calender.\n *\n * @returns {int}\n *   The year of the embedded date instance according to the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the hours of the embedded date instance according to the configured time zone and selected\n * calender.\n *\n * @returns {int}\n *   A number representing the hours of the embedded date instance according to the configured time zone\n *   and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the milliseconds of the embedded date instance according to the configured time zone\n * and selected calender.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of the embedded date instance according to\n *   the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the minutes of the embedded date instance according to the configured time zone and selected calender.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of the embedded date instance according to the\n *   configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the month index of the embedded date instance according to the configured time zone\n * and selected calender.\n *\n * @returns {int}\n *   The month index of the embedded date instance according to the configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the seconds of the embedded date instance according to the configured time zone and selected calender.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of the embedded date instance according to the\n *   configured time zone and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the difference in minutes between the UTC and the configured time zone for the embedded date.\n *\n * @returns {int}\n *   The difference in minutes between the UTC and the configured time zone for the embedded date\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getTimezoneOffset\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the year of the embedded date instance minus 1900 according to the configured time zone and\n * selected calender. In case of the Gregorian calendar the 1900 is subtracted from the year value.\n *\n * @returns {int}\n *   The year of the embedded date instance (minus 1900 if the Gregorian calendar is selected)\n *   according to the configured time zone and selected calender\n *\n * @deprecated for the Gregorian calendar since version 1.111.0 as it is deprecated in\n *   JavaScript Date, it can be used with other calendars. It still is recommended to use\n *   {@link #getFullYear} instead, independent on the selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the timestamp in milliseconds of the embedded date based on the UNIX epoch.\n *\n * @returns {int}\n *   The timestamp in milliseconds of the embedded date based on the UNIX epoch, or <code>NaN</code> if\n *   the embedded date is an invalid date\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getTime\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the day of the month of the embedded date instance according to universal time and\n * selected calender.\n *\n * @returns {int}\n *   A number representing the day of the month of the embedded date instance according\n *   to universal time and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n *\n * Returns the day of the week of the embedded date instance according to universal time and\n * selected calender.\n *\n * @returns {int}\n *   A number representing the day of the week of the embedded date instance according to universal\n *   time and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCDay\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the year of the embedded date instance according to universal time and selected calender.\n *\n * @returns {int}\n *   The year of the embedded date instance according to universal time and selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the hours of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number representing the hours of the embedded date instance according to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the milliseconds of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number between 0 and 999 representing the milliseconds of the embedded date instance\n *   according to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the minutes of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the minutes of the embedded date instance according\n *   to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the month index of the embedded date instance according to universal time and\n * selected calender.\n *\n * @returns {int}\n *   The month index of the embedded date instance according to universal time and selected\n *   calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the seconds of the embedded date instance according to universal time.\n *\n * @returns {int}\n *   A number between 0 and 59 representing the seconds of the embedded date instance according\n *   to universal time\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.getUTCSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the day of the month for the embedded date instance considering the configured time zone\n * and selected calender.\n *\n * @param {int} iDay\n *   An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the year, month and day for the embedded date instance considering the configured time\n * zone and selected calender.\n *\n * @param {int} yearValue An integer representing the new year value\n * @param {int} [monthValue] An integer representing the new month index\n * @param {int} [dateValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for the embedded date instance considering\n * the configured time zone.\n *\n * @param {int} hoursValue An integer representing the new hours value\n * @param {int} [minutesValue] An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the milliseconds for the embedded date instance considering the configured time zone.\n *\n * @param {int} millisecondsValue An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the minutes, seconds and milliseconds for the embedded date instance considering the configured\n * time zone.\n *\n * @param {int} minutesValue An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the month and day for the embedded date instance considering the configured time zone and\n * selected calender.\n *\n * @param {int} monthValue An integer representing the new month index\n * @param {int} [dayValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the seconds and milliseconds for the embedded date instance considering the configured time zone.\n *\n * @param {int} secondsValue An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the day of the month for the embedded date instance according to universal time and\n * selected calender.\n *\n * @param {int} dayValue\n *   An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCDate\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the year, month and day for the embedded date instance according to universal time and\n * selected calender.\n *\n * @param {int} yearValue An integer representing the new year value\n * @param {int} [monthValue] An integer representing the new month index\n * @param {int} [dateValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCFullYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the hours, minutes, seconds and milliseconds for the embedded date instance according to\n * universal time.\n *\n * @param {int} hoursValue An integer representing the new hours value\n * @param {int} [minutesValue] An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCHours\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the milliseconds for the embedded date instance according to universal time.\n *\n * @param {int} msValue An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCMilliseconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the minutes, seconds and milliseconds for the embedded date instance according to universal\n * time.\n *\n * @param {int} minutesValue An integer representing the new minutes value\n * @param {int} [secondsValue] An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCMinutes\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the month and day for the embedded date instance according to universal time and\n * selected calender.\n *\n * @param {int} monthValue An integer representing the new month index\n * @param {int} [dateValue] An integer representing the new day value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCMonth\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the seconds and milliseconds for the embedded date instance according to universal time.\n *\n * @param {int} secondsValue An integer representing the new seconds value\n * @param {int} [msValue] An integer representing the new milliseconds value\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setUTCSeconds\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Sets the year for the embedded date instance considering the configured time zone and the\n * selected calender. In case of the Gregorian calendar, 1900 is added to the year value\n *\n * @param {int} yearValue\n *   An integer representing the new year value (plus 1900 for the Gregorian calendar)\n * @returns {int}\n *   The milliseconds of the new timestamp based on the UNIX epoch, or <code>NaN</code> if the\n *   timestamp could not be updated. The new timestamp is a Gregorian timestamp.\n *\n * @deprecated for the Gregorian calendar since version 1.111.0 as it is deprecated in\n *   JavaScript Date, it can be used with other calendars. It still is recommended to use\n *   {@link #getFullYear} instead, independent on the selected calender\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.setYear\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the date portion of the embedded date object interpreted in the configured time zone,\n * independent on the selected calendar.\n *\n * @returns {string}\n *   The date portion of the embedded date object interpreted in the configured time zone\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.toDateString\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns a string representing the embedded date object interpreted in the configured time\n * zone, independent on the selected calendar.\n *\n * @returns {string}\n *   A string representing the embedded date object interpreted in the configured time zone\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.toString\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n\n/**\n * Returns the value of the embedded date object in milliseconds based on the UNIX epoch.\n *\n * @returns {int} The primitive value of the embedded date object in milliseconds based on the UNIX epoch\n *\n * @function\n * @name sap.ui.core.date.UniversalDate.prototype.valueOf\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\n[\"getDate\", \"getMonth\", \"getFullYear\", \"getYear\", \"getDay\", \"getHours\", \"getMinutes\", \"getSeconds\", \"getMilliseconds\", \"getUTCDate\", \"getUTCMonth\", \"getUTCFullYear\", \"getUTCDay\", \"getUTCHours\", \"getUTCMinutes\", \"getUTCSeconds\", \"getUTCMilliseconds\", \"getTime\", \"valueOf\", \"getTimezoneOffset\", \"toString\", \"toDateString\", \"setDate\", \"setFullYear\", \"setYear\", \"setMonth\", \"setHours\", \"setMinutes\", \"setSeconds\", \"setMilliseconds\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCMonth\", \"setUTCHours\", \"setUTCMinutes\", \"setUTCSeconds\", \"setUTCMilliseconds\"].forEach(function (sName) {\n  UniversalDate.prototype[sName] = function () {\n    return this.oDate[sName].apply(this.oDate, arguments);\n  };\n});\n\n/**\n * Returns the date object representing the current calendar date value.\n *\n * @returns {Date|module:sap/ui/core/date/UI5Date} The date object representing the current calendar date value\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getJSDate = function () {\n  return this.oDate;\n};\n\n/**\n * Returns the calendar type of the current instance of a UniversalDate.\n *\n * @returns {sap.ui.core.CalendarType} The calendar type of the date\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getCalendarType = function () {\n  return this.sCalendarType;\n};\n\n/**\n * Returns the era index of for the embedded date instance.\n *\n * @returns {int} The index of the era for the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getEra = function () {\n  return UniversalDate.getEraByDate(this.sCalendarType, this.oDate.getFullYear(), this.oDate.getMonth(), this.oDate.getDate());\n};\n\n/**\n * Placeholder method which is overwritten by calendar specific implementations. General usage of\n * this method is to use it to set the era for the embedded date instance.\n *\n * @param {int} iEra\n *   An number representing the era index which is to be set for the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.setEra = function (iEra) {\n  // The default implementation does not support setting the era\n};\n\n/**\n * Returns the era index of for the embedded date instance in universal time.\n *\n * @returns {int} The index of the era for the embedded date instance in universal time\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getUTCEra = function () {\n  return UniversalDate.getEraByDate(this.sCalendarType, this.oDate.getUTCFullYear(), this.oDate.getUTCMonth(), this.oDate.getUTCDate());\n};\n\n/**\n * Placeholder method which is overwritten by calendar specific implementations. General usage of\n * this method is to use it to set the era for the embedded date instance in universal time.\n *\n * @param {int} iEra\n *   An number representing the era index which is to be set for the embedded date instance\n *   in universal time\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.setUTCEra = function (iEra) {\n  // The default implementation does not support setting the era\n};\n\n/**\n * Retrieves the calendar week\n *\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{week: int, year: int}} resulting calendar week, note: week index starts with <code>0</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.getWeek = function (oLocale, vCalendarWeekNumbering) {\n  return UniversalDate.getWeekByDate(this.sCalendarType, this.getFullYear(), this.getMonth(), this.getDate(), oLocale, vCalendarWeekNumbering);\n};\n\n/**\n * Sets the calendar week\n *\n * @param {{week: int, year: int}} oWeek the calendar week, note: week index starts with <code>0</code>,\n *   <code>oWeek.year</code> is optional and defaults to {@link sap.ui.core.date.UniversalDate#getFullYear}\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.setWeek = function (oWeek, oLocale, vCalendarWeekNumbering) {\n  var oDate = UniversalDate.getFirstDateOfWeek(this.sCalendarType, oWeek.year || this.getFullYear(), oWeek.week, oLocale, vCalendarWeekNumbering);\n  this.setFullYear(oDate.year, oDate.month, oDate.day);\n};\n\n/**\n * Retrieves the UTC calendar week\n *\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{week: int, year: int}} resulting calendar week, note: week index starts with <code>0</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.getUTCWeek = function (oLocale, vCalendarWeekNumbering) {\n  return UniversalDate.getWeekByDate(this.sCalendarType, this.getUTCFullYear(), this.getUTCMonth(), this.getUTCDate(), oLocale, vCalendarWeekNumbering);\n};\n\n/**\n * Sets the UTC calendar week\n *\n * @param {{week: int, year: int}} oWeek the calendar week, note: week index starts with <code>0</code>,\n *   <code>oWeek.year</code> is optional and defaults to {@link sap.ui.core.date.UniversalDate#getFullYear}\n * @param {sap.ui.core.Locale} [oLocale] the locale used to get the calendar week calculation properties, defaults to the formatLocale\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.prototype.setUTCWeek = function (oWeek, oLocale, vCalendarWeekNumbering) {\n  var oDate = UniversalDate.getFirstDateOfWeek(this.sCalendarType, oWeek.year || this.getFullYear(), oWeek.week, oLocale, vCalendarWeekNumbering);\n  this.setUTCFullYear(oDate.year, oDate.month, oDate.day);\n};\n\n/**\n * Returns the current quarter of the embedded date instance\n *\n * @returns {int} The quarter of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getQuarter = function () {\n  return Math.floor(this.getMonth() / 3);\n};\n\n/**\n * Returns the current quarter of the embedded date instance in universal time\n *\n * @returns {int} The quarter of the embedded date instance in universal time\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getUTCQuarter = function () {\n  return Math.floor(this.getUTCMonth() / 3);\n};\n\n/**\n * Returns an integer value depending on whether the embedded date instance time is set to the\n * afternoon or morning.\n *\n * @returns {int}\n *   An integer value which indicates which day period the embedded date instance is set to. If,\n *   date time is set in the morning time 0 (i.e. 0:00 - 11:59) or 1 if date time is set in the\n *   afternoon (i.e. 12:00 - 23:59).\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getDayPeriod = function () {\n  if (this.getHours() < 12) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * Returns an integer value depending on whether the embedded date instance time, is set to the\n * afternoon or morning, in universal time.\n *\n * @returns {int}\n *   An integer value which indicates which day period the embedded date instance is set to, in\n *   universal time. If, universal date time is set in the morning time 0 (i.e. 0:00 - 11:59) or\n *   1 if universal date time is set in the afternoon (i.e. 12:00 - 23:59).\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getUTCDayPeriod = function () {\n  if (this.getUTCHours() < 12) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n// TODO: These are currently needed for the DateFormat test, as the date used in the test\n// has been enhanced with these methods. Should be implemented using CLDR data.\n/**\n * Returns the short version of the time zone name of the embedded date instance.\n *\n * @returns {string} The short version of the name, of the time zone of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getTimezoneShort = function () {\n  if (this.oDate.getTimezoneShort) {\n    return this.oDate.getTimezoneShort();\n  }\n};\n\n/**\n * Returns the long version of the time zone name of the embedded date instance.\n *\n * @returns {string} The long version of the name, of the time zone of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.prototype.getTimezoneLong = function () {\n  if (this.oDate.getTimezoneLong) {\n    return this.oDate.getTimezoneLong();\n  }\n};\n\n/*\n * Helper methods for week calculations\n */\nvar iMillisecondsInWeek = 7 * 24 * 60 * 60 * 1000;\n\n/**\n * Retrieves the calendar week for a given date, specified by year, month, and day.\n *\n * @param {string} sCalendarType the calendar type, e.g. <code>\"Gregorian\"</code>\n * @param {int} iYear year, e.g. <code>2016</code>\n * @param {int} iMonth the month, e.g. <code>2</code>\n * @param {int} iDay the date, e.g. <code>3</code>\n * @param {sap.ui.core.Locale} [oLocale] the locale used for the week calculation, if oWeekConfig is not provided (falls back to the formatLocale)\n *   e.g. <code>new Locale(\"de-DE\")</code>\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{week: int, year: int}} resulting calendar week, note: week index starts with <code>0</code>, e.g. <code>{year: 2016, week: 8}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.getWeekByDate = function (sCalendarType, iYear, iMonth, iDay, oLocale, vCalendarWeekNumbering) {\n  vCalendarWeekNumbering = vCalendarWeekNumbering || Configuration.getCalendarWeekNumbering();\n  checkWeekConfig(vCalendarWeekNumbering);\n  oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n  var clDate = this.getClass(sCalendarType);\n  var oFirstDay = getFirstDayOfFirstWeek(clDate, iYear, oLocale, vCalendarWeekNumbering);\n  var oDate = new clDate(clDate.UTC(iYear, iMonth, iDay));\n  var iWeek, iLastYear, iNextYear, oLastFirstDay, oNextFirstDay;\n  var bSplitWeek = isSplitWeek(vCalendarWeekNumbering, oLocale);\n  if (bSplitWeek) {\n    iWeek = calculateWeeks(oFirstDay, oDate);\n  } else {\n    iLastYear = iYear - 1;\n    iNextYear = iYear + 1;\n    oLastFirstDay = getFirstDayOfFirstWeek(clDate, iLastYear, oLocale, vCalendarWeekNumbering);\n    oNextFirstDay = getFirstDayOfFirstWeek(clDate, iNextYear, oLocale, vCalendarWeekNumbering);\n    if (oDate >= oNextFirstDay) {\n      iYear = iNextYear;\n      iWeek = 0;\n    } else if (oDate < oFirstDay) {\n      iYear = iLastYear;\n      iWeek = calculateWeeks(oLastFirstDay, oDate);\n    } else {\n      iWeek = calculateWeeks(oFirstDay, oDate);\n    }\n  }\n  return {\n    year: iYear,\n    week: iWeek\n  };\n};\n\n/**\n * Retrieves the first day's date of the given week in the given year.\n *\n * @param {string} sCalendarType the calendar type, e.g. <code>\"Gregorian\"</code>\n * @param {int} iYear year, e.g. <code>2016</code>\n * @param {int} iWeek the calendar week index, e.g. <code>8</code>\n * @param {sap.ui.core.Locale} [oLocale] the locale used for the week calculation, if oWeekConfig is not provided (falls back to the formatLocale)\n *   e.g. <code>new Locale(\"de-DE\")</code>\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} [vCalendarWeekNumbering]\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   In case an object is provided, both properties <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code> must be set, otherwise an error is thrown.\n *   If calendar week numbering is not determined from the locale then {@link LocaleData#firstDayStartsFirstWeek} is ignored.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {{month: int, year: int, day: int}} the resulting date, e.g. <code>{year: 2016, month: 1, day: 29}</code>\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nUniversalDate.getFirstDateOfWeek = function (sCalendarType, iYear, iWeek, oLocale, vCalendarWeekNumbering) {\n  vCalendarWeekNumbering = vCalendarWeekNumbering || Configuration.getCalendarWeekNumbering();\n  checkWeekConfig(vCalendarWeekNumbering);\n  oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n  var clDate = this.getClass(sCalendarType);\n  var oFirstDay = getFirstDayOfFirstWeek(clDate, iYear, oLocale, vCalendarWeekNumbering);\n  var oDate = new clDate(oFirstDay.valueOf() + iWeek * iMillisecondsInWeek);\n  var bSplitWeek = isSplitWeek(vCalendarWeekNumbering, oLocale);\n  if (bSplitWeek && iWeek === 0 && oFirstDay.getUTCFullYear() < iYear) {\n    return {\n      year: iYear,\n      month: 0,\n      day: 1\n    };\n  }\n  return {\n    year: oDate.getUTCFullYear(),\n    month: oDate.getUTCMonth(),\n    day: oDate.getUTCDate()\n  };\n};\n\n/**\n * Determines if the split week algorithm should be applied (the first day of the first calendar\n * week of the year is January 1st).\n *\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and\n *   <code>minimalDaysInFirstWeek</code>\n * @param {sap.ui.core.Locale} oLocale the locale used for the week calculation\n * @returns {boolean} if the split week should be applied\n */\nfunction isSplitWeek(vCalendarWeekNumbering, oLocale) {\n  var oLocaleData = LocaleData.getInstance(oLocale);\n\n  // only applies for en_US with default CalendarWeekNumbering (WesternTraditional is default in en_US)\n  return (vCalendarWeekNumbering === CalendarWeekNumbering.Default || vCalendarWeekNumbering === CalendarWeekNumbering.WesternTraditional) && oLocaleData.firstDayStartsFirstWeek();\n}\n\n/**\n * Checks the calendar week configuration\n *\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>\n * @throws {TypeError} If:\n * <ul>\n *   <li>vCalendarWeekNumbering is an object and the fields <code>firstDayOfWeek</code> or <code>minimalDaysInFirstWeek</code>) are missing or have a non-numeric value</li>\n *   <li>vCalendarWeekNumbering is a string and has an invalid week numbering value</li>\n * </ul>\n */\nfunction checkWeekConfig(vCalendarWeekNumbering) {\n  if (typeof vCalendarWeekNumbering === \"object\") {\n    if (typeof vCalendarWeekNumbering.firstDayOfWeek !== \"number\" || typeof vCalendarWeekNumbering.minimalDaysInFirstWeek !== \"number\") {\n      throw new TypeError(\"Week config requires firstDayOfWeek and minimalDaysInFirstWeek to be set\");\n    }\n  } else if (!Object.values(CalendarWeekNumbering).includes(vCalendarWeekNumbering)) {\n    throw new TypeError(\"Illegal format option calendarWeekNumbering: '\" + vCalendarWeekNumbering + \"'\");\n  }\n}\n\n/**\n * Resolves the calendar week configuration\n *\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>\n * @param {sap.ui.core.Locale} [oLocale] locale to be used\n * @returns {{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} calendar week calculation configuration\n */\nfunction resolveCalendarWeekConfiguration(vCalendarWeekNumbering, oLocale) {\n  // be backward compatible\n  if (typeof vCalendarWeekNumbering === \"object\" && typeof vCalendarWeekNumbering.firstDayOfWeek === \"number\" && typeof vCalendarWeekNumbering.minimalDaysInFirstWeek === \"number\") {\n    return vCalendarWeekNumbering;\n  }\n  return CalendarUtils.getWeekConfigurationValues(vCalendarWeekNumbering, oLocale);\n}\n\n/**\n * Returns the first day of the first week in the given year.\n *\n * @param {UniversalDate} clDate the date class\n * @param {int} iYear year, e.g. <code>2016</code>\n * @param {sap.ui.core.Locale} [oLocale] the locale used for the week calculation, if oWeekConfig is not provided (falls back to the formatLocale)\n *   e.g. <code>new Locale(\"de-DE\")</code>\n * @param {sap.ui.core.date.CalendarWeekNumbering|{firstDayOfWeek: int, minimalDaysInFirstWeek: int}} vCalendarWeekNumbering\n *   calendar week numbering or object with fields <code>firstDayOfWeek</code> and <code>minimalDaysInFirstWeek</code>,\n *   the default is derived from <code>oLocale</code> but this parameter has precedence over oLocale if both are provided.\n *   e.g. <code>{firstDayOfWeek: 1, minimalDaysInFirstWeek: 4}</code>\n * @returns {Date} first day of the first week in the given year, e.g. <code>Mon Jan 04 2016 01:00:00 GMT+0100</code>\n */\nfunction getFirstDayOfFirstWeek(clDate, iYear, oLocale, vCalendarWeekNumbering) {\n  oLocale = oLocale || Configuration.getFormatSettings().getFormatLocale();\n  var oWeekConfig = resolveCalendarWeekConfiguration(vCalendarWeekNumbering, oLocale);\n  var iMinDays = oWeekConfig.minimalDaysInFirstWeek;\n  var iFirstDayOfWeek = oWeekConfig.firstDayOfWeek;\n  var oFirstDay = new clDate(clDate.UTC(iYear, 0, 1));\n  var iDayCount = 7;\n  if (isNaN(oFirstDay.getTime())) {\n    throw new Error(\"Could not determine the first day of the week, because the date \" + \"object is invalid\");\n  }\n  // Find the first day of the first week of the year\n  while (oFirstDay.getUTCDay() !== iFirstDayOfWeek) {\n    oFirstDay.setUTCDate(oFirstDay.getUTCDate() - 1);\n    iDayCount--;\n  }\n  // If less than min days are left, first week is one week later\n  if (iDayCount < iMinDays) {\n    oFirstDay.setUTCDate(oFirstDay.getUTCDate() + 7);\n  }\n  return oFirstDay;\n}\n\n/**\n * Returns the rounded amount of weeks a given time frame.\n *\n * @param {Date} oFromDate The beginning date of the time interval\n * @param {Date} oToDate The end date of the time interval\n * @returns {int} A rounded number which represents the amount of weeks in the given timer interval\n */\nfunction calculateWeeks(oFromDate, oToDate) {\n  return Math.floor((oToDate.valueOf() - oFromDate.valueOf()) / iMillisecondsInWeek);\n}\n\n/*\n * Helper methods for era calculations\n */\nvar mEras = {};\n\n/**\n * Returns an index of the era for the given date values in the given calender. For\n * an index to be returned the date value has to be within the era time period, i.e. the\n * timestamp value of the date has to be bigger or equal than the start timestamp of the era\n * or smaller than the end of the end period.\n *\n * @param {string} sCalendarType The given calender type which the eras available for selection\n * @param {int} iYear The year value for which the era is looked for\n * @param {int} iMonth The month value for which the era is looked for\n * @param {int} iDay The date value for which the era is looked for\n * @returns {int} The index of the found era for the given date values in the given calender\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getEraByDate = function (sCalendarType, iYear, iMonth, iDay) {\n  var aEras = getEras(sCalendarType),\n    // no need to use UI5Date.getInstance as only the UTC timestamp is used\n    iTimestamp = new Date(0).setUTCFullYear(iYear, iMonth, iDay),\n    oEra;\n  for (var i = aEras.length - 1; i >= 0; i--) {\n    oEra = aEras[i];\n    if (!oEra) {\n      continue;\n    }\n    if (oEra._start && iTimestamp >= oEra._startInfo.timestamp) {\n      return i;\n    }\n    if (oEra._end && iTimestamp < oEra._endInfo.timestamp) {\n      return i;\n    }\n  }\n};\n\n/**\n * Returns an index of the current era for the embedded date instance.\n *\n * @param {string} sCalendarType The calender type which defines the available eras to select from\n * @returns {int} The index of the current era of the embedded date instance\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getCurrentEra = function (sCalendarType) {\n  var oNow = UI5Date.getInstance();\n  return this.getEraByDate(sCalendarType, oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n};\n\n/**\n * Returns the start date of the selected era from the given era index, in the given calender type.\n *\n * @param {string} sCalendarType The calender type from which the era is to be picked\n * @param {int} iEra The given era index of the to be selected era\n * @returns {object|null}\n *   The start date object of the selected era. If no era can be found for the given index the first\n *   era of the selected calender is chosen. If the chosen era does not have a start date defined\n *   <code>null</code>\n *\n * @private\n * @ui5-restricted SAPUI5 Distribution Layer Libraries\n */\nUniversalDate.getEraStartDate = function (sCalendarType, iEra) {\n  var aEras = getEras(sCalendarType),\n    oEra = aEras[iEra] || aEras[0];\n  if (oEra._start) {\n    return oEra._startInfo;\n  }\n};\n\n/**\n * Returns an array of era for the given calender.\n *\n * @param {string} sCalendarType\n *   The calender type from which the the locale era data is taken from and the era array is\n *   generated\n * @returns {array} An array of all available era in the given calender\n */\nfunction getEras(sCalendarType) {\n  var oLocale = Configuration.getFormatSettings().getFormatLocale(),\n    oLocaleData = LocaleData.getInstance(oLocale),\n    aEras = mEras[sCalendarType];\n  if (!aEras) {\n    // Get eras from localedata, parse it and add it to the array\n    var aEras = oLocaleData.getEraDates(sCalendarType);\n    if (!aEras[0]) {\n      aEras[0] = {\n        _start: \"1-1-1\"\n      };\n    }\n    for (var i = 0; i < aEras.length; i++) {\n      var oEra = aEras[i];\n      if (!oEra) {\n        continue;\n      }\n      if (oEra._start) {\n        oEra._startInfo = parseDateString(oEra._start);\n      }\n      if (oEra._end) {\n        oEra._endInfo = parseDateString(oEra._end);\n      }\n    }\n    mEras[sCalendarType] = aEras;\n  }\n  return aEras;\n}\n\n/**\n * Returns an object containing the date parts year, month, day of month and the date timestamp value\n * of the given date string.\n *\n * @param {string} sDateString The date string which is to be parsed\n * @returns {object}\n *   An object containing the year, month, day of month and date timestamp values of the given\n *   date string\n */\nfunction parseDateString(sDateString) {\n  var aParts = sDateString.split(\"-\"),\n    iYear,\n    iMonth,\n    iDay;\n  if (aParts[0] == \"\") {\n    // negative year\n    iYear = -parseInt(aParts[1]);\n    iMonth = parseInt(aParts[2]) - 1;\n    iDay = parseInt(aParts[3]);\n  } else {\n    iYear = parseInt(aParts[0]);\n    iMonth = parseInt(aParts[1]) - 1;\n    iDay = parseInt(aParts[2]);\n  }\n  return {\n    // no need to use UI5Date.getInstance as only the UTC timestamp is used\n    timestamp: new Date(0).setUTCFullYear(iYear, iMonth, iDay),\n    year: iYear,\n    month: iMonth,\n    day: iDay\n  };\n}\nexport default UniversalDate;"],
  "mappings": "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AO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAAgB;AAAA,EAClB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,OAAO;AAAA,IACP,gBAA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",
  "names": ["CalendarType", "getCalendarType", "getSecondaryCalendarType", "sValue", "CalendarType", "CalendarType_default", "CalendarType_default", "formatSettings", "getTimezone", "emptyFn", "getCalendarType", "getTimezone", "emptyFn", "mTypes", "oObject", "sMethodName", "CalendarWeekNumbering_default", "oToken", "sPattern", "CalendarType_default", "fnOr", "i", "sId", "CalendarWeekNumbering_default", "CalendarWeekNumbering_default", "CalendarWeekNumbering_default"]
}

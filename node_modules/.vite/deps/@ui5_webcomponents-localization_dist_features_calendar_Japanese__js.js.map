{
  "version": 3,
  "sources": ["../../@ui5/webcomponents-localization/dist/sap/ui/core/date/Japanese.js"],
  "sourcesContent": ["/*!\n * OpenUI5\n * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.\n * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.\n */\n// Provides class sap.ui.core.date.Japanese\nimport UniversalDate from \"./UniversalDate.js\";\nimport CalendarType from \"../CalendarType.js\";\nimport _Calendars from \"./_Calendars.js\";\n/**\n * The Japanese date class\n *\n * @class\n * The Japanese date adds support for era, by returning the CLDR era type in the getEra method and calculating\n * the year dependent on the current era.\n *\n * For the constructor and the UTC method, for the year parameter the following rules apply:\n * - A year less than 100 will be treated as year of the current emperor era\n * - A year equal or more than 100 will be treated as a gregorian year\n * - An array with two entries will be treated as era and emperor year\n *\n * @private\n * @alias sap.ui.core.date.Japanese\n * @extends sap.ui.core.date.UniversalDate\n */\nvar Japanese = UniversalDate.extend(\"sap.ui.core.date.Japanese\", /** @lends sap.ui.core.date.Japanese.prototype */{\n  constructor: function () {\n    var aArgs = arguments;\n    if (aArgs.length > 1) {\n      aArgs = toGregorianArguments(aArgs);\n    }\n    this.oDate = this.createDate(Date, aArgs);\n    this.sCalendarType = CalendarType.Japanese;\n  }\n});\nJapanese.UTC = function () {\n  var aArgs = toGregorianArguments(arguments);\n  return Date.UTC.apply(Date, aArgs);\n};\nJapanese.now = function () {\n  return Date.now();\n};\n\n/**\n * Find the matching japanese date for the given gregorian date\n *\n * @param {object} oGregorian\n * @return {object}\n */\nfunction toJapanese(oGregorian) {\n  var iEra = UniversalDate.getEraByDate(CalendarType.Japanese, oGregorian.year, oGregorian.month, oGregorian.day),\n    iEraStartYear = UniversalDate.getEraStartDate(CalendarType.Japanese, iEra).year;\n  return {\n    era: iEra,\n    year: oGregorian.year - iEraStartYear + 1,\n    month: oGregorian.month,\n    day: oGregorian.day\n  };\n}\n\n/**\n * Calculate Gregorian year from Japanese era and year\n *\n * @param {object} oJapanese\n * @return {int}\n */\nfunction toGregorian(oJapanese) {\n  var iEraStartYear = UniversalDate.getEraStartDate(CalendarType.Japanese, oJapanese.era).year;\n  return {\n    year: iEraStartYear + oJapanese.year - 1,\n    month: oJapanese.month,\n    day: oJapanese.day\n  };\n}\n\n/**\n * Convert arguments array from Japanese date to Gregorian data.\n *\n * @param {int[]|any[]} aArgs Array with year (or [era, year]), month and day (optional) according to Japanese calendar\n * @returns {int[]} Array with year, month and day according to the Gregorian calendar\n */\nfunction toGregorianArguments(aArgs) {\n  var oJapanese,\n    oGregorian,\n    iEra,\n    vYear = aArgs[0];\n  if (typeof vYear == \"number\") {\n    if (vYear >= 100) {\n      // Year greater than 100 will be treated as gregorian year\n      return aArgs;\n    } else {\n      // Year less than 100 is emperor year in the current era\n      iEra = UniversalDate.getCurrentEra(CalendarType.Japanese);\n      vYear = [iEra, vYear];\n    }\n  } else if (!Array.isArray(vYear)) {\n    // Invalid year\n    vYear = [];\n  }\n  oJapanese = {\n    era: vYear[0],\n    year: vYear[1],\n    month: aArgs[1],\n    day: aArgs[2] !== undefined ? aArgs[2] : 1\n  };\n  oGregorian = toGregorian(oJapanese);\n  aArgs[0] = oGregorian.year;\n  return aArgs;\n}\n\n/**\n * Get the japanese era/year from this.oDate\n *\n * @return {object}\n */\nJapanese.prototype._getJapanese = function () {\n  var oGregorian = {\n    year: this.oDate.getFullYear(),\n    month: this.oDate.getMonth(),\n    day: this.oDate.getDate()\n  };\n  return toJapanese(oGregorian);\n};\n\n/**\n * Set the japanese era/year to this.oDate\n */\nJapanese.prototype._setJapanese = function (oJapanese) {\n  var oGregorian = toGregorian(oJapanese);\n  return this.oDate.setFullYear(oGregorian.year, oGregorian.month, oGregorian.day);\n};\n\n/**\n * Get the japanese era/year from this.oDate in UTC\n *\n * @return {object}\n */\nJapanese.prototype._getUTCJapanese = function () {\n  var oGregorian = {\n    year: this.oDate.getUTCFullYear(),\n    month: this.oDate.getUTCMonth(),\n    day: this.oDate.getUTCDate()\n  };\n  return toJapanese(oGregorian);\n};\n\n/**\n * Set the japanese era/year to this.oDate in UTC\n */\nJapanese.prototype._setUTCJapanese = function (oJapanese) {\n  var oGregorian = toGregorian(oJapanese);\n  return this.oDate.setUTCFullYear(oGregorian.year, oGregorian.month, oGregorian.day);\n};\n\n/*\n * Override relevant getters/setters\n */\nJapanese.prototype.getYear = function () {\n  return this._getJapanese().year;\n};\nJapanese.prototype.getFullYear = function () {\n  return this._getJapanese().year;\n};\nJapanese.prototype.getEra = function () {\n  return this._getJapanese().era;\n};\nJapanese.prototype.getUTCFullYear = function () {\n  return this._getUTCJapanese().year;\n};\nJapanese.prototype.getUTCEra = function () {\n  return this._getUTCJapanese().era;\n};\nJapanese.prototype.setYear = function (iYear) {\n  var oJapanese = this._getJapanese();\n  oJapanese.year = iYear;\n  return this._setJapanese(oJapanese);\n};\nJapanese.prototype.setFullYear = function (iYear, iMonth, iDay) {\n  var oJapanese = this._getJapanese();\n  oJapanese.year = iYear;\n  if (iMonth !== undefined) {\n    oJapanese.month = iMonth;\n  }\n  if (iDay !== undefined) {\n    oJapanese.day = iDay;\n  }\n  return this._setJapanese(oJapanese);\n};\nJapanese.prototype.setEra = function (iEra, iYear, iMonth, iDay) {\n  var oEraStartDate = UniversalDate.getEraStartDate(CalendarType.Japanese, iEra),\n    oJapanese = toJapanese(oEraStartDate);\n  if (iYear !== undefined) {\n    oJapanese.year = iYear;\n  }\n  if (iMonth !== undefined) {\n    oJapanese.month = iMonth;\n  }\n  if (iDay !== undefined) {\n    oJapanese.day = iDay;\n  }\n  return this._setJapanese(oJapanese);\n};\nJapanese.prototype.setUTCFullYear = function (iYear, iMonth, iDay) {\n  var oJapanese = this._getUTCJapanese();\n  oJapanese.year = iYear;\n  if (iMonth !== undefined) {\n    oJapanese.month = iMonth;\n  }\n  if (iDay !== undefined) {\n    oJapanese.day = iDay;\n  }\n  return this._setUTCJapanese(oJapanese);\n};\nJapanese.prototype.setUTCEra = function (iEra, iYear, iMonth, iDay) {\n  var oEraStartDate = UniversalDate.getEraStartDate(CalendarType.Japanese, iEra),\n    oJapanese = toJapanese(oEraStartDate);\n  if (iYear !== undefined) {\n    oJapanese.year = iYear;\n  }\n  if (iMonth !== undefined) {\n    oJapanese.month = iMonth;\n  }\n  if (iDay !== undefined) {\n    oJapanese.day = iDay;\n  }\n  return this._setUTCJapanese(oJapanese);\n};\n\n/**\n * Note: The resulting year is the Gregorian year\n *\n * @override\n * @see sap.ui.core.date.UniversalDate#getWeek\n */\nJapanese.prototype.getWeek = function (oLocale, vCalendarWeekNumbering) {\n  // Use the Gregorian year (from this.oDate), because the Japanese emperor year lacks the\n  // information of the era which makes the year not unique.\n  // Using the Gregorian year is valid, because Japanese#constructor is able to calculate the\n  // era and Japanese emperor year from the Gregorian year.\n  return UniversalDate.getWeekByDate(this.sCalendarType, this.oDate.getFullYear(), this.getMonth(), this.getDate(), oLocale, vCalendarWeekNumbering);\n};\n\n/**\n * Note: The resulting year is the Gregorian year\n *\n * @override\n * @see sap.ui.core.date.UniversalDate#getUTCWeek\n */\nJapanese.prototype.getUTCWeek = function (oLocale, vCalendarWeekNumbering) {\n  // Use the Gregorian year (from this.oDate), because the Japanese emperor year lacks the\n  // information of the era which makes the year not unique.\n  // Using the Gregorian year is valid, because Japanese#constructor is able to calculate the\n  // era and Japanese emperor year from the Gregorian year.\n  return UniversalDate.getWeekByDate(this.sCalendarType, this.oDate.getUTCFullYear(), this.getUTCMonth(), this.getUTCDate(), oLocale, vCalendarWeekNumbering);\n};\n_Calendars.set(CalendarType.Japanese, Japanese);\nexport default Japanese;"],
  "mappings": "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",
  "names": []
}
